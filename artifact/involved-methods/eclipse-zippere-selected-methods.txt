<dacapo.DacapoException: void <init>(java.lang.String)>
<dacapo.parser.ParseException: java.lang.String getMessage()>
<dacapo.parser.ParseException: void <init>()>
<dacapo.parser.ParseException: void <init>(dacapo.parser.Token,int[][],java.lang.String[])>
<dacapo.parser.TokenMgrError: java.lang.String getMessage()>
<dacapo.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<dacapo.parser.TokenMgrError: void <init>(java.lang.String,int)>
<java.io.EOFException: void <init>()>
<java.io.EOFException: void <init>(java.lang.String)>
<java.io.ExpiringCache$1: void <init>(java.io.ExpiringCache)>
<java.io.ExpiringCache$Entry: java.lang.String val()>
<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>
<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>
<java.io.ExpiringCache: java.lang.String get(java.lang.String)>
<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>
<java.io.FileNotFoundException: void <init>()>
<java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<java.io.IOException: void <init>()>
<java.io.IOException: void <init>(java.lang.String)>
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>
<java.io.UTFDataFormatException: void <init>()>
<java.io.UTFDataFormatException: void <init>(java.lang.String)>
<java.io.UnsupportedEncodingException: void <init>()>
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<java.lang.AbstractMethodError: void <init>()>
<java.lang.AbstractMethodError: void <init>(java.lang.String)>
<java.lang.ArithmeticException: void <init>()>
<java.lang.ArithmeticException: void <init>(java.lang.String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(int)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.AssertionError: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.Character$Subset: java.lang.String toString()>
<java.lang.Character$Subset: void <init>(java.lang.String)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<java.lang.ClassNotFoundException: void <init>()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.ConditionalSpecialCasing$Entry: char[] getLowerCase()>
<java.lang.ConditionalSpecialCasing$Entry: char[] getUpperCase()>
<java.lang.ConditionalSpecialCasing$Entry: java.lang.String getLanguage()>
<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>
<java.lang.Enum: java.lang.String toString()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.Error: void <init>()>
<java.lang.Error: void <init>(java.lang.String)>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<java.lang.ExceptionInInitializerError: void <init>()>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<java.lang.IllegalAccessError: void <init>()>
<java.lang.IllegalAccessError: void <init>(java.lang.String)>
<java.lang.IllegalAccessException: void <init>()>
<java.lang.IllegalAccessException: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.IllegalThreadStateException: void <init>()>
<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>
<java.lang.IncompatibleClassChangeError: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.InheritableThreadLocal: java.lang.Object childValue(java.lang.Object)>
<java.lang.InheritableThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>
<java.lang.InstantiationException: void <init>()>
<java.lang.InstantiationException: void <init>(java.lang.String)>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(java.lang.String)>
<java.lang.LinkageError: void <init>()>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>
<java.lang.NoClassDefFoundError: void <init>()>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<java.lang.NoSuchFieldException: void <init>(java.lang.String)>
<java.lang.NoSuchMethodException: void <init>()>
<java.lang.NoSuchMethodException: void <init>(java.lang.String)>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.lang.NumberFormatException: void <init>()>
<java.lang.NumberFormatException: void <init>(java.lang.String)>
<java.lang.Object: java.lang.Object clone()>
<java.lang.OutOfMemoryError: void <init>()>
<java.lang.OutOfMemoryError: void <init>(java.lang.String)>
<java.lang.Package: java.lang.String getName()>
<java.lang.Package: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>
<java.lang.ProcessEnvironment$ExternalData: byte[] getBytes()>
<java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.lang.ProcessEnvironment$ExternalData: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.lang.ProcessEnvironment$StringEntry: void <init>(java.util.Map$Entry)>
<java.lang.ProcessEnvironment$StringEntrySet$1: void <init>(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Set access$500(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringEntrySet: void <init>(java.util.Set)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String put(java.lang.String,java.lang.String)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String toString(java.lang.ProcessEnvironment$Value)>
<java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>
<java.lang.ProcessEnvironment$StringValues$1: void <init>(java.lang.ProcessEnvironment$StringValues)>
<java.lang.ProcessEnvironment$StringValues: boolean contains(java.lang.Object)>
<java.lang.ProcessEnvironment$StringValues: java.util.Collection access$700(java.lang.ProcessEnvironment$StringValues)>
<java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<java.lang.ProcessEnvironment$StringValues: void <init>(java.util.Collection)>
<java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.Object)>
<java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.String)>
<java.lang.ProcessEnvironment$Value: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.Object)>
<java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.String)>
<java.lang.ProcessEnvironment$Variable: void <init>(java.lang.String,byte[])>
<java.lang.RuntimeException: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.SecurityException: void <init>()>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.StringCoding$StringDecoder: char[] decode(byte[],int,int)>
<java.lang.StringCoding$StringDecoder: java.lang.String charsetName()>
<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName()>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringCoding$StringEncoder: java.lang.String charsetName()>
<java.lang.StringCoding$StringEncoder: java.lang.String requestedCharsetName()>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>
<java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.SystemClassLoaderAction: java.lang.Object run()>
<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.ThreadGroup: java.lang.String getName()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadGroup: void <init>(java.lang.Void,java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadLocal$ThreadLocalMap$Entry: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: void access$100(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: void replaceStaleEntry(java.lang.ThreadLocal,java.lang.Object,int)>
<java.lang.ThreadLocal$ThreadLocalMap: void set(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal: java.lang.Object get()>
<java.lang.ThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>
<java.lang.ThreadLocal: void set(java.lang.Object)>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.String toString()>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.lang.UnsatisfiedLinkError: void <init>()>
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.lang.UnsupportedOperationException: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.VirtualMachineError: void <init>(java.lang.String)>
<java.lang.ref.FinalReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.Finalizer$FinalizerThread: void <init>(java.lang.ThreadGroup)>
<java.lang.ref.Reference$ReferenceHandler: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ref.Reference: java.lang.Object get()>
<java.lang.ref.Reference: void <init>(java.lang.Object)>
<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.ReferenceQueue: boolean enqueue(java.lang.ref.Reference)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>
<java.lang.ref.SoftReference: java.lang.Object get()>
<java.lang.ref.SoftReference: void <init>(java.lang.Object)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>
<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>
<java.lang.reflect.InvocationTargetException: void <init>()>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>
<java.lang.reflect.ReflectAccess: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>
<java.math.BigInteger: java.lang.String toString()>
<java.math.BigInteger: java.lang.String toString(int)>
<java.math.BigInteger: java.math.BigInteger abs()>
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger negate()>
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>
<java.math.BigInteger: void <init>(int[],int)>
<java.math.MutableBigInteger: int[] getMagnitudeArray()>
<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>
<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>
<java.math.MutableBigInteger: java.math.MutableBigInteger divideMagnitude(int[],java.math.MutableBigInteger)>
<java.math.MutableBigInteger: void <init>(int[])>
<java.math.MutableBigInteger: void setValue(int[],int)>
<java.net.Inet4Address: void <init>(java.lang.String,byte[])>
<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>
<java.net.InetAddress: java.lang.String getHostName()>
<java.net.InetAddress: java.lang.String getHostName(boolean)>
<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>
<java.net.InetAddress: void <init>()>
<java.net.MalformedURLException: void <init>()>
<java.net.MalformedURLException: void <init>(java.lang.String)>
<java.net.Parts: java.lang.String getPath()>
<java.net.Parts: void <init>(java.lang.String)>
<java.net.Proxy: java.net.Proxy$Type type()>
<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<java.net.URI: java.lang.String decode(java.lang.String)>
<java.net.URISyntaxException: java.lang.String getReason()>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<java.net.URLClassLoader$3$1: java.lang.Object run()>
<java.net.URLClassLoader$3: void <init>(java.net.URLClassLoader,java.util.Enumeration)>
<java.net.URLConnection: java.net.URL getURL()>
<java.net.URLConnection: void <init>(java.net.URL)>
<java.net.UnknownHostException: void <init>(java.lang.String)>
<java.net.UnknownServiceException: void <init>(java.lang.String)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.Buffer: void <init>(int,int,int,int)>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>
<java.nio.CharBuffer: char[] array()>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.nio.CharBuffer: void <init>(int,int,int,int)>
<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer compact()>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.HeapByteBuffer: void <init>(byte[],int,int)>
<java.nio.HeapByteBuffer: void <init>(int,int)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<java.nio.HeapCharBuffer: void <init>(char[],int,int)>
<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>
<java.nio.HeapCharBuffer: void <init>(int,int)>
<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int)>
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>
<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float,java.lang.String)>
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>
<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>
<java.security.AccessControlContext: java.security.AccessControlContext goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)>
<java.security.AccessControlContext: java.security.AccessControlContext optimize()>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>
<java.security.DigestException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>
<java.security.InvalidParameterException: void <init>()>
<java.security.InvalidParameterException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyException: void <init>(java.lang.Throwable)>
<java.security.KeyStoreException: void <init>(java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.MessageDigest$Delegate: byte[] engineDigest()>
<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>
<java.security.MessageDigest: byte[] digest()>
<java.security.MessageDigest: byte[] digest(byte[])>
<java.security.MessageDigest: java.lang.String getAlgorithm()>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>
<java.security.MessageDigest: void <init>(java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>
<java.security.NoSuchProviderException: void <init>(java.lang.String)>
<java.security.PermissionCollection: java.lang.String toString()>
<java.security.ProtectionDomain$2$1: java.security.PermissionCollection get(java.security.ProtectionDomain)>
<java.security.ProtectionDomain$2$1: void put(java.security.ProtectionDomain,java.security.PermissionCollection)>
<java.security.ProtectionDomain$Key: void <init>(java.security.ProtectionDomain)>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<java.security.Provider$UString: java.lang.String toString()>
<java.security.Provider$UString: void <init>(java.lang.String)>
<java.security.ProviderException: void <init>()>
<java.security.ProviderException: void <init>(java.lang.String)>
<java.security.ProviderException: void <init>(java.lang.Throwable)>
<java.security.SignatureException: void <init>(java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CRLException: void <init>(java.lang.String)>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>
<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>
<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()>
<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>
<java.security.cert.X509CertSelector: java.lang.Object clone()>
<java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.text.AttributeEntry: java.lang.Object getKey()>
<java.text.AttributeEntry: java.lang.Object getValue()>
<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition,java.text.FieldPosition$1)>
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>
<java.text.FieldPosition: java.text.Format$FieldDelegate getFieldDelegate()>
<java.text.FieldPosition: void <init>(java.text.Format$Field)>
<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>
<java.text.ParseException: void <init>(java.lang.String,int)>
<java.text.RBCollationTables: java.lang.String getRules()>
<java.text.RBCollationTables: void <init>(java.lang.String,int)>
<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>
<java.text.RuleBasedBreakIterator$SafeCharIterator: void <init>(java.text.CharacterIterator)>
<java.text.RuleBasedCollator: void <init>(java.lang.String,int)>
<java.text.StringCharacterIterator: java.lang.Object clone()>
<java.text.StringCharacterIterator: void <init>(java.lang.String)>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int)>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int,int,int)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.AbstractCollection: java.lang.String toString()>
<java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>
<java.util.AbstractList$ListItr: java.lang.Object previous()>
<java.util.AbstractList$ListItr: void <init>(java.util.AbstractList,int)>
<java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.AbstractMap$2$1: void <init>(java.util.AbstractMap$2)>
<java.util.AbstractMap$2: java.util.Iterator iterator()>
<java.util.AbstractMap$2: void <init>(java.util.AbstractMap)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: void <init>(java.util.Map$Entry)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.AbstractMap: int hashCode()>
<java.util.AbstractMap: java.lang.Object clone()>
<java.util.AbstractMap: java.lang.String toString()>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.AbstractSet: boolean removeAll(java.util.Collection)>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.ArrayList: java.lang.Object[] toArray()>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: void fastRemove(int)>
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SingletonMap: void <init>(java.lang.Object,java.lang.Object)>
<java.util.Collections$SingletonSet$1: java.lang.Object next()>
<java.util.Collections$SingletonSet$1: void <init>(java.util.Collections$SingletonSet)>
<java.util.Collections$SingletonSet: java.lang.Object access$400(java.util.Collections$SingletonSet)>
<java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.util.Collection values()>
<java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<java.util.Collections$SynchronizedMap: java.util.Set keySet()>
<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>
<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: void <init>(java.util.Map$Entry)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void <init>(java.util.Set)>
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>
<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection,java.lang.Object)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set,java.lang.Object)>
<java.util.EventObject: java.lang.Object getSource()>
<java.util.EventObject: void <init>(java.lang.Object)>
<java.util.HashMap$Entry: boolean equals(java.lang.Object)>
<java.util.HashMap$Entry: int hashCode()>
<java.util.HashMap$Entry: java.lang.Object getKey()>
<java.util.HashMap$Entry: java.lang.Object getValue()>
<java.util.HashMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$HashIterator: java.util.HashMap$Entry nextEntry()>
<java.util.HashMap$HashIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$HashIterator: void remove()>
<java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.HashMap$Values: void <init>(java.util.HashMap)>
<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: java.lang.Object clone()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object getForNullKey()>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object putForNullKey(java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>
<java.util.HashMap: java.util.Iterator newEntryIterator()>
<java.util.HashMap: java.util.Iterator newKeyIterator()>
<java.util.HashMap: java.util.Iterator newValueIterator()>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: java.util.Set entrySet0()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int,float)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.HashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashMap: void putAllForCreate(java.util.Map)>
<java.util.HashMap: void putForCreate(java.lang.Object,java.lang.Object)>
<java.util.HashMap: void resize(int)>
<java.util.HashMap: void transfer(java.util.HashMap$Entry[])>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.HashSet: java.lang.Object clone()>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>()>
<java.util.HashSet: void <init>(int)>
<java.util.HashSet: void <init>(int,float)>
<java.util.HashSet: void <init>(int,float,boolean)>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.Object clone()>
<java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.Hashtable$Entry: java.lang.String toString()>
<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>
<java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>
<java.util.Hashtable$Enumerator: void remove()>
<java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable)>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable: boolean contains(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object clone()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Enumeration getEnumeration(int)>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>
<java.util.Hashtable: java.util.Iterator access$100(java.util.Hashtable,int)>
<java.util.Hashtable: java.util.Iterator getIterator(int)>
<java.util.Hashtable: java.util.Set entrySet()>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.Hashtable: void <init>(int,float)>
<java.util.Hashtable: void <init>(java.util.Map)>
<java.util.Hashtable: void putAll(java.util.Map)>
<java.util.Hashtable: void rehash()>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object access$600(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object unmaskNull(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object[] access$100(java.util.IdentityHashMap)>
<java.util.IdentityHashMap: java.util.Set keySet()>
<java.util.IdentityHashMap: void closeDeletion(int)>
<java.util.IdentityHashMap: void init(int)>
<java.util.IdentityHashMap: void resize(int)>
<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.LinkedHashMap$Entry: void access$600(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$Entry: void addBefore(java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$Entry: void recordAccess(java.util.HashMap)>
<java.util.LinkedHashMap$Entry: void remove()>
<java.util.LinkedHashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry()>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$ValueIterator: java.lang.Object next()>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.LinkedHashMap: java.util.Iterator newEntryIterator()>
<java.util.LinkedHashMap: java.util.Iterator newKeyIterator()>
<java.util.LinkedHashMap: java.util.Iterator newValueIterator()>
<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>
<java.util.LinkedHashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.LinkedHashMap: void clear()>
<java.util.LinkedHashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.LinkedHashMap: void init()>
<java.util.LinkedHashMap: void transfer(java.util.HashMap$Entry[])>
<java.util.LinkedList$Entry: void <init>(java.lang.Object,java.util.LinkedList$Entry,java.util.LinkedList$Entry)>
<java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.LinkedList$ListItr: void <init>(java.util.LinkedList,int)>
<java.util.LinkedList$ListItr: void remove()>
<java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>
<java.util.LinkedList: java.lang.Object access$200(java.util.LinkedList,java.util.LinkedList$Entry)>
<java.util.LinkedList: java.lang.Object get(int)>
<java.util.LinkedList: java.lang.Object remove(java.util.LinkedList$Entry)>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.LinkedList: java.lang.Object[] toArray()>
<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.LinkedList: java.util.LinkedList$Entry access$000(java.util.LinkedList)>
<java.util.LinkedList: java.util.LinkedList$Entry addBefore(java.lang.Object,java.util.LinkedList$Entry)>
<java.util.LinkedList: java.util.LinkedList$Entry entry(int)>
<java.util.LinkedList: java.util.ListIterator listIterator(int)>
<java.util.LinkedList: void <init>()>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.NoSuchElementException: void <init>()>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.RandomAccessSubList: void <init>(java.util.AbstractList,int,int)>
<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>
<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>
<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>
<java.util.ResourceBundle$CacheKey: java.lang.String getName()>
<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>
<java.util.ResourceBundle$Control$1: java.io.InputStream run()>
<java.util.ResourceBundle$Control$1: java.lang.Object run()>
<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>
<java.util.ResourceBundle$LoaderReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.util.ResourceBundle$LoaderReference: void <init>(java.lang.ClassLoader,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.StringTokenizer: java.lang.Object nextElement()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.SubList$1: void <init>(java.util.SubList,int)>
<java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<java.util.SubList: java.util.Iterator iterator()>
<java.util.SubList: java.util.ListIterator listIterator(int)>
<java.util.SubList: void <init>(java.util.AbstractList,int,int)>
<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: java.util.Iterator iterator()>
<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: void <init>(java.util.TreeMap$AscendingSubMap)>
<java.util.TreeMap$AscendingSubMap: java.util.Set entrySet()>
<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>
<java.util.TreeMap$Entry: java.lang.Object getKey()>
<java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>
<java.util.TreeMap$EntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap$EntrySet: void <init>(java.util.TreeMap)>
<java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.TreeMap$KeyIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$KeySet: boolean contains(java.lang.Object)>
<java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.TreeMap$KeySet: void <init>(java.util.NavigableMap)>
<java.util.TreeMap$NavigableSubMap$EntrySetView: void <init>(java.util.TreeMap$NavigableSubMap)>
<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>
<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: void <init>(java.util.TreeMap$NavigableSubMap,java.util.TreeMap$Entry,java.util.TreeMap$Entry)>
<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry nextEntry()>
<java.util.TreeMap$NavigableSubMap$SubMapIterator: void <init>(java.util.TreeMap$NavigableSubMap,java.util.TreeMap$Entry,java.util.TreeMap$Entry)>
<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absHighFence()>
<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowest()>
<java.util.TreeMap$NavigableSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>
<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry nextEntry()>
<java.util.TreeMap$PrivateEntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$PrivateEntryIterator: void remove()>
<java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.TreeMap$ValueIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$Values: java.util.Iterator iterator()>
<java.util.TreeMap$Values: void <init>(java.util.TreeMap)>
<java.util.TreeMap: boolean containsKey(java.lang.Object)>
<java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap: java.util.Collection values()>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.TreeMap: java.util.Iterator keyIterator()>
<java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>
<java.util.TreeMap: java.util.Set entrySet()>
<java.util.TreeMap: java.util.Set keySet()>
<java.util.TreeMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>
<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.TreeMap: void addAllForTreeSet(java.util.SortedSet,java.lang.Object)>
<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>
<java.util.TreeMap: void fixAfterDeletion(java.util.TreeMap$Entry)>
<java.util.TreeMap: void fixAfterInsertion(java.util.TreeMap$Entry)>
<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>
<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>
<java.util.TreeSet: boolean add(java.lang.Object)>
<java.util.TreeSet: java.lang.Object clone()>
<java.util.TreeSet: java.util.Comparator comparator()>
<java.util.TreeSet: java.util.Iterator iterator()>
<java.util.TreeSet: void <init>()>
<java.util.TreeSet: void <init>(java.util.Comparator)>
<java.util.TreeSet: void <init>(java.util.NavigableMap)>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Vector: void <init>(int,int)>
<java.util.Vector: void addElement(java.lang.Object)>
<java.util.WeakHashMap$Entry: java.lang.Object access$200(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: java.lang.Object access$202(java.util.WeakHashMap$Entry,java.lang.Object)>
<java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$100(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$102(java.util.WeakHashMap$Entry,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$EntrySet: java.util.List deepCopy()>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry()>
<java.util.WeakHashMap$HashIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$HashIterator: void remove()>
<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.WeakHashMap$KeyIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$KeyIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$KeySet: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$KeySet: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object access$300(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object maskNull(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object unmaskNull(java.lang.Object)>
<java.util.WeakHashMap: java.util.Collection values()>
<java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.WeakHashMap: java.util.Set keySet()>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] access$500(java.util.WeakHashMap)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] getTable()>
<java.util.WeakHashMap: void <init>()>
<java.util.WeakHashMap: void expungeStaleEntries()>
<java.util.WeakHashMap: void resize(int)>
<java.util.WeakHashMap: void transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[])>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySet: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry[] newArray(int)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(java.lang.Object,int,java.util.concurrent.ConcurrentHashMap$HashEntry,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry()>
<java.util.concurrent.ConcurrentHashMap$HashIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$HashIterator: void advance()>
<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySet: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$Segment: boolean containsKey(java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object get(java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object readValueUnderLock(java.util.concurrent.ConcurrentHashMap$HashEntry)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry getFirst(int)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$Segment[] newArray(int)>
<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(int,float)>
<java.util.concurrent.ConcurrentHashMap$Segment: void rehash()>
<java.util.concurrent.ConcurrentHashMap$Segment: void setTable(java.util.concurrent.ConcurrentHashMap$HashEntry[])>
<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$Values: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentFor(int)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>
<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>
<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object dequeue()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>
<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.lang.Object)>
<java.util.concurrent.TimeUnit$1: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$2: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$3: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$4: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$5: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$6: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$7: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit$1)>
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: long awaitNanos(long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signalAll()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>
<java.util.jar.JarEntry: void <init>(java.lang.String)>
<java.util.jar.JarException: void <init>(java.lang.String)>
<java.util.jar.JarFile$1: java.lang.Object nextElement()>
<java.util.jar.JarFile$1: java.util.jar.JarFile$JarFileEntry nextElement()>
<java.util.jar.JarFile$1: void <init>(java.util.jar.JarFile,java.util.Enumeration)>
<java.util.jar.JarFile$JarFileEntry: void <init>(java.util.jar.JarFile,java.util.zip.ZipEntry)>
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>
<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>
<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream,int)>
<java.util.jar.Manifest: void <init>(java.io.InputStream)>
<java.util.jar.Manifest: void read(java.io.InputStream)>
<java.util.logging.Level$KnownLevel: void <init>(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String getLocalizedLevelName()>
<java.util.logging.Level: void <init>(java.lang.String,int)>
<java.util.logging.Level: void <init>(java.lang.String,int,java.lang.String)>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>
<java.util.regex.Matcher: java.lang.String group()>
<java.util.regex.Matcher: java.lang.String group(int)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>
<java.util.regex.Pattern$1: void <init>(java.util.regex.Pattern,java.lang.Character$UnicodeBlock)>
<java.util.regex.Pattern$3: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$4: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$6: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$7: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$8: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$CharProperty$1: void <init>(java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty complement()>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty maybeComplement(boolean)>
<java.util.regex.Pattern$CharPropertyNames$4: java.util.regex.Pattern$CharProperty make()>
<java.util.regex.Pattern$CharPropertyNames$4: void <init>(java.util.regex.Pattern$CharPropertyNames$CloneableProperty)>
<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.util.zip.ZipEntry: java.lang.String getName()>
<java.util.zip.ZipEntry: void <init>(java.lang.String)>
<java.util.zip.ZipEntry: void <init>(java.lang.String,long)>
<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.zip.ZipError: void <init>(java.lang.String)>
<java.util.zip.ZipException: void <init>()>
<java.util.zip.ZipException: void <init>(java.lang.String)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.lang.String)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry createZipEntry(java.lang.String)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry readLOC()>
<javax.crypto.ExemptionMechanism: java.lang.String getName()>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>
<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>
<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(java.lang.String)>
<javax.security.auth.Subject$SecureSet$2: java.lang.Object run()>
<javax.security.auth.Subject$SecureSet$2: void <init>(javax.security.auth.Subject$SecureSet,java.util.Iterator)>
<javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()>
<javax.xml.parsers.FactoryConfigurationError: void <init>()>
<javax.xml.parsers.FactoryConfigurationError: void <init>(java.lang.Exception,java.lang.String)>
<javax.xml.parsers.FactoryFinder$ConfigurationError: java.lang.Exception getException()>
<javax.xml.parsers.FactoryFinder$ConfigurationError: void <init>(java.lang.String,java.lang.Exception)>
<javax.xml.transform.FactoryFinder$ConfigurationError: java.lang.Exception getException()>
<javax.xml.transform.FactoryFinder$ConfigurationError: void <init>(java.lang.String,java.lang.Exception)>
<javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>()>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>(java.lang.Exception,java.lang.String)>
<org.eclipse.core.internal.content.BasicDescription: org.eclipse.core.internal.content.IContentTypeInfo getContentTypeInfo()>
<org.eclipse.core.internal.content.BasicDescription: void <init>(org.eclipse.core.internal.content.IContentTypeInfo)>
<org.eclipse.core.internal.content.ContentDescription: java.lang.Object getDescribedProperty(org.eclipse.core.runtime.QualifiedName)>
<org.eclipse.core.internal.content.ContentDescription: java.lang.Object getProperty(org.eclipse.core.runtime.QualifiedName)>
<org.eclipse.core.internal.content.ContentDescription: java.lang.String getCharset()>
<org.eclipse.core.internal.content.ContentDescription: void <init>(org.eclipse.core.runtime.QualifiedName[],org.eclipse.core.internal.content.IContentTypeInfo)>
<org.eclipse.core.internal.content.ContentDescription: void setContentTypeInfo(org.eclipse.core.internal.content.IContentTypeInfo)>
<org.eclipse.core.internal.content.ContentDescription: void setProperty(org.eclipse.core.runtime.QualifiedName,java.lang.Object)>
<org.eclipse.core.internal.content.ContentTypeHandler$DummyContentDescription: void <init>(org.eclipse.core.internal.content.ContentTypeHandler)>
<org.eclipse.core.internal.content.ContentTypeHandler: org.eclipse.core.internal.content.ContentType getTarget()>
<org.eclipse.core.internal.content.ContentTypeHandler: org.eclipse.core.runtime.content.IContentDescription getDefaultDescription()>
<org.eclipse.core.internal.content.ContentTypeHandler: void <init>(org.eclipse.core.internal.content.ContentType,int)>
<org.eclipse.core.internal.content.ContentTypeMatcher: org.eclipse.core.runtime.content.IContentDescription getSpecificDescription(org.eclipse.core.internal.content.BasicDescription)>
<org.eclipse.core.internal.content.ContentTypeMatcher: org.eclipse.core.runtime.content.IContentTypeManager$ISelectionPolicy getPolicy()>
<org.eclipse.core.internal.content.ContentTypeMatcher: org.eclipse.core.runtime.preferences.IScopeContext getContext()>
<org.eclipse.core.internal.content.ContentTypeMatcher: void <init>(org.eclipse.core.runtime.content.IContentTypeManager$ISelectionPolicy,org.eclipse.core.runtime.preferences.IScopeContext)>
<org.eclipse.core.internal.content.ContentTypeSettings: org.eclipse.core.internal.content.ContentType getContentType()>
<org.eclipse.core.internal.content.ContentTypeSettings: void <init>(org.eclipse.core.internal.content.ContentType,org.eclipse.core.runtime.preferences.IScopeContext)>
<org.eclipse.core.internal.content.DefaultDescription: java.lang.Object getProperty(org.eclipse.core.runtime.QualifiedName)>
<org.eclipse.core.internal.content.DefaultDescription: java.lang.String getCharset()>
<org.eclipse.core.internal.content.DefaultDescription: void <init>(org.eclipse.core.internal.content.IContentTypeInfo)>
<org.eclipse.core.internal.content.FileSpec: java.lang.String getText()>
<org.eclipse.core.internal.content.FileSpec: java.lang.String toString()>
<org.eclipse.core.internal.content.FileSpec: void <init>(java.lang.String,int)>
<org.eclipse.core.internal.content.LowLevelIOException: java.io.IOException getActualException()>
<org.eclipse.core.internal.content.LowLevelIOException: void <init>(java.io.IOException)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: java.lang.String getName()>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asReverseComparisonNode(org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode assembleWith(org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode assembleWith(org.eclipse.core.internal.dtree.AbstractDataTreeNode,org.eclipse.core.runtime.IPath,int)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode childAtIgnoreCase(java.lang.String)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode childAtOrNull(java.lang.String)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode convertToAddedComparisonNode(org.eclipse.core.internal.dtree.AbstractDataTreeNode,int)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode convertToRemovedComparisonNode(org.eclipse.core.internal.dtree.AbstractDataTreeNode,int)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] assembleWith(org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.internal.dtree.AbstractDataTreeNode[],boolean)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] compareWith(org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] compareWithParent(org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] getChildren()>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] simplifyWithParent(org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: void <init>(java.lang.String,org.eclipse.core.internal.dtree.AbstractDataTreeNode[])>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: void setChildren(org.eclipse.core.internal.dtree.AbstractDataTreeNode[])>
<org.eclipse.core.internal.dtree.AbstractDataTreeNode: void setName(java.lang.String)>
<org.eclipse.core.internal.dtree.DataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asBackwardDelta(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode compareWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode copy()>
<org.eclipse.core.internal.dtree.DataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode simplifyWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataDeltaNode: void <init>(java.lang.String,java.lang.Object)>
<org.eclipse.core.internal.dtree.DataDeltaNode: void <init>(java.lang.String,java.lang.Object,org.eclipse.core.internal.dtree.AbstractDataTreeNode[])>
<org.eclipse.core.internal.dtree.DataTreeNode: java.lang.Object getData()>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asBackwardDelta(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asReverseComparisonNode(org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode compareWith(org.eclipse.core.internal.dtree.DataTreeNode,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode compareWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode copy()>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode forwardDeltaWith(org.eclipse.core.internal.dtree.DataTreeNode,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode forwardDeltaWithOrNullIfEqual(org.eclipse.core.internal.dtree.AbstractDataTreeNode,org.eclipse.core.internal.dtree.AbstractDataTreeNode,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode simplifyWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] forwardDeltaWith(org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.internal.dtree.AbstractDataTreeNode[],org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DataTreeNode: void <init>(java.lang.String,java.lang.Object)>
<org.eclipse.core.internal.dtree.DataTreeNode: void <init>(java.lang.String,java.lang.Object,org.eclipse.core.internal.dtree.AbstractDataTreeNode[])>
<org.eclipse.core.internal.dtree.DataTreeReader: org.eclipse.core.internal.dtree.AbstractDataTreeNode readNode(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DataTreeReader: org.eclipse.core.internal.dtree.DeltaDataTree readTree(org.eclipse.core.internal.dtree.DeltaDataTree,java.io.DataInput)>
<org.eclipse.core.internal.dtree.DataTreeReader: void <init>(org.eclipse.core.internal.dtree.IDataFlattener)>
<org.eclipse.core.internal.dtree.DeletedNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asBackwardDelta(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeletedNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode compareWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeletedNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode copy()>
<org.eclipse.core.internal.dtree.DeletedNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode simplifyWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeletedNode: void <init>(java.lang.String)>
<org.eclipse.core.internal.dtree.DeltaDataTree: java.lang.Object getData(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: java.lang.String[] getNamesOfChildren(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTree copy()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode copyCompleteSubtree(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode findNodeAt(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode getRootNode()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode naiveCopyCompleteSubtree(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode safeCopyCompleteSubtree(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode safeNaiveCopyCompleteSubtree(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode searchNodeAt(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.AbstractDataTreeNode[] getChildNodes(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree asBackwardDelta()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree asReverseComparisonTree(org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree assembleWithForwardDelta(org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree basicCompare(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree collapseTo(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree compareWith(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree compareWith(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree createEmptyDelta()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree forwardDeltaWith(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree getParent()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree newEmptyDeltaTree()>
<org.eclipse.core.internal.dtree.DeltaDataTree: org.eclipse.core.internal.dtree.DeltaDataTree reroot()>
<org.eclipse.core.internal.dtree.DeltaDataTree: void <init>(org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void <init>(org.eclipse.core.internal.dtree.AbstractDataTreeNode,org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void addChild(org.eclipse.core.runtime.IPath,java.lang.String,org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void assembleNode(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void createChild(org.eclipse.core.runtime.IPath,java.lang.String,java.lang.Object)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void createSubtree(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void deleteChild(org.eclipse.core.runtime.IPath,java.lang.String)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void empty()>
<org.eclipse.core.internal.dtree.DeltaDataTree: void emptyDelta()>
<org.eclipse.core.internal.dtree.DeltaDataTree: void reroot(org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void setData(org.eclipse.core.runtime.IPath,java.lang.Object)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void setParent(org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void setRootNode(org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.DeltaDataTree: void simplify(org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode asBackwardDelta(org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode compareWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode copy()>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: org.eclipse.core.internal.dtree.AbstractDataTreeNode simplifyWithParent(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: void <init>(java.lang.String)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: void <init>(java.lang.String,org.eclipse.core.internal.dtree.AbstractDataTreeNode)>
<org.eclipse.core.internal.dtree.NoDataDeltaNode: void <init>(java.lang.String,org.eclipse.core.internal.dtree.AbstractDataTreeNode[])>
<org.eclipse.core.internal.dtree.NodeComparison: java.lang.Object getNewData()>
<org.eclipse.core.internal.dtree.NodeComparison: java.lang.Object getOldData()>
<org.eclipse.core.internal.dtree.NodeComparison: org.eclipse.core.internal.dtree.NodeComparison asReverseComparison(org.eclipse.core.internal.dtree.IComparator)>
<org.eclipse.core.internal.dtree.NodeComparison: void <init>(java.lang.Object,java.lang.Object,int,int)>
<org.eclipse.core.internal.dtree.ObjectNotFoundException: void <init>(java.lang.String)>
<org.eclipse.core.internal.events.BuildManager$DeltaCache: java.lang.Object getDelta(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.events.BuildManager$DeltaCache: void cache(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.internal.watson.ElementTree,java.lang.Object)>
<org.eclipse.core.internal.events.BuilderPersistentInfo: java.lang.String getBuilderName()>
<org.eclipse.core.internal.events.BuilderPersistentInfo: java.lang.String getProjectName()>
<org.eclipse.core.internal.events.BuilderPersistentInfo: org.eclipse.core.internal.watson.ElementTree getLastBuiltTree()>
<org.eclipse.core.internal.events.BuilderPersistentInfo: org.eclipse.core.resources.IProject[] getInterestingProjects()>
<org.eclipse.core.internal.events.BuilderPersistentInfo: void <init>(java.lang.String,java.lang.String,int)>
<org.eclipse.core.internal.events.BuilderPersistentInfo: void setInterestingProjects(org.eclipse.core.resources.IProject[])>
<org.eclipse.core.internal.events.BuilderPersistentInfo: void setLastBuildTree(org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.events.InternalBuilder: org.eclipse.core.internal.watson.ElementTree getLastBuiltTree()>
<org.eclipse.core.internal.events.InternalBuilder: org.eclipse.core.resources.IProject getProject()>
<org.eclipse.core.internal.events.InternalBuilder: org.eclipse.core.resources.IProject[] getInterestingProjects()>
<org.eclipse.core.internal.events.InternalBuilder: void setInterestingProjects(org.eclipse.core.resources.IProject[])>
<org.eclipse.core.internal.events.InternalBuilder: void setLastBuiltTree(org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.events.InternalBuilder: void setProject(org.eclipse.core.resources.IProject)>
<org.eclipse.core.internal.events.NodeIDMap: org.eclipse.core.runtime.IPath getNewPath(long)>
<org.eclipse.core.internal.events.NodeIDMap: org.eclipse.core.runtime.IPath getOldPath(long)>
<org.eclipse.core.internal.events.NodeIDMap: void <init>()>
<org.eclipse.core.internal.events.NodeIDMap: void expand()>
<org.eclipse.core.internal.events.NodeIDMap: void put(long,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.events.NodeIDMap: void putNewPath(long,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.events.NodeIDMap: void putOldPath(long,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.events.NotificationManager$1: void <init>(org.eclipse.core.internal.events.NotificationManager$NotifyJob)>
<org.eclipse.core.internal.events.NotificationManager$NotifyJob: void <init>(org.eclipse.core.internal.events.NotificationManager)>
<org.eclipse.core.internal.events.NotificationManager: org.eclipse.core.internal.events.ResourceChangeListenerList$ListenerEntry[] getListeners()>
<org.eclipse.core.internal.events.NotificationManager: org.eclipse.core.internal.events.ResourceDelta getDelta(org.eclipse.core.internal.watson.ElementTree,int)>
<org.eclipse.core.internal.events.NotificationManager: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.events.NotificationManager: void addListener(org.eclipse.core.resources.IResourceChangeListener,int)>
<org.eclipse.core.internal.events.NotificationManager: void broadcastChanges(org.eclipse.core.resources.IResourceChangeListener,int,org.eclipse.core.resources.IResourceDelta)>
<org.eclipse.core.internal.events.NotificationManager: void shutdown(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.events.ResourceChangeEvent: org.eclipse.core.resources.IResource getResource()>
<org.eclipse.core.internal.events.ResourceChangeEvent: org.eclipse.core.resources.IResourceDelta getDelta()>
<org.eclipse.core.internal.events.ResourceChangeEvent: void <init>(java.lang.Object,int,int,org.eclipse.core.resources.IResourceDelta)>
<org.eclipse.core.internal.events.ResourceChangeEvent: void <init>(java.lang.Object,int,org.eclipse.core.resources.IResource)>
<org.eclipse.core.internal.events.ResourceChangeEvent: void setDelta(org.eclipse.core.resources.IResourceDelta)>
<org.eclipse.core.internal.events.ResourceChangeListenerList$ListenerEntry: void <init>(org.eclipse.core.resources.IResourceChangeListener,int)>
<org.eclipse.core.internal.events.ResourceChangeListenerList: org.eclipse.core.internal.events.ResourceChangeListenerList$ListenerEntry[] getListeners()>
<org.eclipse.core.internal.events.ResourceChangeListenerList: void add(org.eclipse.core.resources.IResourceChangeListener,int)>
<org.eclipse.core.internal.events.ResourceChangeListenerList: void remove(org.eclipse.core.resources.IResourceChangeListener)>
<org.eclipse.core.internal.events.ResourceDelta: org.eclipse.core.resources.IResourceDelta findMember(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.events.ResourceDelta: org.eclipse.core.resources.IResourceDelta[] getAffectedChildren()>
<org.eclipse.core.internal.events.ResourceDelta: org.eclipse.core.resources.IResourceDelta[] getAffectedChildren(int,int)>
<org.eclipse.core.internal.events.ResourceDelta: org.eclipse.core.runtime.IPath getFullPath()>
<org.eclipse.core.internal.events.ResourceDelta: void <init>(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.events.ResourceDeltaInfo)>
<org.eclipse.core.internal.events.ResourceDelta: void setChildren(org.eclipse.core.internal.events.ResourceDelta[])>
<org.eclipse.core.internal.events.ResourceDelta: void setNewInfo(org.eclipse.core.internal.resources.ResourceInfo)>
<org.eclipse.core.internal.events.ResourceDelta: void setOldInfo(org.eclipse.core.internal.resources.ResourceInfo)>
<org.eclipse.core.internal.events.ResourceDeltaFactory: org.eclipse.core.internal.events.ResourceDelta computeDelta(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.runtime.IPath,long)>
<org.eclipse.core.internal.events.ResourceDeltaFactory: org.eclipse.core.internal.events.ResourceDelta createDelta(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.dtree.DeltaDataTree,org.eclipse.core.internal.events.ResourceDeltaInfo,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.events.ResourceDeltaInfo: java.util.Map getMarkerDeltas()>
<org.eclipse.core.internal.events.ResourceDeltaInfo: org.eclipse.core.internal.events.NodeIDMap getNodeIDMap()>
<org.eclipse.core.internal.events.ResourceDeltaInfo: org.eclipse.core.internal.events.ResourceComparator getComparator()>
<org.eclipse.core.internal.events.ResourceDeltaInfo: org.eclipse.core.internal.resources.Workspace getWorkspace()>
<org.eclipse.core.internal.events.ResourceDeltaInfo: void <init>(org.eclipse.core.internal.resources.Workspace,java.util.Map,org.eclipse.core.internal.events.ResourceComparator)>
<org.eclipse.core.internal.events.ResourceDeltaInfo: void setMarkerDeltas(java.util.Map)>
<org.eclipse.core.internal.events.ResourceDeltaInfo: void setNodeIDMap(org.eclipse.core.internal.events.NodeIDMap)>
<org.eclipse.core.internal.jobs.Deadlock: java.lang.Thread getCandidate()>
<org.eclipse.core.internal.jobs.Deadlock: java.lang.Thread[] getThreads()>
<org.eclipse.core.internal.jobs.Deadlock: org.eclipse.core.runtime.jobs.ISchedulingRule[] getLocks()>
<org.eclipse.core.internal.jobs.Deadlock: void <init>(java.lang.Thread[],org.eclipse.core.runtime.jobs.ISchedulingRule[],java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: boolean addCycleThreads(java.util.ArrayList,java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: boolean ownsLocks(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: boolean ownsRealLocks(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: boolean ownsRuleLocks(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: int indexOf(java.lang.Thread,boolean)>
<org.eclipse.core.internal.jobs.DeadlockDetector: int indexOf(org.eclipse.core.runtime.jobs.ISchedulingRule,boolean)>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Object getWaitingLock(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Object[] getOwnedLocks(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Thread resolutionCandidate(java.lang.Thread[])>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Thread[] blockingThreads(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Thread[] getThreadsInDeadlock(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: java.lang.Thread[] getThreadsOwningLock(org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: org.eclipse.core.internal.jobs.Deadlock lockWaitStart(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: org.eclipse.core.runtime.jobs.ISchedulingRule[] realLocksForThread(java.lang.Thread)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void lockAcquired(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void lockReleased(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void lockReleasedCompletely(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void lockWaitStop(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void reportDeadlock(org.eclipse.core.internal.jobs.Deadlock)>
<org.eclipse.core.internal.jobs.DeadlockDetector: void setToWait(java.lang.Thread,org.eclipse.core.runtime.jobs.ISchedulingRule,boolean)>
<org.eclipse.core.internal.jobs.InternalJob: boolean isConflicting(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.InternalJob: java.lang.String getName()>
<org.eclipse.core.internal.jobs.InternalJob: java.lang.String toString()>
<org.eclipse.core.internal.jobs.InternalJob: java.lang.Thread getThread()>
<org.eclipse.core.internal.jobs.InternalJob: org.eclipse.core.internal.jobs.InternalJob next()>
<org.eclipse.core.internal.jobs.InternalJob: org.eclipse.core.internal.jobs.InternalJob previous()>
<org.eclipse.core.internal.jobs.InternalJob: org.eclipse.core.internal.jobs.InternalJob remove()>
<org.eclipse.core.internal.jobs.InternalJob: org.eclipse.core.runtime.IProgressMonitor getProgressMonitor()>
<org.eclipse.core.internal.jobs.InternalJob: org.eclipse.core.runtime.jobs.ISchedulingRule getRule()>
<org.eclipse.core.internal.jobs.InternalJob: void <init>(java.lang.String)>
<org.eclipse.core.internal.jobs.InternalJob: void addLast(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.InternalJob: void internalSetRule(org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.InternalJob: void setNext(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.InternalJob: void setPrevious(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.InternalJob: void setProgressMonitor(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.jobs.InternalJob: void setResult(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.internal.jobs.InternalJob: void setThread(java.lang.Thread)>
<org.eclipse.core.internal.jobs.JobQueue$1: void <init>(org.eclipse.core.internal.jobs.JobQueue,java.lang.String)>
<org.eclipse.core.internal.jobs.JobQueue: org.eclipse.core.internal.jobs.InternalJob peek()>
<org.eclipse.core.internal.jobs.JobQueue: void <init>(boolean)>
<org.eclipse.core.internal.jobs.JobQueue: void clear()>
<org.eclipse.core.internal.jobs.JobQueue: void enqueue(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.JobQueue: void resort(org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.Queue: boolean remove(java.lang.Object)>
<org.eclipse.core.internal.jobs.Queue: java.lang.Object dequeue()>
<org.eclipse.core.internal.jobs.Queue: java.lang.Object get(java.lang.Object)>
<org.eclipse.core.internal.jobs.Queue: java.lang.Object peek()>
<org.eclipse.core.internal.jobs.Queue: void <init>(int,boolean)>
<org.eclipse.core.internal.jobs.Queue: void enqueue(java.lang.Object)>
<org.eclipse.core.internal.jobs.Queue: void grow()>
<org.eclipse.core.internal.jobs.ThreadJob: boolean recycle()>
<org.eclipse.core.internal.jobs.ThreadJob: org.eclipse.core.internal.jobs.ThreadJob joinRun(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.jobs.ThreadJob: void <init>(org.eclipse.core.internal.jobs.JobManager,org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.ThreadJob: void push(org.eclipse.core.runtime.jobs.ISchedulingRule)>
<org.eclipse.core.internal.jobs.ThreadJob: void setRealJob(org.eclipse.core.runtime.jobs.Job)>
<org.eclipse.core.internal.jobs.ThreadJob: void waitEnd(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.jobs.ThreadJob: void waitStart(org.eclipse.core.runtime.IProgressMonitor,org.eclipse.core.internal.jobs.InternalJob)>
<org.eclipse.core.internal.jobs.WorkerPool: org.eclipse.core.internal.jobs.InternalJob startJob(org.eclipse.core.internal.jobs.Worker)>
<org.eclipse.core.internal.jobs.WorkerPool: void <init>(org.eclipse.core.internal.jobs.JobManager)>
<org.eclipse.core.internal.localstore.Bucket$Entry: org.eclipse.core.runtime.IPath getPath()>
<org.eclipse.core.internal.localstore.Bucket$Entry: void <init>(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.localstore.BucketTree: org.eclipse.core.internal.localstore.Bucket getCurrent()>
<org.eclipse.core.internal.localstore.BucketTree: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.localstore.Bucket)>
<org.eclipse.core.internal.localstore.HistoryBucket$HistoryEntry: java.lang.Object getValue()>
<org.eclipse.core.internal.localstore.HistoryBucket$HistoryEntry: void <init>(org.eclipse.core.runtime.IPath,byte[][])>
<org.eclipse.core.internal.localstore.HistoryBucket$HistoryEntry: void <init>(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.localstore.HistoryBucket$HistoryEntry)>
<org.eclipse.core.internal.localstore.HistoryStore2: org.eclipse.core.resources.IFileState addState(org.eclipse.core.runtime.IPath,java.io.File,long,boolean)>
<org.eclipse.core.internal.localstore.HistoryStore2: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.runtime.IPath,int)>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: java.lang.String getLocalLocation()>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: java.lang.String getLocalName()>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: java.util.Enumeration getChildren()>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: org.eclipse.core.internal.localstore.UnifiedTreeNode getFirstChild()>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: org.eclipse.core.resources.IResource getResource()>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: void <init>(org.eclipse.core.internal.localstore.UnifiedTree,org.eclipse.core.resources.IResource,long,java.lang.String,java.lang.String,boolean)>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: void reuse(org.eclipse.core.internal.localstore.UnifiedTree,org.eclipse.core.resources.IResource,long,java.lang.String,java.lang.String,boolean)>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: void setFirstChild(org.eclipse.core.internal.localstore.UnifiedTreeNode)>
<org.eclipse.core.internal.localstore.UnifiedTreeNode: void setResource(org.eclipse.core.resources.IResource)>
<org.eclipse.core.internal.plugins.DefaultPlugin: void <init>(org.eclipse.core.runtime.IPluginDescriptor)>
<org.eclipse.core.internal.plugins.PluginDescriptor: void doPluginActivation()>
<org.eclipse.core.internal.preferences.PreferenceForwarder: void setValue(java.lang.String,boolean)>
<org.eclipse.core.internal.preferences.PreferenceForwarder: void setValue(java.lang.String,int)>
<org.eclipse.core.internal.preferences.PreferenceForwarder: void setValue(java.lang.String,java.lang.String)>
<org.eclipse.core.internal.preferences.PreferenceForwarder: void setValue(java.lang.String,long)>
<org.eclipse.core.internal.preferences.StringPool: java.lang.String add(java.lang.String)>
<org.eclipse.core.internal.properties.PropertyBucket$PropertyEntry: java.lang.Object getValue()>
<org.eclipse.core.internal.properties.PropertyBucket$PropertyEntry: void <init>(org.eclipse.core.runtime.IPath,java.lang.String[][])>
<org.eclipse.core.internal.properties.PropertyBucket$PropertyEntry: void <init>(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.properties.PropertyBucket$PropertyEntry)>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.Object createExecutableExtension(java.lang.String)>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.String getAttribute(java.lang.String)>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.String getName()>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.String getNamespace()>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.String getValue()>
<org.eclipse.core.internal.registry.ConfigurationElement: java.lang.String[] getPropertiesAndValue()>
<org.eclipse.core.internal.registry.ConfigurationElement: org.osgi.framework.Bundle getContributingBundle()>
<org.eclipse.core.internal.registry.ConfigurationElement: void <init>(int,org.osgi.framework.Bundle,java.lang.String,java.lang.String[],int[],int,int,byte)>
<org.eclipse.core.internal.registry.ConfigurationElementHandle: java.lang.Object getParent()>
<org.eclipse.core.internal.registry.ConfigurationElementHandle: org.eclipse.core.internal.registry.RegistryObject getObject()>
<org.eclipse.core.internal.registry.ConfigurationElementHandle: org.eclipse.core.runtime.IExtension getDeclaringExtension()>
<org.eclipse.core.internal.registry.ConfigurationElementHandle: void <init>(org.eclipse.core.internal.registry.IObjectManager,int)>
<org.eclipse.core.internal.registry.Contribution: int[] getRawChildren()>
<org.eclipse.core.internal.registry.Contribution: java.lang.String getNamespace()>
<org.eclipse.core.internal.registry.Contribution: org.osgi.framework.Bundle getContributingBundle()>
<org.eclipse.core.internal.registry.Contribution: void <init>(org.osgi.framework.Bundle)>
<org.eclipse.core.internal.registry.Contribution: void setRawChildren(int[])>
<org.eclipse.core.internal.registry.ExtensionHandle: org.eclipse.core.internal.registry.RegistryObject getObject()>
<org.eclipse.core.internal.registry.ExtensionHandle: void <init>(org.eclipse.core.internal.registry.IObjectManager,int)>
<org.eclipse.core.internal.registry.ExtensionPointHandle: org.eclipse.core.internal.registry.RegistryObject getObject()>
<org.eclipse.core.internal.registry.ExtensionPointHandle: void <init>(org.eclipse.core.internal.registry.IObjectManager,int)>
<org.eclipse.core.internal.registry.Handle: void <init>(org.eclipse.core.internal.registry.IObjectManager,int)>
<org.eclipse.core.internal.registry.KeyedHashSet: boolean add(org.eclipse.core.internal.registry.KeyedElement)>
<org.eclipse.core.internal.registry.KeyedHashSet: java.lang.Object[] elements(java.lang.Object[])>
<org.eclipse.core.internal.registry.KeyedHashSet: org.eclipse.core.internal.registry.KeyedElement getByKey(java.lang.Object)>
<org.eclipse.core.internal.registry.KeyedHashSet: org.eclipse.core.internal.registry.KeyedElement[] elements()>
<org.eclipse.core.internal.registry.KeyedHashSet: void <init>(int,boolean)>
<org.eclipse.core.internal.registry.KeyedHashSet: void expand()>
<org.eclipse.core.internal.registry.KeyedHashSet: void rehashTo(int)>
<org.eclipse.core.internal.registry.ReferenceMap$HardRef: java.lang.Object getValue()>
<org.eclipse.core.internal.registry.ReferenceMap$HardRef: org.eclipse.core.internal.registry.ReferenceMap$IEntry getNext()>
<org.eclipse.core.internal.registry.ReferenceMap$HardRef: void <init>(int,java.lang.Object,org.eclipse.core.internal.registry.ReferenceMap$IEntry)>
<org.eclipse.core.internal.registry.ReferenceMap$HardRef: void setNext(org.eclipse.core.internal.registry.ReferenceMap$IEntry)>
<org.eclipse.core.internal.registry.ReferenceMap$SoftRef: java.lang.Object getValue()>
<org.eclipse.core.internal.registry.ReferenceMap$SoftRef: org.eclipse.core.internal.registry.ReferenceMap$IEntry getNext()>
<org.eclipse.core.internal.registry.ReferenceMap$SoftRef: void <init>(int,java.lang.Object,org.eclipse.core.internal.registry.ReferenceMap$IEntry,java.lang.ref.ReferenceQueue)>
<org.eclipse.core.internal.registry.ReferenceMap$SoftRef: void setNext(org.eclipse.core.internal.registry.ReferenceMap$IEntry)>
<org.eclipse.core.internal.registry.ReferenceMap: java.lang.Object doRemove(int)>
<org.eclipse.core.internal.registry.ReferenceMap: java.lang.Object get(int)>
<org.eclipse.core.internal.registry.ReferenceMap: java.lang.Object remove(int)>
<org.eclipse.core.internal.registry.ReferenceMap: org.eclipse.core.internal.registry.ReferenceMap$IEntry newEntry(int,java.lang.Object,org.eclipse.core.internal.registry.ReferenceMap$IEntry)>
<org.eclipse.core.internal.registry.ReferenceMap: void <init>(int,int,float)>
<org.eclipse.core.internal.registry.ReferenceMap: void put(int,java.lang.Object)>
<org.eclipse.core.internal.registry.ReferenceMap: void resize()>
<org.eclipse.core.internal.registry.RegistryDelta: org.eclipse.core.internal.registry.IObjectManager getObjectManager()>
<org.eclipse.core.internal.registry.RegistryDelta: org.eclipse.core.runtime.IExtensionDelta[] getExtensionDeltas(java.lang.String)>
<org.eclipse.core.internal.registry.RegistryDelta: void addExtensionDelta(org.eclipse.core.runtime.IExtensionDelta)>
<org.eclipse.core.internal.registry.RegistryDelta: void setObjectManager(org.eclipse.core.internal.registry.IObjectManager)>
<org.eclipse.core.internal.registry.RegistryObject: int[] getRawChildren()>
<org.eclipse.core.internal.registry.RegistryObject: void setRawChildren(int[])>
<org.eclipse.core.internal.registry.ThirdLevelConfigurationElementHandle: void <init>(org.eclipse.core.internal.registry.IObjectManager,int)>
<org.eclipse.core.internal.resources.CharsetDeltaJob$1: org.eclipse.core.runtime.IPath getRoot()>
<org.eclipse.core.internal.resources.CharsetDeltaJob$1: void <init>(org.eclipse.core.internal.resources.CharsetDeltaJob,org.eclipse.core.resources.IProject)>
<org.eclipse.core.internal.resources.CharsetManager: java.lang.String getCharsetFor(org.eclipse.core.runtime.IPath,boolean)>
<org.eclipse.core.internal.resources.CharsetManager: java.lang.String getKeyFor(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.resources.CharsetManager: java.lang.String internalGetCharsetFor(org.eclipse.core.runtime.IPath,org.osgi.service.prefs.Preferences,boolean)>
<org.eclipse.core.internal.resources.DelayedSnapshotJob: org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.resources.DelayedSnapshotJob: void <init>(org.eclipse.core.internal.resources.SaveManager)>
<org.eclipse.core.internal.resources.FileState: void <init>(org.eclipse.core.internal.localstore.IHistoryStore,org.eclipse.core.runtime.IPath,long,org.eclipse.core.internal.utils.UniversalUniqueIdentifier)>
<org.eclipse.core.internal.resources.LinkDescription: org.eclipse.core.runtime.IPath getLocation()>
<org.eclipse.core.internal.resources.LinkDescription: void <init>(org.eclipse.core.resources.IResource,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.resources.Marker: java.lang.String getAttribute(java.lang.String,java.lang.String)>
<org.eclipse.core.internal.resources.Marker: org.eclipse.core.resources.IResource getResource()>
<org.eclipse.core.internal.resources.Marker: void <init>(org.eclipse.core.resources.IResource,long)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: java.lang.Object get(java.lang.Object)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: java.lang.Object remove(java.lang.Object)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: java.util.Set keySet()>
<org.eclipse.core.internal.resources.MarkerAttributeMap: void <init>(int)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: void <init>(java.util.Map)>
<org.eclipse.core.internal.resources.MarkerAttributeMap: void grow()>
<org.eclipse.core.internal.resources.MarkerAttributeMap: void putAll(java.util.Map)>
<org.eclipse.core.internal.resources.MarkerManager$2: org.eclipse.core.runtime.IPath requestPath()>
<org.eclipse.core.internal.resources.MarkerManager$2: void <init>(org.eclipse.core.internal.resources.MarkerManager,org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.resources.MarkerReader: org.eclipse.core.internal.resources.MarkerReader getReader(int)>
<org.eclipse.core.internal.resources.MarkerReader: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerReader_1: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerReader_2: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerReader_3: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerSnapshotReader: org.eclipse.core.internal.resources.MarkerSnapshotReader getReader(int)>
<org.eclipse.core.internal.resources.MarkerSnapshotReader: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerSnapshotReader_1: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.MarkerSnapshotReader_2: void <init>(org.eclipse.core.internal.resources.Workspace)>
<org.eclipse.core.internal.resources.ProjectContentTypes$ProjectContentTypeSelectionPolicy: org.eclipse.core.runtime.content.IContentType[] select(org.eclipse.core.runtime.content.IContentType[],boolean,boolean)>
<org.eclipse.core.internal.resources.ProjectContentTypes$ProjectContentTypeSelectionPolicy: void <init>(org.eclipse.core.internal.resources.ProjectContentTypes,org.eclipse.core.internal.resources.Project)>
<org.eclipse.core.internal.resources.ProjectContentTypes: org.eclipse.core.runtime.content.IContentType[] select(org.eclipse.core.internal.resources.Project,org.eclipse.core.runtime.content.IContentType[],boolean,boolean)>
<org.eclipse.core.internal.resources.ProjectInfo: org.eclipse.core.internal.resources.ProjectDescription getDescription()>
<org.eclipse.core.internal.resources.ProjectInfo: org.eclipse.core.resources.IProjectNature getNature(java.lang.String)>
<org.eclipse.core.internal.resources.ProjectInfo: org.eclipse.core.runtime.content.IContentTypeMatcher getMatcher()>
<org.eclipse.core.internal.resources.ProjectInfo: void setDescription(org.eclipse.core.internal.resources.ProjectDescription)>
<org.eclipse.core.internal.resources.ProjectInfo: void setMatcher(org.eclipse.core.runtime.content.IContentTypeMatcher)>
<org.eclipse.core.internal.resources.ProjectInfo: void setNature(java.lang.String,org.eclipse.core.resources.IProjectNature)>
<org.eclipse.core.internal.resources.ProjectPreferences$SortedProperties$IteratorWrapper: java.lang.Object nextElement()>
<org.eclipse.core.internal.resources.ProjectPreferences$SortedProperties$IteratorWrapper: void <init>(org.eclipse.core.internal.resources.ProjectPreferences$SortedProperties,java.util.Iterator)>
<org.eclipse.core.internal.resources.ResourceException: void <init>(int,org.eclipse.core.runtime.IPath,java.lang.String,java.lang.Throwable)>
<org.eclipse.core.internal.resources.ResourceException: void <init>(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.internal.resources.ResourceInfo: java.lang.Object clone()>
<org.eclipse.core.internal.resources.ResourceInfo: java.lang.Object getSessionProperty(org.eclipse.core.runtime.QualifiedName)>
<org.eclipse.core.internal.resources.ResourceInfo: org.eclipse.core.internal.resources.MarkerSet getMarkers(boolean)>
<org.eclipse.core.internal.resources.ResourceInfo: org.eclipse.core.internal.utils.ObjectMap getSyncInfo(boolean)>
<org.eclipse.core.internal.resources.ResourceInfo: void setMarkers(org.eclipse.core.internal.resources.MarkerSet)>
<org.eclipse.core.internal.resources.ResourceInfo: void setSessionProperty(org.eclipse.core.runtime.QualifiedName,java.lang.Object)>
<org.eclipse.core.internal.resources.ResourceInfo: void setSyncInfo(org.eclipse.core.internal.utils.ObjectMap)>
<org.eclipse.core.internal.resources.ResourceStatus: org.eclipse.core.runtime.IPath getPath()>
<org.eclipse.core.internal.resources.ResourceStatus: void <init>(int,int,org.eclipse.core.runtime.IPath,java.lang.String,java.lang.Throwable)>
<org.eclipse.core.internal.resources.ResourceStatus: void <init>(int,java.lang.String)>
<org.eclipse.core.internal.resources.ResourceStatus: void <init>(int,org.eclipse.core.runtime.IPath,java.lang.String)>
<org.eclipse.core.internal.resources.ResourceStatus: void <init>(int,org.eclipse.core.runtime.IPath,java.lang.String,java.lang.Throwable)>
<org.eclipse.core.internal.resources.ResourceTree: org.eclipse.core.runtime.IStatus getStatus()>
<org.eclipse.core.internal.resources.ResourceTree: void <init>(org.eclipse.core.runtime.jobs.ILock,org.eclipse.core.runtime.MultiStatus,int)>
<org.eclipse.core.internal.resources.SaveContext: org.eclipse.core.runtime.Plugin getPlugin()>
<org.eclipse.core.internal.resources.SaveContext: void <init>(org.eclipse.core.runtime.Plugin,int,org.eclipse.core.resources.IProject)>
<org.eclipse.core.internal.resources.SyncInfoReader: org.eclipse.core.internal.resources.SyncInfoReader getReader(int)>
<org.eclipse.core.internal.resources.SyncInfoReader: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.resources.Synchronizer)>
<org.eclipse.core.internal.resources.SyncInfoReader_2: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.resources.Synchronizer)>
<org.eclipse.core.internal.resources.SyncInfoReader_3: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.resources.Synchronizer)>
<org.eclipse.core.internal.resources.SyncInfoSnapReader: org.eclipse.core.internal.resources.SyncInfoSnapReader getReader(int)>
<org.eclipse.core.internal.resources.SyncInfoSnapReader: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.resources.Synchronizer)>
<org.eclipse.core.internal.resources.SyncInfoSnapReader_3: void <init>(org.eclipse.core.internal.resources.Workspace,org.eclipse.core.internal.resources.Synchronizer)>
<org.eclipse.core.internal.resources.Synchronizer: java.util.Set getRegistry()>
<org.eclipse.core.internal.resources.Synchronizer: void setRegistry(java.util.Set)>
<org.eclipse.core.internal.resources.WorkspaceTreeReader_1: org.eclipse.core.internal.events.BuilderPersistentInfo readBuilderInfo(org.eclipse.core.resources.IProject,java.io.DataInputStream,int)>
<org.eclipse.core.internal.resources.WorkspaceTreeReader_1: org.eclipse.core.internal.watson.ElementTree readSnapshotTree(java.io.DataInputStream,org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.resources.WorkspaceTreeReader_1: org.eclipse.core.internal.watson.ElementTree[] readTrees(org.eclipse.core.runtime.IPath,java.io.DataInputStream,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.resources.WorkspaceTreeReader_1: void linkBuildersToTrees(java.util.List,org.eclipse.core.internal.watson.ElementTree[],int,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.resources.WorkspaceTreeReader_1: void readTree(org.eclipse.core.resources.IProject,java.io.DataInputStream,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.core.internal.runtime.AssertionFailedException: void <init>(java.lang.String)>
<org.eclipse.core.internal.runtime.HashMapOfString: java.lang.String get(java.lang.String)>
<org.eclipse.core.internal.runtime.HashMapOfString: java.lang.String put(java.lang.String,java.lang.String)>
<org.eclipse.core.internal.runtime.HashMapOfString: java.lang.String removeKey(java.lang.String)>
<org.eclipse.core.internal.runtime.HashMapOfString: java.lang.String[] keys()>
<org.eclipse.core.internal.runtime.HashMapOfString: void <init>(int)>
<org.eclipse.core.internal.runtime.HashMapOfString: void rehash(int)>
<org.eclipse.core.internal.runtime.ListenerList: java.lang.Object[] getListeners()>
<org.eclipse.core.internal.runtime.ListenerList: void add(java.lang.Object)>
<org.eclipse.core.internal.runtime.ListenerList: void remove(java.lang.Object)>
<org.eclipse.core.internal.runtime.Product: java.lang.String getId()>
<org.eclipse.core.internal.runtime.Product: void <init>(java.lang.String,org.eclipse.core.runtime.IConfigurationElement)>
<org.eclipse.core.internal.utils.AssertionFailedException: void <init>(java.lang.String)>
<org.eclipse.core.internal.utils.Cache$Entry: java.lang.Object getCached()>
<org.eclipse.core.internal.utils.Cache$Entry: java.lang.Object getKey()>
<org.eclipse.core.internal.utils.Cache$Entry: void <init>(org.eclipse.core.internal.utils.Cache,java.lang.Object,java.lang.Object,long)>
<org.eclipse.core.internal.utils.Cache$Entry: void makeHead()>
<org.eclipse.core.internal.utils.Cache$Entry: void setCached(java.lang.Object)>
<org.eclipse.core.internal.utils.Cache$Entry: void unchain()>
<org.eclipse.core.internal.utils.Cache: org.eclipse.core.internal.utils.Cache$Entry addEntry(java.lang.Object,java.lang.Object,long)>
<org.eclipse.core.internal.utils.Cache: org.eclipse.core.internal.utils.Cache$Entry getEntry(java.lang.Object)>
<org.eclipse.core.internal.utils.Cache: org.eclipse.core.internal.utils.Cache$Entry getEntry(java.lang.Object,boolean)>
<org.eclipse.core.internal.utils.Cache: void <init>(int,int,double)>
<org.eclipse.core.internal.utils.KeyedHashSet: boolean add(org.eclipse.core.internal.utils.KeyedHashSet$KeyedElement)>
<org.eclipse.core.internal.utils.KeyedHashSet: org.eclipse.core.internal.utils.KeyedHashSet$KeyedElement getByKey(java.lang.Object)>
<org.eclipse.core.internal.utils.KeyedHashSet: void <init>(int,boolean)>
<org.eclipse.core.internal.utils.KeyedHashSet: void clear()>
<org.eclipse.core.internal.utils.KeyedHashSet: void expand()>
<org.eclipse.core.internal.utils.KeyedHashSet: void rehashTo(int)>
<org.eclipse.core.internal.utils.ObjectMap: java.lang.Object clone()>
<org.eclipse.core.internal.utils.ObjectMap: java.lang.Object get(java.lang.Object)>
<org.eclipse.core.internal.utils.ObjectMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.eclipse.core.internal.utils.ObjectMap: java.lang.Object remove(java.lang.Object)>
<org.eclipse.core.internal.utils.ObjectMap: java.util.HashMap toHashMap()>
<org.eclipse.core.internal.utils.ObjectMap: java.util.Set entrySet()>
<org.eclipse.core.internal.utils.ObjectMap: java.util.Set keySet()>
<org.eclipse.core.internal.utils.ObjectMap: void <init>(int)>
<org.eclipse.core.internal.utils.ObjectMap: void <init>(java.util.Map)>
<org.eclipse.core.internal.utils.ObjectMap: void grow()>
<org.eclipse.core.internal.utils.ObjectMap: void putAll(java.util.Map)>
<org.eclipse.core.internal.utils.Queue: java.lang.Object elementAt(int)>
<org.eclipse.core.internal.utils.Queue: java.lang.Object peek()>
<org.eclipse.core.internal.utils.Queue: java.lang.Object peekTail()>
<org.eclipse.core.internal.utils.Queue: java.lang.Object remove()>
<org.eclipse.core.internal.utils.Queue: java.lang.Object removeTail()>
<org.eclipse.core.internal.utils.Queue: void <init>(int,boolean)>
<org.eclipse.core.internal.utils.Queue: void add(java.lang.Object)>
<org.eclipse.core.internal.utils.Queue: void grow()>
<org.eclipse.core.internal.utils.StringPool: java.lang.String add(java.lang.String)>
<org.eclipse.core.internal.utils.WrappedRuntimeException: java.lang.String getMessage()>
<org.eclipse.core.internal.utils.WrappedRuntimeException: java.lang.Throwable getTargetException()>
<org.eclipse.core.internal.utils.WrappedRuntimeException: void <init>(java.lang.Throwable)>
<org.eclipse.core.internal.watson.ElementTree$ChildIDsCache: void <init>(org.eclipse.core.internal.watson.ElementTree,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath[])>
<org.eclipse.core.internal.watson.ElementTree: int getChildCount(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.watson.ElementTree: java.lang.String[] getNamesOfChildren(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.dtree.DeltaDataTree getDataTree()>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.ElementTree collapseTo(org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.ElementTree getParent()>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.ElementTree getSubtree(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.ElementTree mergeDeltaChain(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.watson.ElementTree[])>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.ElementTree newEmptyDelta()>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.internal.watson.IElementTreeData getTreeData()>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.runtime.IPath getRoot()>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.runtime.IPath[] getChildIDs(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.watson.ElementTree: org.eclipse.core.runtime.IPath[] getChildren(org.eclipse.core.runtime.IPath)>
<org.eclipse.core.internal.watson.ElementTree: void <init>()>
<org.eclipse.core.internal.watson.ElementTree: void <init>(org.eclipse.core.internal.dtree.DataTreeNode)>
<org.eclipse.core.internal.watson.ElementTree: void <init>(org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.watson.ElementTree: void <init>(org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.watson.ElementTree: void createElement(org.eclipse.core.runtime.IPath,java.lang.Object)>
<org.eclipse.core.internal.watson.ElementTree: void createSubtree(org.eclipse.core.runtime.IPath,org.eclipse.core.internal.watson.ElementTree)>
<org.eclipse.core.internal.watson.ElementTree: void immutable()>
<org.eclipse.core.internal.watson.ElementTree: void initialize(org.eclipse.core.internal.dtree.DataTreeNode)>
<org.eclipse.core.internal.watson.ElementTree: void initialize(org.eclipse.core.internal.dtree.DeltaDataTree)>
<org.eclipse.core.internal.watson.ElementTree: void setElementData(org.eclipse.core.runtime.IPath,java.lang.Object)>
<org.eclipse.core.internal.watson.ElementTree: void setTreeData(org.eclipse.core.internal.watson.IElementTreeData)>
<org.eclipse.core.internal.watson.ElementTreeReader$1: java.lang.Object readData(org.eclipse.core.runtime.IPath,java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReader$1: void <init>(org.eclipse.core.internal.watson.ElementTreeReader,org.eclipse.core.internal.watson.IElementInfoFlattener)>
<org.eclipse.core.internal.watson.ElementTreeReader: org.eclipse.core.internal.watson.ElementTree readDelta(org.eclipse.core.internal.watson.ElementTree,java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReader: org.eclipse.core.internal.watson.ElementTree readTree(java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReader: org.eclipse.core.internal.watson.ElementTreeReader getReader(int)>
<org.eclipse.core.internal.watson.ElementTreeReader: org.eclipse.core.internal.watson.ElementTree[] readDeltaChain(java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReader: void <init>(org.eclipse.core.internal.watson.IElementInfoFlattener)>
<org.eclipse.core.internal.watson.ElementTreeReaderImpl_1: org.eclipse.core.internal.watson.ElementTree readDelta(org.eclipse.core.internal.watson.ElementTree,java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReaderImpl_1: org.eclipse.core.internal.watson.ElementTree readTree(java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReaderImpl_1: org.eclipse.core.internal.watson.ElementTree[] readDeltaChain(java.io.DataInput)>
<org.eclipse.core.internal.watson.ElementTreeReaderImpl_1: void <init>(org.eclipse.core.internal.watson.IElementInfoFlattener)>
<org.eclipse.core.resources.IncrementalProjectBuilder: org.eclipse.core.resources.IProject getProject()>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule copyRule(org.eclipse.core.resources.IResource,org.eclipse.core.resources.IResource)>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule createRule(org.eclipse.core.resources.IResource)>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule deleteRule(org.eclipse.core.resources.IResource)>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule modifyRule(org.eclipse.core.resources.IResource)>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule parent(org.eclipse.core.resources.IResource)>
<org.eclipse.core.resources.team.ResourceRuleFactory: org.eclipse.core.runtime.jobs.ISchedulingRule refreshRule(org.eclipse.core.resources.IResource)>
<org.eclipse.core.runtime.CoreException: org.eclipse.core.runtime.IStatus getStatus()>
<org.eclipse.core.runtime.CoreException: void <init>(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.runtime.InvalidRegistryObjectException: void <init>()>
<org.eclipse.core.runtime.MultiStatus: org.eclipse.core.runtime.IStatus[] getChildren()>
<org.eclipse.core.runtime.MultiStatus: void <init>(java.lang.String,int,java.lang.String,java.lang.Throwable)>
<org.eclipse.core.runtime.MultiStatus: void <init>(java.lang.String,int,org.eclipse.core.runtime.IStatus[],java.lang.String,java.lang.Throwable)>
<org.eclipse.core.runtime.MultiStatus: void add(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.runtime.MultiStatus: void addAll(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.runtime.MultiStatus: void merge(org.eclipse.core.runtime.IStatus)>
<org.eclipse.core.runtime.OperationCanceledException: void <init>()>
<org.eclipse.core.runtime.OperationCanceledException: void <init>(java.lang.String)>
<org.eclipse.core.runtime.Path: org.eclipse.core.runtime.IPath append(java.lang.String)>
<org.eclipse.core.runtime.Path: org.eclipse.core.runtime.IPath removeFileExtension()>
<org.eclipse.core.runtime.Path: org.eclipse.core.runtime.IPath removeFirstSegments(int)>
<org.eclipse.core.runtime.Path: org.eclipse.core.runtime.IPath removeLastSegments(int)>
<org.eclipse.core.runtime.PerformanceStats: java.lang.String getContext()>
<org.eclipse.core.runtime.PerformanceStats: org.eclipse.core.runtime.PerformanceStats createFailureStats(java.lang.String,long)>
<org.eclipse.core.runtime.PerformanceStats: void <init>(java.lang.String,java.lang.Object,java.lang.String)>
<org.eclipse.core.runtime.PerformanceStats: void addRun(long,java.lang.String)>
<org.eclipse.core.runtime.PerformanceStats: void endRun()>
<org.eclipse.core.runtime.PerformanceStats: void startRun(java.lang.String)>
<org.eclipse.core.runtime.Plugin: org.eclipse.core.runtime.IPluginDescriptor getDescriptor()>
<org.eclipse.core.runtime.Plugin: void <init>(org.eclipse.core.runtime.IPluginDescriptor)>
<org.eclipse.core.runtime.Preferences$PropertyChangeEvent: java.lang.Object getNewValue()>
<org.eclipse.core.runtime.Preferences$PropertyChangeEvent: java.lang.Object getOldValue()>
<org.eclipse.core.runtime.Preferences$PropertyChangeEvent: java.lang.String getProperty()>
<org.eclipse.core.runtime.Preferences$PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<org.eclipse.core.runtime.Preferences: void firePropertyChangeEvent(java.lang.String,java.lang.Object,java.lang.Object)>
<org.eclipse.core.runtime.QualifiedName: java.lang.String getLocalName()>
<org.eclipse.core.runtime.QualifiedName: java.lang.String getQualifier()>
<org.eclipse.core.runtime.QualifiedName: void <init>(java.lang.String,java.lang.String)>
<org.eclipse.core.runtime.Status: java.lang.String getMessage()>
<org.eclipse.core.runtime.Status: java.lang.String getPlugin()>
<org.eclipse.core.runtime.Status: java.lang.Throwable getException()>
<org.eclipse.core.runtime.Status: void <init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)>
<org.eclipse.core.runtime.Status: void setException(java.lang.Throwable)>
<org.eclipse.core.runtime.Status: void setMessage(java.lang.String)>
<org.eclipse.core.runtime.Status: void setPlugin(java.lang.String)>
<org.eclipse.core.runtime.adaptor.EclipseClassLoader$EclipseClasspathEntry: void <init>(org.eclipse.core.runtime.adaptor.EclipseClassLoader,org.eclipse.osgi.framework.adaptor.core.BundleFile,java.security.ProtectionDomain)>
<org.eclipse.core.runtime.adaptor.FileManager: java.io.File getBase()>
<org.eclipse.core.runtime.adaptor.FileManager: void <init>(java.io.File,java.lang.String,boolean)>
<org.eclipse.core.runtime.adaptor.StreamManager: org.eclipse.core.runtime.adaptor.StreamManagerOutputStream getOutputStream(java.lang.String)>
<org.eclipse.core.runtime.adaptor.StreamManager: void <init>(org.eclipse.core.runtime.adaptor.FileManager)>
<org.eclipse.core.runtime.adaptor.StreamManagerOutputStream: java.io.File getOutputFile()>
<org.eclipse.core.runtime.adaptor.StreamManagerOutputStream: java.io.OutputStream getOutputStream()>
<org.eclipse.core.runtime.adaptor.StreamManagerOutputStream: java.lang.String getTarget()>
<org.eclipse.core.runtime.adaptor.StreamManagerOutputStream: void <init>(java.io.OutputStream,org.eclipse.core.runtime.adaptor.StreamManager,java.lang.String,java.io.File,int)>
<org.eclipse.core.runtime.internal.adaptor.BundleLocalizationImpl: java.util.ResourceBundle getLocalization(org.osgi.framework.Bundle,java.lang.String)>
<org.eclipse.core.runtime.internal.adaptor.CachedManifest: java.lang.Object get(java.lang.Object)>
<org.eclipse.core.runtime.internal.adaptor.CachedManifest: void <init>(org.eclipse.core.runtime.adaptor.EclipseBundleData)>
<org.eclipse.core.runtime.internal.adaptor.PluginParser$Prerequisite: java.lang.String getMatch()>
<org.eclipse.core.runtime.internal.adaptor.PluginParser$Prerequisite: java.lang.String getName()>
<org.eclipse.core.runtime.internal.adaptor.PluginParser$Prerequisite: java.lang.String getVersion()>
<org.eclipse.core.runtime.internal.adaptor.PluginParser$Prerequisite: java.lang.String toString()>
<org.eclipse.core.runtime.internal.adaptor.PluginParser$Prerequisite: void <init>(org.eclipse.core.runtime.internal.adaptor.PluginParser,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)>
<org.eclipse.core.runtime.internal.adaptor.URLConverterImpl: java.net.URL convertToFileURL(java.net.URL)>
<org.eclipse.core.runtime.internal.stats.BundleStats: java.lang.String getSymbolicName()>
<org.eclipse.core.runtime.internal.stats.BundleStats: void <init>(java.lang.String,long)>
<org.eclipse.core.runtime.internal.stats.ClassStats: java.lang.String getClassName()>
<org.eclipse.core.runtime.internal.stats.ClassStats: void <init>(java.lang.String,org.eclipse.core.runtime.internal.stats.ClassloaderStats)>
<org.eclipse.core.runtime.jobs.Job: java.lang.String getName()>
<org.eclipse.core.runtime.jobs.Job: java.lang.Thread getThread()>
<org.eclipse.core.runtime.jobs.Job: org.eclipse.core.runtime.jobs.ISchedulingRule getRule()>
<org.eclipse.core.runtime.jobs.Job: void <init>(java.lang.String)>
<org.eclipse.core.runtime.jobs.Job: void setThread(java.lang.Thread)>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$NodeChangeEvent: org.osgi.service.prefs.Preferences getChild()>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$NodeChangeEvent: void <init>(org.osgi.service.prefs.Preferences,org.osgi.service.prefs.Preferences)>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$PreferenceChangeEvent: java.lang.Object getNewValue()>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$PreferenceChangeEvent: java.lang.Object getOldValue()>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$PreferenceChangeEvent: java.lang.String getKey()>
<org.eclipse.core.runtime.preferences.IEclipsePreferences$PreferenceChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<org.eclipse.debug.core.DebugEvent: void <init>(java.lang.Object,int)>
<org.eclipse.debug.core.DebugEvent: void <init>(java.lang.Object,int,int)>
<org.eclipse.debug.core.DebugException: void <init>(org.eclipse.core.runtime.IStatus)>
<org.eclipse.debug.internal.core.LaunchManager: org.eclipse.debug.internal.core.ListenerList access$0(org.eclipse.debug.internal.core.LaunchManager)>
<org.eclipse.debug.internal.core.LaunchManager: org.eclipse.debug.internal.core.ListenerList access$1(org.eclipse.debug.internal.core.LaunchManager)>
<org.eclipse.debug.internal.core.LaunchManager: void <init>()>
<org.eclipse.debug.internal.core.LaunchManager: void addLaunchConfigurationListener(org.eclipse.debug.core.ILaunchConfigurationListener)>
<org.eclipse.debug.internal.core.LaunchManager: void addLaunchListener(org.eclipse.debug.core.ILaunchListener)>
<org.eclipse.debug.internal.core.LaunchManager: void addLaunchListener(org.eclipse.debug.core.ILaunchesListener)>
<org.eclipse.debug.internal.core.ListenerList: java.lang.Object[] getListeners()>
<org.eclipse.debug.internal.core.ListenerList: void <init>(int)>
<org.eclipse.debug.internal.core.ListenerList: void add(java.lang.Object)>
<org.eclipse.debug.internal.core.ListenerList: void remove(java.lang.Object)>
<org.eclipse.debug.internal.core.ListenerList: void removeAll()>
<org.eclipse.debug.internal.core.NullStreamsProxy$NullStreamMonitor: java.io.InputStream access$0(org.eclipse.debug.internal.core.NullStreamsProxy$NullStreamMonitor)>
<org.eclipse.debug.internal.core.NullStreamsProxy$NullStreamMonitor: void <init>(org.eclipse.debug.internal.core.NullStreamsProxy,java.io.InputStream)>
<org.eclipse.jdt.core.BufferChangedEvent: org.eclipse.jdt.core.IBuffer getBuffer()>
<org.eclipse.jdt.core.BufferChangedEvent: void <init>(org.eclipse.jdt.core.IBuffer,int,int,java.lang.String)>
<org.eclipse.jdt.core.CompletionProposal: char[] getCompletion()>
<org.eclipse.jdt.core.CompletionProposal: char[] getDeclarationKey()>
<org.eclipse.jdt.core.CompletionProposal: char[] getDeclarationSignature()>
<org.eclipse.jdt.core.CompletionProposal: char[] getKey()>
<org.eclipse.jdt.core.CompletionProposal: char[] getName()>
<org.eclipse.jdt.core.CompletionProposal: char[] getSignature()>
<org.eclipse.jdt.core.CompletionProposal: char[][] findParameterNames(org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.jdt.core.CompletionProposal: void setCompletion(char[])>
<org.eclipse.jdt.core.CompletionProposal: void setDeclarationKey(char[])>
<org.eclipse.jdt.core.CompletionProposal: void setDeclarationSignature(char[])>
<org.eclipse.jdt.core.CompletionProposal: void setKey(char[])>
<org.eclipse.jdt.core.CompletionProposal: void setName(char[])>
<org.eclipse.jdt.core.CompletionProposal: void setParameterNames(char[][])>
<org.eclipse.jdt.core.CompletionProposal: void setSignature(char[])>
<org.eclipse.jdt.core.JavaCore$4: java.lang.String displayString(java.lang.Object)>
<org.eclipse.jdt.core.JavaModelException: java.lang.String toString()>
<org.eclipse.jdt.core.JavaModelException: java.lang.Throwable getException()>
<org.eclipse.jdt.core.JavaModelException: org.eclipse.jdt.core.IJavaModelStatus getJavaModelStatus()>
<org.eclipse.jdt.core.JavaModelException: void <init>(java.lang.Throwable,int)>
<org.eclipse.jdt.core.JavaModelException: void <init>(org.eclipse.core.runtime.CoreException)>
<org.eclipse.jdt.core.JavaModelException: void <init>(org.eclipse.jdt.core.IJavaModelStatus)>
<org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char,char[],char,char[])>
<org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[])>
<org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char)>
<org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char[])>
<org.eclipse.jdt.core.compiler.CharOperation: char[] lastSegment(char[],char)>
<org.eclipse.jdt.core.compiler.CharOperation: char[] toLowerCase(char[])>
<org.eclipse.jdt.core.compiler.CharOperation: char[][] arrayConcat(char[][],char[])>
<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>()>
<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>
<org.eclipse.jdt.core.dom.ASTNode: java.lang.String standardToString()>
<org.eclipse.jdt.core.dom.ASTNode: java.lang.String toString()>
<org.eclipse.jdt.core.dom.ASTNode: org.eclipse.jdt.core.dom.AST getAST()>
<org.eclipse.jdt.core.dom.ASTNode: org.eclipse.jdt.core.dom.ASTNode getParent()>
<org.eclipse.jdt.core.dom.ASTNode: org.eclipse.jdt.core.dom.ASTNode getRoot()>
<org.eclipse.jdt.core.dom.ASTNode: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ASTNode: void accept(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ASTNode: void acceptChild(org.eclipse.jdt.core.dom.ASTVisitor,org.eclipse.jdt.core.dom.ASTNode)>
<org.eclipse.jdt.core.dom.ASTNode: void appendDebugString(java.lang.StringBuffer)>
<org.eclipse.jdt.core.dom.ASTNode: void appendPrintString(java.lang.StringBuffer)>
<org.eclipse.jdt.core.dom.ASTNode: void checkNewChild(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.core.dom.ASTNode,boolean,java.lang.Class)>
<org.eclipse.jdt.core.dom.ASTNode: void postLazyInit(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.core.dom.ChildPropertyDescriptor)>
<org.eclipse.jdt.core.dom.ASTNode: void preReplaceChild(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.core.dom.ChildPropertyDescriptor)>
<org.eclipse.jdt.core.dom.ASTNode: void setParent(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.core.dom.StructuralPropertyDescriptor)>
<org.eclipse.jdt.core.dom.Annotation: org.eclipse.jdt.core.dom.Name getTypeName()>
<org.eclipse.jdt.core.dom.Annotation: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.Annotation: void setTypeName(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.ArrayAccess: org.eclipse.jdt.core.dom.Expression getArray()>
<org.eclipse.jdt.core.dom.ArrayAccess: org.eclipse.jdt.core.dom.Expression getIndex()>
<org.eclipse.jdt.core.dom.ArrayAccess: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ArrayAccess: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ArrayAccess: void setArray(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.ArrayAccess: void setIndex(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.ArrayType: int getDimensions()>
<org.eclipse.jdt.core.dom.ArrayType: org.eclipse.jdt.core.dom.Type getComponentType()>
<org.eclipse.jdt.core.dom.ArrayType: org.eclipse.jdt.core.dom.Type getElementType()>
<org.eclipse.jdt.core.dom.ArrayType: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ArrayType: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ArrayType: void setComponentType(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.AssertStatement: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.AssertStatement: org.eclipse.jdt.core.dom.Expression getMessage()>
<org.eclipse.jdt.core.dom.AssertStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.AssertStatement: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.AssertStatement: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.AssertStatement: void setMessage(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.Assignment: org.eclipse.jdt.core.dom.Assignment$Operator getOperator()>
<org.eclipse.jdt.core.dom.Assignment: org.eclipse.jdt.core.dom.Expression getLeftHandSide()>
<org.eclipse.jdt.core.dom.Assignment: org.eclipse.jdt.core.dom.Expression getRightHandSide()>
<org.eclipse.jdt.core.dom.Assignment: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.Assignment: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.Assignment: void setLeftHandSide(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.Assignment: void setOperator(org.eclipse.jdt.core.dom.Assignment$Operator)>
<org.eclipse.jdt.core.dom.Assignment: void setRightHandSide(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.BlockComment: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.BooleanLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.BreakStatement: org.eclipse.jdt.core.dom.SimpleName getLabel()>
<org.eclipse.jdt.core.dom.BreakStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.BreakStatement: void setLabel(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.CastExpression: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.CastExpression: org.eclipse.jdt.core.dom.Type getType()>
<org.eclipse.jdt.core.dom.CastExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.CastExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.CastExpression: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.CastExpression: void setType(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.CharacterLiteral: java.lang.String getEscapedValue()>
<org.eclipse.jdt.core.dom.CharacterLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.CharacterLiteral: void internalSetEscapedValue(java.lang.String)>
<org.eclipse.jdt.core.dom.ChildListPropertyDescriptor: void <init>(java.lang.Class,java.lang.String,java.lang.Class,boolean)>
<org.eclipse.jdt.core.dom.ChildPropertyDescriptor: void <init>(java.lang.Class,java.lang.String,java.lang.Class,boolean,boolean)>
<org.eclipse.jdt.core.dom.Comment: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.Comment: void setAlternateRoot(org.eclipse.jdt.core.dom.ASTNode)>
<org.eclipse.jdt.core.dom.ConditionalExpression: org.eclipse.jdt.core.dom.Expression getElseExpression()>
<org.eclipse.jdt.core.dom.ConditionalExpression: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.ConditionalExpression: org.eclipse.jdt.core.dom.Expression getThenExpression()>
<org.eclipse.jdt.core.dom.ConditionalExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ConditionalExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ConditionalExpression: void setElseExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.ConditionalExpression: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.ConditionalExpression: void setThenExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.ContinueStatement: org.eclipse.jdt.core.dom.SimpleName getLabel()>
<org.eclipse.jdt.core.dom.ContinueStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ContinueStatement: void setLabel(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.EmptyStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.Expression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.FieldAccess: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.FieldAccess: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.FieldAccess: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.FieldAccess: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.FieldAccess: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.FieldAccess: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.ImportDeclaration: org.eclipse.jdt.core.dom.Name getName()>
<org.eclipse.jdt.core.dom.ImportDeclaration: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ImportDeclaration: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ImportDeclaration: void setName(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.InstanceofExpression: org.eclipse.jdt.core.dom.Expression getLeftOperand()>
<org.eclipse.jdt.core.dom.InstanceofExpression: org.eclipse.jdt.core.dom.Type getRightOperand()>
<org.eclipse.jdt.core.dom.InstanceofExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.InstanceofExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.InstanceofExpression: void setLeftOperand(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.InstanceofExpression: void setRightOperand(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.LabeledStatement: org.eclipse.jdt.core.dom.SimpleName getLabel()>
<org.eclipse.jdt.core.dom.LabeledStatement: org.eclipse.jdt.core.dom.Statement getBody()>
<org.eclipse.jdt.core.dom.LabeledStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.LabeledStatement: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.LabeledStatement: void setBody(org.eclipse.jdt.core.dom.Statement)>
<org.eclipse.jdt.core.dom.LabeledStatement: void setLabel(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.LineComment: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.MarkerAnnotation: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.MarkerAnnotation: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.MemberRef: org.eclipse.jdt.core.dom.Name getQualifier()>
<org.eclipse.jdt.core.dom.MemberRef: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.MemberRef: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.MemberRef: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.MemberRef: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.MemberRef: void setQualifier(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.MemberValuePair: org.eclipse.jdt.core.dom.Expression getValue()>
<org.eclipse.jdt.core.dom.MemberValuePair: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.MemberValuePair: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.MemberValuePair: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.MemberValuePair: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.MemberValuePair: void setValue(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.MethodBinding: java.lang.String toString()>
<org.eclipse.jdt.core.dom.MethodBinding: void <init>(org.eclipse.jdt.core.dom.BindingResolver,org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.core.dom.MethodRefParameter: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.MethodRefParameter: org.eclipse.jdt.core.dom.Type getType()>
<org.eclipse.jdt.core.dom.MethodRefParameter: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.MethodRefParameter: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.MethodRefParameter: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.MethodRefParameter: void setType(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.Modifier: org.eclipse.jdt.core.dom.Modifier$ModifierKeyword getKeyword()>
<org.eclipse.jdt.core.dom.Modifier: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.Modifier: void setKeyword(org.eclipse.jdt.core.dom.Modifier$ModifierKeyword)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ArrayAccess)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ArrayCreation)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ArrayType)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.AssertStatement)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.Assignment)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.CastExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ConditionalExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.FieldAccess)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ImportDeclaration)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.InstanceofExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.LabeledStatement)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.MarkerAnnotation)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.MemberRef)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.MemberValuePair)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.MethodRefParameter)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.NormalAnnotation)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ParenthesizedExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.PostfixExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.PrefixExpression)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.QualifiedName)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.QualifiedType)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.SingleMemberAnnotation)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.SuperFieldAccess)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.SwitchCase)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.ThrowStatement)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.TypeLiteral)>
<org.eclipse.jdt.core.dom.NaiveASTFlattener: boolean visit(org.eclipse.jdt.core.dom.VariableDeclarationFragment)>
<org.eclipse.jdt.core.dom.Name: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.NullLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.NumberLiteral: java.lang.String getToken()>
<org.eclipse.jdt.core.dom.NumberLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.NumberLiteral: void internalSetToken(java.lang.String)>
<org.eclipse.jdt.core.dom.ParenthesizedExpression: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.ParenthesizedExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ParenthesizedExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ParenthesizedExpression: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.PostfixExpression: org.eclipse.jdt.core.dom.Expression getOperand()>
<org.eclipse.jdt.core.dom.PostfixExpression: org.eclipse.jdt.core.dom.PostfixExpression$Operator getOperator()>
<org.eclipse.jdt.core.dom.PostfixExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.PostfixExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.PostfixExpression: void setOperand(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.PostfixExpression: void setOperator(org.eclipse.jdt.core.dom.PostfixExpression$Operator)>
<org.eclipse.jdt.core.dom.PrefixExpression: org.eclipse.jdt.core.dom.Expression getOperand()>
<org.eclipse.jdt.core.dom.PrefixExpression: org.eclipse.jdt.core.dom.PrefixExpression$Operator getOperator()>
<org.eclipse.jdt.core.dom.PrefixExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.PrefixExpression: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.PrefixExpression: void setOperand(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.PrefixExpression: void setOperator(org.eclipse.jdt.core.dom.PrefixExpression$Operator)>
<org.eclipse.jdt.core.dom.PrimitiveType$Code: java.lang.String toString()>
<org.eclipse.jdt.core.dom.PrimitiveType$Code: void <init>(java.lang.String)>
<org.eclipse.jdt.core.dom.PrimitiveType: org.eclipse.jdt.core.dom.PrimitiveType$Code getPrimitiveTypeCode()>
<org.eclipse.jdt.core.dom.PrimitiveType: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.PrimitiveType: void setPrimitiveTypeCode(org.eclipse.jdt.core.dom.PrimitiveType$Code)>
<org.eclipse.jdt.core.dom.QualifiedName: org.eclipse.jdt.core.dom.Name getQualifier()>
<org.eclipse.jdt.core.dom.QualifiedName: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.QualifiedName: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.QualifiedName: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.QualifiedName: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.QualifiedName: void setQualifier(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.QualifiedType: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.QualifiedType: org.eclipse.jdt.core.dom.Type getQualifier()>
<org.eclipse.jdt.core.dom.QualifiedType: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.QualifiedType: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.QualifiedType: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.QualifiedType: void setQualifier(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.ReturnStatement: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.ReturnStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ReturnStatement: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.SimpleName: java.lang.String getIdentifier()>
<org.eclipse.jdt.core.dom.SimpleName: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.SimpleName: void internalSetIdentifier(java.lang.String)>
<org.eclipse.jdt.core.dom.SimplePropertyDescriptor: void <init>(java.lang.Class,java.lang.String,java.lang.Class,boolean)>
<org.eclipse.jdt.core.dom.SimpleType: org.eclipse.jdt.core.dom.Name getName()>
<org.eclipse.jdt.core.dom.SimpleType: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.SimpleType: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.SimpleType: void setName(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.SingleMemberAnnotation: org.eclipse.jdt.core.dom.Expression getValue()>
<org.eclipse.jdt.core.dom.SingleMemberAnnotation: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.SingleMemberAnnotation: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.SingleMemberAnnotation: void setValue(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.Statement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.StringLiteral: java.lang.String getEscapedValue()>
<org.eclipse.jdt.core.dom.StringLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.StringLiteral: void internalSetEscapedValue(java.lang.String)>
<org.eclipse.jdt.core.dom.StringLiteral: void setEscapedValue(java.lang.String)>
<org.eclipse.jdt.core.dom.StructuralPropertyDescriptor: java.lang.Class getNodeClass()>
<org.eclipse.jdt.core.dom.StructuralPropertyDescriptor: void <init>(java.lang.Class,java.lang.String)>
<org.eclipse.jdt.core.dom.SuperFieldAccess: org.eclipse.jdt.core.dom.Name getQualifier()>
<org.eclipse.jdt.core.dom.SuperFieldAccess: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.SuperFieldAccess: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.SuperFieldAccess: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.SuperFieldAccess: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.SuperFieldAccess: void setQualifier(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.SwitchCase: boolean isDefault()>
<org.eclipse.jdt.core.dom.SwitchCase: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.SwitchCase: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.SwitchCase: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.SwitchCase: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.TextElement: java.lang.String getText()>
<org.eclipse.jdt.core.dom.TextElement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.TextElement: void setText(java.lang.String)>
<org.eclipse.jdt.core.dom.ThisExpression: org.eclipse.jdt.core.dom.Name getQualifier()>
<org.eclipse.jdt.core.dom.ThisExpression: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ThisExpression: void setQualifier(org.eclipse.jdt.core.dom.Name)>
<org.eclipse.jdt.core.dom.ThrowStatement: org.eclipse.jdt.core.dom.Expression getExpression()>
<org.eclipse.jdt.core.dom.ThrowStatement: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.ThrowStatement: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.ThrowStatement: void setExpression(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.Type: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.TypeBinding: java.lang.String toString()>
<org.eclipse.jdt.core.dom.TypeBinding: void <init>(org.eclipse.jdt.core.dom.BindingResolver,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.core.dom.TypeLiteral: org.eclipse.jdt.core.dom.Type getType()>
<org.eclipse.jdt.core.dom.TypeLiteral: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.TypeLiteral: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.TypeLiteral: void setType(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.VariableBinding: java.lang.String toString()>
<org.eclipse.jdt.core.dom.VariableBinding: void <init>(org.eclipse.jdt.core.dom.BindingResolver,org.eclipse.jdt.internal.compiler.lookup.VariableBinding)>
<org.eclipse.jdt.core.dom.VariableDeclaration: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: org.eclipse.jdt.core.dom.Expression getInitializer()>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: org.eclipse.jdt.core.dom.SimpleName getName()>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: void accept0(org.eclipse.jdt.core.dom.ASTVisitor)>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: void setInitializer(org.eclipse.jdt.core.dom.Expression)>
<org.eclipse.jdt.core.dom.VariableDeclarationFragment: void setName(org.eclipse.jdt.core.dom.SimpleName)>
<org.eclipse.jdt.core.dom.WildcardType: org.eclipse.jdt.core.dom.Type getBound()>
<org.eclipse.jdt.core.dom.WildcardType: void <init>(org.eclipse.jdt.core.dom.AST)>
<org.eclipse.jdt.core.dom.WildcardType: void setBound(org.eclipse.jdt.core.dom.Type)>
<org.eclipse.jdt.core.dom.WildcardType: void setBound(org.eclipse.jdt.core.dom.Type,boolean)>
<org.eclipse.jdt.core.search.FieldDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.FieldReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,boolean,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.LocalVariableDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.LocalVariableReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,boolean,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.MethodDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.MethodReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,boolean,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.MethodReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.PackageDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.PackageReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.SearchDocument: java.lang.String getPath()>
<org.eclipse.jdt.core.search.SearchDocument: org.eclipse.jdt.core.search.SearchParticipant getParticipant()>
<org.eclipse.jdt.core.search.SearchDocument: void <init>(java.lang.String,org.eclipse.jdt.core.search.SearchParticipant)>
<org.eclipse.jdt.core.search.SearchMatch: java.lang.Object getElement()>
<org.eclipse.jdt.core.search.SearchMatch: org.eclipse.core.resources.IResource getResource()>
<org.eclipse.jdt.core.search.SearchMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.TypeDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.TypeParameterDeclarationMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.TypeParameterReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.search.TypeReferenceMatch: void <init>(org.eclipse.jdt.core.IJavaElement,int,int,int,boolean,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.core.resources.IResource)>
<org.eclipse.jdt.core.tests.builder.AssertionFailedException: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.codeassist.CompletionEngine$2: org.eclipse.jdt.core.compiler.IProblem createProblem(char[],int,java.lang.String[],java.lang.String[],int,int,int,int)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: org.eclipse.jdt.internal.compiler.ast.ASTNode getCompletionNodeParent()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.AllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.Assignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.CastExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ConditionalExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.EqualExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.FieldReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.MemberValuePair,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.MessageSend,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.PrefixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.ThisReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector: void endVisit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound: void <init>()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound: void <init>(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound: void <init>(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.compiler.lookup.Scope,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound: void <init>(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound: void <init>(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.Scope,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnAnnotationMemberValuePair: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnAnnotationMemberValuePair: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,org.eclipse.jdt.internal.compiler.ast.MemberValuePair[],org.eclipse.jdt.internal.compiler.ast.MemberValuePair)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnArgumentName: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnArgumentName: void <init>(char[],long,org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnExplicitConstructorCall: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnFieldName: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnFieldName: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnFieldType: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnImportReference: java.lang.StringBuffer print(int,java.lang.StringBuffer,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnImportReference: void <init>(char[][],long[],int)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword2: char[] getToken()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword2: char[][] getPossibleKeywords()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword2: void <init>(char[],long,char[][])>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword3: char[] getToken()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword3: char[][] getPossibleKeywords()>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword3: void <init>(char[],long,char[])>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword3: void <init>(char[],long,char[][])>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMarkerAnnotationName: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMemberAccess: void <init>(char[],long)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMemberValueName: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMessageSend: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodName: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodName: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodReturnType: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodReturnType: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodTypeParameter: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodTypeParameter: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeParameter[],org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnPackageReference: java.lang.StringBuffer print(int,java.lang.StringBuffer,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnPackageReference: void <init>(char[][],long[])>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnQualifiedNameReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnQualifiedNameReference: void <init>(char[][],char[],long[],boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnSingleNameReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnSingleNameReference: void <init>(char[],long,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionOnSingleNameReference: void <init>(char[],long,char[][],boolean,boolean)>
<org.eclipse.jdt.internal.codeassist.complete.CompletionScanner: char[] getCurrentIdentifierSource()>
<org.eclipse.jdt.internal.codeassist.complete.InvalidCursorLocation: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.ClassFile outerMostEnclosingClassFile()>
<org.eclipse.jdt.internal.compiler.ClassFile: void <init>(org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding,org.eclipse.jdt.internal.compiler.ClassFile,boolean)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addInnerClasses(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addMissingAbstractProblemMethod(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.IProblem,org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemClinit(org.eclipse.jdt.core.compiler.IProblem[])>
<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemConstructor(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.IProblem[])>
<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemConstructor(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.IProblem[],int)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.IProblem[])>
<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.IProblem[],int)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSpecialMethods()>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticConstructorAccessMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticEnumValueOfMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticEnumValuesMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticFieldReadAccessMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticFieldWriteAccessMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticMethodAccessMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void addSyntheticSwitchTable(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void generateMissingAbstractMethods(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration[],org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ClassFile: void recordEnclosingTypeAttributes(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void recordNestedLocalAttribute(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.ClassFile: void recordNestedMemberAttribute(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.CompilationResult: char[] getFileName()>
<org.eclipse.jdt.internal.compiler.CompilationResult: int computePriority(org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.IProblem[] getAllProblems()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.IProblem[] getErrors()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.IProblem[] getProblems()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.IProblem[] getTasks()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.ClassFile[] getClassFiles()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.CompilationResult tagAsAccepted()>
<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit getCompilationUnit()>
<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(char[],int,int,int)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void discardSuppressedWarnings()>
<org.eclipse.jdt.internal.compiler.CompilationResult: void quickPrioritize(org.eclipse.jdt.core.compiler.IProblem[],int,int)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void quickSort(org.eclipse.jdt.core.compiler.IProblem[],int,int)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void record(char[],org.eclipse.jdt.internal.compiler.ClassFile)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void record(org.eclipse.jdt.core.compiler.IProblem,org.eclipse.jdt.internal.compiler.impl.ReferenceContext)>
<org.eclipse.jdt.internal.compiler.CompilationResult: void recordTask(org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.SourceElementParser$1: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory,org.eclipse.jdt.internal.compiler.ISourceElementRequestor)>
<org.eclipse.jdt.internal.compiler.SourceElementParser$LocalDeclarationVisitor: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration peekDeclaringType()>
<org.eclipse.jdt.internal.compiler.SourceElementParser$LocalDeclarationVisitor: void pushDeclaringType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: boolean checkInvocationArgument(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: java.lang.String toString()>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: java.lang.StringBuffer printAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[],java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: org.eclipse.jdt.internal.compiler.ast.ASTNode concreteStatement()>
<org.eclipse.jdt.internal.compiler.ast.ASTNode: void checkInvocationArguments(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.ast.Expression[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],boolean,org.eclipse.jdt.internal.compiler.lookup.InvocationSite)>
<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printBody(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printReturnType(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult()>
<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Annotation: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ast.Argument: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Argument: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveForCatch(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.Argument: void <init>(char[],long,org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.Assignment,boolean)>
<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.ArrayReference: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>
<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: char[][] getParameterizedTypeName()>
<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: void <init>(char[],int,long)>
<org.eclipse.jdt.internal.compiler.ast.AssertStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.AssertStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.ast.AssertStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.Assignment: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.ast.Block: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.BranchStatement: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.BreakStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.BreakStatement: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding localVariableBinding()>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: void checkNeedForArgumentCasts(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.ast.Expression[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.InvocationSite)>
<org.eclipse.jdt.internal.compiler.ast.CastExpression: void setExpectedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getFileName()>
<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult()>
<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>
<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>
<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>
<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: java.lang.StringBuffer printBody(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void analyseCode(org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.DoStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>
<org.eclipse.jdt.internal.compiler.ast.DoStatement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.ast.EmptyStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.EmptyStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean)>
<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo checkNullStatus(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,int)>
<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.Expression: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.MethodScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.Assignment,boolean)>
<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean)>
<org.eclipse.jdt.internal.compiler.ast.FieldReference: void <init>(char[],long)>
<org.eclipse.jdt.internal.compiler.ast.IfStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.IfStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>
<org.eclipse.jdt.internal.compiler.ast.IfStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>
<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] getImportName()>
<org.eclipse.jdt.internal.compiler.ast.ImportReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ImportReference: java.lang.StringBuffer print(int,java.lang.StringBuffer,boolean)>
<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>
<org.eclipse.jdt.internal.compiler.ast.Initializer: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.MethodScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.Initializer: void <init>(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.compiler.ast.Javadoc: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression: void <init>(char[],int,int,org.eclipse.jdt.internal.compiler.ast.TypeReference)>
<org.eclipse.jdt.internal.compiler.ast.JavadocArraySingleTypeReference: void <init>(char[],int,long)>
<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: void <init>(char[],long)>
<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: char[][] getTypeName()>
<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>
<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: void <init>(char[],int)>
<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: void <init>(char[],long)>
<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: void <init>(char[],long,org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression[])>
<org.eclipse.jdt.internal.compiler.ast.JavadocReturnStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: void <init>(char[],long,int,int)>
<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>
<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: void <init>(char[],long,int,int)>
<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.ASTNode concreteStatement()>
<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: void <init>(char[],org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>
<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.ast.Literal: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.LongLiteral: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.LongLiteral: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.LongLiteral: void <init>(char[],int,int,long)>
<org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.compiler.ast.MemberValuePair: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.MessageSend: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.MessageSend: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.MessageSend: void setActualReceiverType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.ast.MessageSend: void setExpectedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: java.lang.StringBuffer printReturnType(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters()>
<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void analyseCode(org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.NameReference: void setActualReceiverType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: org.eclipse.jdt.internal.compiler.ast.MemberValuePair[] memberValuePairs()>
<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: char[] source()>
<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: void <init>(char[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>
<org.eclipse.jdt.internal.compiler.ast.PrefixExpression: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.PrefixExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.Assignment,boolean)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.lookup.FieldBinding generateReadSequence(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.lookup.FieldBinding getCodegenBinding(int)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getGenericCast(int)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getOtherFieldBindings(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void <init>(char[][],long[],int,int)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void setCodegenBinding(int,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void setGenericCast(int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void setSyntheticAccessor(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,int,org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,int)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean)>
<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,int)>
<org.eclipse.jdt.internal.compiler.ast.Reference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.ReturnStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ReturnStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>
<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>
<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.Assignment,boolean)>
<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean)>
<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void <init>(char[],long)>
<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[][] getTypeName()>
<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>
<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer print(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.impl.Constant resolveCase(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.SwitchStatement)>
<org.eclipse.jdt.internal.compiler.ast.SuperReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ThisReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ThisReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.Assignment,boolean)>
<org.eclipse.jdt.internal.compiler.ast.ThisReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.ast.TypeParameter: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeArgument(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeArgument(org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.ast.WhileStatement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>
<org.eclipse.jdt.internal.compiler.ast.WhileStatement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.ast.WhileStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>
<org.eclipse.jdt.internal.compiler.ast.WhileStatement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: char[] returnKeyFor(int)>
<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: int put(char[],int)>
<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void <init>(int)>
<org.eclipse.jdt.internal.compiler.codegen.CharArrayCache: void rehash()>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void <init>(org.eclipse.jdt.internal.compiler.ClassFile,long)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addLabel(org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateClassLiteralAccessForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateSyntheticBodyForEnumValueOf(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateSyntheticBodyForSwitchTable(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateWideRevertedConditionalBranch(byte,org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifeq(org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifnull(org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void init(org.eclipse.jdt.internal.compiler.ClassFile)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void registerExceptionHandler(org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void reset(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.ClassFile)>
<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void resetForProblemClinit(org.eclipse.jdt.internal.compiler.ClassFile)>
<org.eclipse.jdt.internal.compiler.codegen.ConstantPool: void <init>(org.eclipse.jdt.internal.compiler.ClassFile)>
<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void place()>
<org.eclipse.jdt.internal.compiler.codegen.Label: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.codegen.Label: void initialize(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>
<org.eclipse.jdt.internal.compiler.codegen.Label: void place()>
<org.eclipse.jdt.internal.compiler.env.AccessRestriction: java.lang.String getMessageTemplate()>
<org.eclipse.jdt.internal.compiler.env.AccessRestriction: void <init>(org.eclipse.jdt.internal.compiler.env.AccessRule,java.lang.String)>
<org.eclipse.jdt.internal.compiler.env.AccessRuleSet: java.lang.String toString()>
<org.eclipse.jdt.internal.compiler.env.AccessRuleSet: org.eclipse.jdt.internal.compiler.env.AccessRule[] getAccessRules()>
<org.eclipse.jdt.internal.compiler.env.AccessRuleSet: void <init>(org.eclipse.jdt.internal.compiler.env.AccessRule[])>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: org.eclipse.jdt.internal.compiler.env.AccessRestriction getAccessRestriction()>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: org.eclipse.jdt.internal.compiler.env.IBinaryType getBinaryType()>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: org.eclipse.jdt.internal.compiler.env.ICompilationUnit getCompilationUnit()>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: org.eclipse.jdt.internal.compiler.env.ISourceType[] getSourceTypes()>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.IBinaryType,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>
<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.ISourceType[],org.eclipse.jdt.internal.compiler.env.AccessRestriction)>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo asNegatedCondition()>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenFalse()>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue()>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>
<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[],org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: void mergeUnhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.flow.FinallyFlowContext: boolean recordFinalAssignment(org.eclipse.jdt.internal.compiler.lookup.VariableBinding,org.eclipse.jdt.internal.compiler.ast.Reference)>
<org.eclipse.jdt.internal.compiler.flow.FinallyFlowContext: boolean recordNullReference(org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.flow.FinallyFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.compiler.flow.FinallyFlowContext: void complainOnDeferredChecks(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForBreakLabel(char[])>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForContinueLabel(char[])>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultBreak()>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultContinue()>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordSettingFinal(org.eclipse.jdt.internal.compiler.lookup.VariableBinding,org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordUsingNullReference(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.Expression,int,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext: void checkInitializerExceptions(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext: void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>
<org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subRoutine()>
<org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: char[] labelName()>
<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,char[],org.eclipse.jdt.internal.compiler.codegen.Label,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>
<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: boolean recordFinalAssignment(org.eclipse.jdt.internal.compiler.lookup.VariableBinding,org.eclipse.jdt.internal.compiler.ast.Reference)>
<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: boolean recordNullReference(org.eclipse.jdt.internal.compiler.ast.Expression,int)>
<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.codegen.Label continueLabel()>
<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.codegen.Label,org.eclipse.jdt.internal.compiler.codegen.Label,org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void complainOnDeferredChecks(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext: org.eclipse.jdt.internal.compiler.codegen.Label breakLabel()>
<org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.codegen.Label)>
<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>
<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>
<org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant castTo(int)>
<org.eclipse.jdt.internal.compiler.impl.StringConstant: java.lang.String stringValue()>
<org.eclipse.jdt.internal.compiler.impl.StringConstant: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] constantPoolName()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] genericTypeSignature()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] qualifiedSourceName()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: char[] sourceName()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: java.lang.String toString()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.PackageBinding getPackage()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding findSuperTypeWithSameErasure(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType()>
<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] constantPoolName()>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] qualifiedSourceName()>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: char[] sourceName()>
<org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding: void <init>(int,char[],char[])>
<org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding resolveUnresolvedType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.Binding: char[] computeUniqueKey()>
<org.eclipse.jdt.internal.compiler.lookup.Binding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void <init>(int,org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void <init>(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int)>
<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void addAnonymousType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void addLocalType(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>
<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void addSubscope(org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding buildLocalType(org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding,org.eclipse.jdt.internal.compiler.lookup.PackageBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: void <init>(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: void buildAnonymousTypeBinding(org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: void buildFieldsAndMethods()>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: void buildLocalTypeBinding(org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ClassScope: void buildMethods()>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: char[] genericSignature()>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: long getAnnotationTagBits()>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding original()>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.impl.Constant)>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ImportBinding: void <init>(char[][],boolean,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.compiler.ast.ImportReference)>
<org.eclipse.jdt.internal.compiler.lookup.ImportConflictBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.ast.ImportReference)>
<org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding,org.eclipse.jdt.internal.compiler.ast.CaseStatement)>
<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void <init>(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: long getAnnotationTagBits()>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding computeSubstitutedMethod(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding original()>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding tiebreakMethod()>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding constantPoolDeclaringClass()>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: void <init>(int,char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: void <init>(int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: void setSelector(char[])>
<org.eclipse.jdt.internal.compiler.lookup.MethodScope: void <init>(org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.impl.ReferenceContext,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: boolean areMethodsEqual(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: boolean isInterfaceMethodImplemented(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: org.eclipse.jdt.internal.compiler.lookup.MethodBinding computeSubstituteMethod(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: void <init>(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: void checkInheritedMethods(org.eclipse.jdt.internal.compiler.lookup.MethodBinding[],int)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15: void checkMethods()>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier: org.eclipse.jdt.internal.compiler.lookup.MethodBinding computeSubstituteMethod(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier: void <init>(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.MethodVerifier: void checkPackagePrivateAbstractMethod(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.NestedTypeBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.ClassScope,org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.Binding getTypeOrPackage(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.PackageBinding findPackage(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.PackageBinding getPackage(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.PackageBinding getPackage0(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getType(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getType0(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.PackageBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void addNotFoundPackage(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void addNotFoundType(char[])>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void addPackage(org.eclipse.jdt.internal.compiler.lookup.PackageBinding)>
<org.eclipse.jdt.internal.compiler.lookup.PackageBinding: void addType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedFieldBinding: org.eclipse.jdt.internal.compiler.impl.Constant constant()>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedFieldBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding original()>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedFieldBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding tiebreakMethod()>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding inferFromExpectedType(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,java.util.Map,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[])>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding substitute(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding$1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding substitute(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding$1: void <init>(org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding,org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding,boolean,int,org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding[],org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding[])>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding original()>
<org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.ProblemBinding: void <init>(char[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,char[][],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,char[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,char[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemPackageBinding: void <init>(char[],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemPackageBinding: void <init>(char[][],int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean canBeSeenBy(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean canBeSeenBy(org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean hasIncompatibleSuperType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] qualifiedSourceName()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] sourceName()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding[] availableFields()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding[] availableMethods()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.MethodBinding[] unResolvedMethods()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.PackageBinding getPackage()>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding findSuperTypeErasingTo(int,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding findSuperTypeWithSameErasure(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding outermostEnclosingType()>
<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] substitute(org.eclipse.jdt.internal.compiler.lookup.Substitution,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[])>
<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.TypeBinding substitute(org.eclipse.jdt.internal.compiler.lookup.Substitution,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] substitute(org.eclipse.jdt.internal.compiler.lookup.Substitution,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[])>
<org.eclipse.jdt.internal.compiler.lookup.Scope: void <init>(int,org.eclipse.jdt.internal.compiler.lookup.Scope)>
<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.PackageBinding,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticFieldBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.impl.Constant,int)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,boolean,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,char[])>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,boolean,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding,char[])>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void initializeConstructorAccessor(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>
<org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding: void initializeMethodAccessor(org.eclipse.jdt.internal.compiler.lookup.MethodBinding,boolean,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isProvablyDistinctFrom(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isReifiable()>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isTypeArgumentContainedBy(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isTypeArgumentIntersecting(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean needsUncheckedConversion(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] genericTypeSignature()>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] qualifiedPackageName()>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] signature()>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding capture(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding genericCast(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding$1: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding$1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding substitute(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding$1: void <init>(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: boolean isInterchangeableWith(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: char[] computeUniqueKey(boolean)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: char[] constantPoolName()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: char[] shortReadableName()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: int boundCheck(org.eclipse.jdt.internal.compiler.lookup.Substitution,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding resolve(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding upperBound()>
<org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.Binding,int)>
<org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding: java.lang.String debugName()>
<org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding resolve(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment,boolean)>
<org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding: void <init>(char[][],org.eclipse.jdt.internal.compiler.lookup.PackageBinding)>
<org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding: void addWrapper(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding: void setResolvedType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.UpdatedMethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding constantPoolDeclaringClass()>
<org.eclipse.jdt.internal.compiler.lookup.UpdatedMethodBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.lookup.VariableBinding: char[] readableName()>
<org.eclipse.jdt.internal.compiler.lookup.VariableBinding: org.eclipse.jdt.internal.compiler.impl.Constant constant()>
<org.eclipse.jdt.internal.compiler.lookup.VariableBinding: void <init>(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int,org.eclipse.jdt.internal.compiler.impl.Constant)>
<org.eclipse.jdt.internal.compiler.lookup.VariableBinding: void setConstant(org.eclipse.jdt.internal.compiler.impl.Constant)>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: char[] signature()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: java.lang.String debugName()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: java.lang.String toString()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding resolve()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] superInterfaces()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding erasure()>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: void <init>(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],int,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: void initialize(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[])>
<org.eclipse.jdt.internal.compiler.lookup.WildcardBinding: void swapUnresolved(org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.ast.Block updatedBlock()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.ast.Statement updatedStatement()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int,boolean)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int,boolean)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int,boolean)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: void <init>(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredBlock: void attach(org.eclipse.jdt.internal.compiler.parser.RecoveredStatement)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.Parser parser()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement topElement()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer enclosingInitializer()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredMethod enclosingMethod()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredType enclosingType()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void <init>(org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void <init>(org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration updatedFieldDeclaration()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredField: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredImport: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredImport: org.eclipse.jdt.internal.compiler.ast.ImportReference updatedImportReference()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredImport: void <init>(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration updatedFieldDeclaration()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.ast.Statement updatedStatement()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: void <init>(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration updatedMethodDeclaration()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: void <init>(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredStatement: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredStatement: org.eclipse.jdt.internal.compiler.ast.Statement updatedStatement()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Statement,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.Statement updatedStatement()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration updatedTypeDeclaration()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.parser.RecoveredType enclosingType()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredType: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration updatedCompilationUnitDeclaration()>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>
<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: void <init>(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,int,org.eclipse.jdt.internal.compiler.parser.Parser)>
<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentIdentifierSource()>
<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>
<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[],org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo copy()>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo: void <init>(org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$StateInfo: void <init>(org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: boolean secondaryCheck(int[],int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: int getNtermIndex(int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: int getTermIndex(int[],int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: int mergeCandidate(int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: int misspell(int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: int parseCheck(int[],int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo checkPrimaryDistance(int[],int,org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo scopeTrial(int[],int,org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$RepairCandidate errorRecovery(int,boolean)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$RepairCandidate primaryDiagnosis(org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$RepairCandidate primaryPhase(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$RepairCandidate secondaryPhase(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$SecondaryRepairInfo misplacementRecovery(int[],int,int,org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$SecondaryRepairInfo,boolean)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$SecondaryRepairInfo secondaryRecovery(int[],int,int,org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$SecondaryRepairInfo,boolean)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,int[],int[],int[],org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse()>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void reportPrimaryError(int,int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void reportSecondaryError(int,int,int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void scopeTrialCheck(int[],int,org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser$PrimaryRepairInfo,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: void <init>(org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: boolean afterEol(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: char[] name(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int end(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int kind(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int line(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int start(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: void <init>(int,org.eclipse.jdt.internal.compiler.parser.Scanner,int[],int[],int[],int,int,int)>
<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: void readTokenFromScanner()>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>()>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>(boolean,java.lang.RuntimeException)>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void updateContext(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void updateContext(org.eclipse.jdt.internal.compiler.lookup.InvocationSite,org.eclipse.jdt.internal.compiler.CompilationResult)>
<org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.problem.AbortMethod: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.problem.AbortType: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.IProblem)>
<org.eclipse.jdt.internal.compiler.problem.DefaultProblem: java.lang.String getMessage()>
<org.eclipse.jdt.internal.compiler.problem.DefaultProblem: java.lang.String[] getArguments()>
<org.eclipse.jdt.internal.compiler.problem.DefaultProblem: void <init>(char[],java.lang.String,int,java.lang.String[],int,int,int,int)>
<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: org.eclipse.jdt.core.compiler.IProblem createProblem(char[],int,java.lang.String[],java.lang.String[],int,int,int,int)>
<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.core.compiler.IProblem createProblem(char[],int,java.lang.String[],java.lang.String[],int,int,int,int)>
<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>
<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>
<org.eclipse.jdt.internal.compiler.problem.ShouldNotImplement: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.compiler.util.CompoundNameVector: char[][] elementAt(int)>
<org.eclipse.jdt.internal.compiler.util.CompoundNameVector: void <init>()>
<org.eclipse.jdt.internal.compiler.util.CompoundNameVector: void add(char[][])>
<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: java.lang.Object get(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: java.lang.Object put(int,java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfInt: void rehash()>
<org.eclipse.jdt.internal.compiler.util.HashtableOfIntValues: int put(char[],int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfIntValues: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfIntValues: void rehash()>
<org.eclipse.jdt.internal.compiler.util.HashtableOfLong: java.lang.Object get(long)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfLong: java.lang.Object put(long,java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfLong: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfLong: void rehash()>
<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object get(char[])>
<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void rehash()>
<org.eclipse.jdt.internal.compiler.util.HashtableOfPackage: org.eclipse.jdt.internal.compiler.lookup.PackageBinding get(char[])>
<org.eclipse.jdt.internal.compiler.util.HashtableOfPackage: org.eclipse.jdt.internal.compiler.lookup.PackageBinding put(char[],org.eclipse.jdt.internal.compiler.lookup.PackageBinding)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfPackage: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfPackage: void rehash()>
<org.eclipse.jdt.internal.compiler.util.HashtableOfType: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding get(char[])>
<org.eclipse.jdt.internal.compiler.util.HashtableOfType: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding put(char[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfType: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.HashtableOfType: void rehash()>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object elementAt(int)>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: void <init>()>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: void add(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: void addAll(java.lang.Object[])>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: void addAll(org.eclipse.jdt.internal.compiler.util.ObjectVector)>
<org.eclipse.jdt.internal.compiler.util.ObjectVector: void copyInto(java.lang.Object[],int)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: java.lang.Object clone()>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: java.lang.Object get(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: java.lang.Object keyForValue(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: java.lang.Object removeKey(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: void <init>(int)>
<org.eclipse.jdt.internal.compiler.util.SimpleLookupTable: void rehash()>
<org.eclipse.jdt.internal.compiler.util.SimpleNameVector: char[] elementAt(int)>
<org.eclipse.jdt.internal.compiler.util.SimpleNameVector: void <init>()>
<org.eclipse.jdt.internal.compiler.util.SimpleNameVector: void add(char[])>
<org.eclipse.jdt.internal.compiler.util.Util$1: java.lang.String displayString(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.WeakHashSet$HashableWeakReference: void <init>(org.eclipse.jdt.internal.compiler.util.WeakHashSet,java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.eclipse.jdt.internal.compiler.util.WeakHashSet: java.lang.Object add(java.lang.Object)>
<org.eclipse.jdt.internal.compiler.util.WeakHashSetOfCharArray$HashableWeakReference: void <init>(org.eclipse.jdt.internal.compiler.util.WeakHashSetOfCharArray,char[],java.lang.ref.ReferenceQueue)>
<org.eclipse.jdt.internal.compiler.util.WeakHashSetOfCharArray: char[] add(char[])>
<org.eclipse.jdt.internal.core.Assert$AssertionFailedException: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.core.BasicCompilationUnit: char[] getContents()>
<org.eclipse.jdt.internal.core.BasicCompilationUnit: char[][] getPackageName()>
<org.eclipse.jdt.internal.core.BasicCompilationUnit: void <init>(char[],char[][],java.lang.String)>
<org.eclipse.jdt.internal.core.BasicCompilationUnit: void <init>(char[],char[][],java.lang.String,org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.Buffer: char[] getCharacters()>
<org.eclipse.jdt.internal.core.Buffer: org.eclipse.jdt.core.IOpenable getOwner()>
<org.eclipse.jdt.internal.core.Buffer: void <init>(org.eclipse.core.resources.IFile,org.eclipse.jdt.core.IOpenable,boolean)>
<org.eclipse.jdt.internal.core.Buffer: void setContents(char[])>
<org.eclipse.jdt.internal.core.CancelableProblemFactory: org.eclipse.jdt.core.compiler.IProblem createProblem(char[],int,java.lang.String[],java.lang.String[],int,int,int,int)>
<org.eclipse.jdt.internal.core.ClasspathAttribute: java.lang.String getName()>
<org.eclipse.jdt.internal.core.ClasspathAttribute: java.lang.String getValue()>
<org.eclipse.jdt.internal.core.ClasspathAttribute: void <init>(java.lang.String,java.lang.String)>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath getOutputLocation()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath getPath()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath getSourceAttachmentPath()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath getSourceAttachmentRootPath()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath[] getExclusionPatterns()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.core.runtime.IPath[] getInclusionPatterns()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.jdt.core.IClasspathAttribute[] getExtraAttributes()>
<org.eclipse.jdt.internal.core.ClasspathEntry: org.eclipse.jdt.internal.core.ClasspathEntry combineWith(org.eclipse.jdt.internal.core.ClasspathEntry)>
<org.eclipse.jdt.internal.core.ClasspathEntry: void <init>(int,int,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath[],org.eclipse.core.runtime.IPath[],org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath,boolean,org.eclipse.jdt.core.IAccessRule[],boolean,org.eclipse.jdt.core.IClasspathAttribute[])>
<org.eclipse.jdt.internal.core.CompilationUnit$1: char[] getContents()>
<org.eclipse.jdt.internal.core.CompilationUnit$1: char[] getFileName()>
<org.eclipse.jdt.internal.core.CompilationUnit$1: char[] getMainTypeName()>
<org.eclipse.jdt.internal.core.CompilationUnit$1: char[][] getPackageName()>
<org.eclipse.jdt.internal.core.CompilationUnit$1: void <init>(org.eclipse.jdt.internal.core.CompilationUnit,char[])>
<org.eclipse.jdt.internal.core.DeltaProcessor$1$FoundRelevantDeltaException: void <init>(org.eclipse.jdt.internal.core.DeltaProcessor)>
<org.eclipse.jdt.internal.core.JavaElementDelta: java.lang.String toString()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.core.resources.IResourceDelta[] getResourceDeltas()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElement getElement()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElement getMovedFromElement()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElement getMovedToElement()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElementDelta[] getAffectedChildren()>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElementDelta[] growAndAddToArray(org.eclipse.jdt.core.IJavaElementDelta[],org.eclipse.jdt.core.IJavaElementDelta)>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.core.IJavaElementDelta[] removeAndShrinkArray(org.eclipse.jdt.core.IJavaElementDelta[],int)>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.internal.core.JavaElementDelta changed(org.eclipse.jdt.core.IJavaElement,int)>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.internal.core.JavaElementDelta createDeltaTree(org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.core.JavaElementDelta)>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.internal.core.JavaElementDelta find(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: org.eclipse.jdt.internal.core.JavaElementDelta getDeltaFor(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void <init>(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void addAffectedChild(org.eclipse.jdt.internal.core.JavaElementDelta)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void addResourceDelta(org.eclipse.core.resources.IResourceDelta)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void added(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void added(org.eclipse.jdt.core.IJavaElement,int)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void closed(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void insertDeltaTree(org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.core.JavaElementDelta)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void movedFrom(org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void movedTo(org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void opened(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void removed(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void removed(org.eclipse.jdt.core.IJavaElement,int)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void sourceAttached(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementDelta: void sourceDetached(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementInfo: org.eclipse.jdt.core.IJavaElement[] getChildren()>
<org.eclipse.jdt.internal.core.JavaElementInfo: org.eclipse.jdt.core.IJavaElement[] growAndAddToArray(org.eclipse.jdt.core.IJavaElement[],org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementInfo: org.eclipse.jdt.core.IJavaElement[] removeAndShrinkArray(org.eclipse.jdt.core.IJavaElement[],org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementInfo: void addChild(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementInfo: void removeChild(org.eclipse.jdt.core.IJavaElement)>
<org.eclipse.jdt.internal.core.JavaElementInfo: void setChildren(org.eclipse.jdt.core.IJavaElement[])>
<org.eclipse.jdt.internal.core.JavaElementRequestor: org.eclipse.jdt.core.IPackageFragment[] getPackageFragments()>
<org.eclipse.jdt.internal.core.JavaElementRequestor: void acceptPackageFragment(org.eclipse.jdt.core.IPackageFragment)>
<org.eclipse.jdt.internal.core.JavaModelManager$2: java.lang.String displayString(java.lang.Object)>
<org.eclipse.jdt.internal.core.JavaModelManager$7: java.lang.String toString()>
<org.eclipse.jdt.internal.core.JavaModelManager$7: org.eclipse.jdt.core.IClasspathEntry[] getClasspathEntries()>
<org.eclipse.jdt.internal.core.JavaModelManager$7: void <init>(org.eclipse.jdt.core.IClasspathEntry[],org.eclipse.core.runtime.IPath,org.eclipse.jdt.core.IJavaProject)>
<org.eclipse.jdt.internal.core.JavaModelManager$PerWorkingCopyInfo: org.eclipse.jdt.core.ICompilationUnit getWorkingCopy()>
<org.eclipse.jdt.internal.core.JavaModelManager$PerWorkingCopyInfo: void <init>(org.eclipse.jdt.core.ICompilationUnit,org.eclipse.jdt.core.IProblemRequestor)>
<org.eclipse.jdt.internal.core.JavaModelStatus: java.lang.String getMessage()>
<org.eclipse.jdt.internal.core.JavaModelStatus: void <init>(int,java.lang.Throwable)>
<org.eclipse.jdt.internal.core.JavaModelStatus: void <init>(org.eclipse.core.runtime.CoreException)>
<org.eclipse.jdt.internal.core.LRUCacheEnumerator$LRUEnumeratorElement: void <init>(java.lang.Object)>
<org.eclipse.jdt.internal.core.LRUCacheEnumerator: java.lang.Object nextElement()>
<org.eclipse.jdt.internal.core.LRUCacheEnumerator: void <init>(org.eclipse.jdt.internal.core.LRUCacheEnumerator$LRUEnumeratorElement)>
<org.eclipse.jdt.internal.core.NameLookup: org.eclipse.jdt.core.IPackageFragment[] findPackageFragments(java.lang.String,boolean)>
<org.eclipse.jdt.internal.core.NameLookup: org.eclipse.jdt.core.IType findType(java.lang.String,boolean,int)>
<org.eclipse.jdt.internal.core.NameLookup: org.eclipse.jdt.core.IType findType(java.lang.String,java.lang.String,boolean,int)>
<org.eclipse.jdt.internal.core.NameLookup: org.eclipse.jdt.core.IType findType(java.lang.String,org.eclipse.jdt.core.IPackageFragment,boolean,int)>
<org.eclipse.jdt.internal.core.NameLookup: org.eclipse.jdt.core.IType getMemberType(org.eclipse.jdt.core.IType,java.lang.String,int)>
<org.eclipse.jdt.internal.core.NameLookup: void <init>(org.eclipse.jdt.core.IPackageFragmentRoot[],org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject,org.eclipse.jdt.core.ICompilationUnit[],java.util.Map)>
<org.eclipse.jdt.internal.core.NameLookup: void seekTypes(java.lang.String,org.eclipse.jdt.core.IPackageFragment,boolean,int,org.eclipse.jdt.internal.core.IJavaElementRequestor)>
<org.eclipse.jdt.internal.core.NameLookup: void seekTypesInSourcePackage(java.lang.String,org.eclipse.jdt.core.IPackageFragment,boolean,int,org.eclipse.jdt.internal.core.IJavaElementRequestor)>
<org.eclipse.jdt.internal.core.NameLookup: void seekTypesInTopLevelType(java.lang.String,int,org.eclipse.jdt.core.IType,org.eclipse.jdt.internal.core.IJavaElementRequestor,int)>
<org.eclipse.jdt.internal.core.OverflowingLRUCache: java.lang.Object peek(java.lang.Object)>
<org.eclipse.jdt.internal.core.OverflowingLRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.eclipse.jdt.internal.core.OverflowingLRUCache: java.lang.Object remove(java.lang.Object)>
<org.eclipse.jdt.internal.core.OverflowingLRUCache: java.util.Enumeration elements()>
<org.eclipse.jdt.internal.core.PackageFragmentRootInfo: org.eclipse.jdt.internal.core.SourceMapper getSourceMapper()>
<org.eclipse.jdt.internal.core.PackageFragmentRootInfo: void setSourceMapper(org.eclipse.jdt.internal.core.SourceMapper)>
<org.eclipse.jdt.internal.core.SetClasspathOperation$1: java.lang.String getID()>
<org.eclipse.jdt.internal.core.SetClasspathOperation$1: void <init>(org.eclipse.jdt.internal.core.SetClasspathOperation,org.eclipse.core.runtime.IPath,org.eclipse.jdt.internal.core.search.indexing.IndexManager,char[][],char[][])>
<org.eclipse.jdt.internal.core.SetClasspathOperation$2: java.lang.String getID()>
<org.eclipse.jdt.internal.core.SetClasspathOperation$2: void <init>(org.eclipse.jdt.internal.core.SetClasspathOperation,org.eclipse.core.runtime.IPath,org.eclipse.jdt.internal.core.DeltaProcessingState,org.eclipse.jdt.internal.core.search.indexing.IndexManager)>
<org.eclipse.jdt.internal.core.SetClasspathOperation$3: java.lang.String getID()>
<org.eclipse.jdt.internal.core.SetClasspathOperation$3: void <init>(org.eclipse.jdt.internal.core.SetClasspathOperation,org.eclipse.core.runtime.IPath,org.eclipse.jdt.internal.core.search.indexing.IndexManager)>
<org.eclipse.jdt.internal.core.SetClasspathOperation$4: java.lang.String getID()>
<org.eclipse.jdt.internal.core.SetClasspathOperation$4: void <init>(org.eclipse.jdt.internal.core.SetClasspathOperation,org.eclipse.core.runtime.IPath,org.eclipse.jdt.internal.core.search.indexing.IndexManager,char[][],char[][])>
<org.eclipse.jdt.internal.core.SingleTypeRequestor: org.eclipse.jdt.core.IType getType()>
<org.eclipse.jdt.internal.core.SingleTypeRequestor: void acceptMemberType(org.eclipse.jdt.core.IType)>
<org.eclipse.jdt.internal.core.SingleTypeRequestor: void acceptType(org.eclipse.jdt.core.IType)>
<org.eclipse.jdt.internal.core.SourceFieldElementInfo: char[] getTypeName()>
<org.eclipse.jdt.internal.core.SourceFieldElementInfo: void setTypeName(char[])>
<org.eclipse.jdt.internal.core.SourceMethodElementInfo: char[][] getArgumentNames()>
<org.eclipse.jdt.internal.core.SourceMethodElementInfo: char[][] getExceptionTypeNames()>
<org.eclipse.jdt.internal.core.SourceMethodElementInfo: void setArgumentNames(char[][])>
<org.eclipse.jdt.internal.core.SourceMethodElementInfo: void setExceptionTypeNames(char[][])>
<org.eclipse.jdt.internal.core.SourceMethodInfo: char[] getReturnTypeName()>
<org.eclipse.jdt.internal.core.SourceMethodInfo: void setReturnType(char[])>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: char[] getSuperclassName()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: char[][] getInterfaceNames()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: org.eclipse.jdt.core.IType getHandle()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: org.eclipse.jdt.internal.core.SourceField[] getFieldHandles()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: org.eclipse.jdt.internal.core.SourceMethod[] getMethodHandles()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: org.eclipse.jdt.internal.core.SourceType[] getMemberTypeHandles()>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: void setHandle(org.eclipse.jdt.core.IType)>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: void setSuperInterfaceNames(char[][])>
<org.eclipse.jdt.internal.core.SourceTypeElementInfo: void setSuperclassName(char[])>
<org.eclipse.jdt.internal.core.TypeVector: org.eclipse.jdt.core.IType[] elements()>
<org.eclipse.jdt.internal.core.TypeVector: org.eclipse.jdt.internal.core.TypeVector copy()>
<org.eclipse.jdt.internal.core.TypeVector: void <init>()>
<org.eclipse.jdt.internal.core.TypeVector: void <init>(org.eclipse.jdt.core.IType[])>
<org.eclipse.jdt.internal.core.TypeVector: void add(org.eclipse.jdt.core.IType)>
<org.eclipse.jdt.internal.core.builder.AbortIncrementalBuildException: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.core.builder.ImageBuilderInternalException: java.lang.String getLocalizedMessage()>
<org.eclipse.jdt.internal.core.builder.ImageBuilderInternalException: org.eclipse.core.runtime.CoreException getThrowable()>
<org.eclipse.jdt.internal.core.builder.ImageBuilderInternalException: void <init>(org.eclipse.core.runtime.CoreException)>
<org.eclipse.jdt.internal.core.builder.MissingClassFileException: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.core.builder.MissingSourceFileException: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.core.builder.NameSet: char[] add(char[])>
<org.eclipse.jdt.internal.core.builder.NameSet: void <init>(int)>
<org.eclipse.jdt.internal.core.builder.NameSet: void rehash()>
<org.eclipse.jdt.internal.core.builder.QualifiedNameSet: char[][] add(char[][])>
<org.eclipse.jdt.internal.core.builder.QualifiedNameSet: void <init>(int)>
<org.eclipse.jdt.internal.core.builder.QualifiedNameSet: void rehash()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: char[] getEnclosingTypeName()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: char[] getName()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: char[] getSuperclassName()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: char[][] getInterfaceNames()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: void <init>(int,char[],char[],char[],char[][],char)>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType: void recordSuperType(char[],char[],char)>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBuilder$1: char[] getFileName()>
<org.eclipse.jdt.internal.core.hierarchy.HierarchyBuilder$1: void <init>(org.eclipse.jdt.internal.core.hierarchy.HierarchyBuilder,char[],char[][],java.lang.String,org.eclipse.jdt.core.IJavaElement,char[])>
<org.eclipse.jdt.internal.core.hierarchy.IndexBasedHierarchyBuilder$Queue: char[] retrieve()>
<org.eclipse.jdt.internal.core.hierarchy.IndexBasedHierarchyBuilder$Queue: void <init>()>
<org.eclipse.jdt.internal.core.hierarchy.IndexBasedHierarchyBuilder$Queue: void add(char[])>
<org.eclipse.jdt.internal.core.index.DiskIndex$IntList: void <init>(org.eclipse.jdt.internal.core.index.DiskIndex,int[])>
<org.eclipse.jdt.internal.core.index.DiskIndex: int[] readDocumentNumbers(java.lang.Object)>
<org.eclipse.jdt.internal.core.index.DiskIndex: org.eclipse.jdt.internal.compiler.util.HashtableOfObject addQueryResult(org.eclipse.jdt.internal.compiler.util.HashtableOfObject,char[],org.eclipse.jdt.internal.compiler.util.HashtableOfObject,org.eclipse.jdt.internal.core.index.MemoryIndex)>
<org.eclipse.jdt.internal.core.index.DiskIndex: org.eclipse.jdt.internal.compiler.util.HashtableOfObject addQueryResults(char[][],char[],int,org.eclipse.jdt.internal.core.index.MemoryIndex)>
<org.eclipse.jdt.internal.core.index.DiskIndex: org.eclipse.jdt.internal.compiler.util.HashtableOfObject readCategoryTable(char[],boolean)>
<org.eclipse.jdt.internal.core.index.DiskIndex: org.eclipse.jdt.internal.core.index.DiskIndex mergeWith(org.eclipse.jdt.internal.core.index.MemoryIndex)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void <init>(java.lang.String)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void copyQueryResults(org.eclipse.jdt.internal.compiler.util.HashtableOfObject,int)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void initializeFrom(org.eclipse.jdt.internal.core.index.DiskIndex,java.io.File)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void mergeCategories(org.eclipse.jdt.internal.core.index.DiskIndex,int[],java.io.DataOutputStream)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void mergeCategory(char[],org.eclipse.jdt.internal.core.index.DiskIndex,int[],java.io.DataOutputStream)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void readHeaderInfo(java.io.RandomAccessFile)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void stopQuery()>
<org.eclipse.jdt.internal.core.index.DiskIndex: void writeCategories(java.io.DataOutputStream)>
<org.eclipse.jdt.internal.core.index.DiskIndex: void writeCategoryTable(char[],org.eclipse.jdt.internal.compiler.util.HashtableOfObject,java.io.DataOutputStream)>
<org.eclipse.jdt.internal.core.index.EntryResult: char[] getWord()>
<org.eclipse.jdt.internal.core.index.EntryResult: java.lang.String[] getDocumentNames(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.index.EntryResult: void <init>(char[],org.eclipse.jdt.internal.compiler.util.HashtableOfObject)>
<org.eclipse.jdt.internal.core.index.EntryResult: void addDocumentName(java.lang.String)>
<org.eclipse.jdt.internal.core.index.EntryResult: void addDocumentTable(org.eclipse.jdt.internal.compiler.util.HashtableOfObject)>
<org.eclipse.jdt.internal.core.index.MemoryIndex: org.eclipse.jdt.internal.compiler.util.HashtableOfObject addQueryResults(char[][],char[],int,org.eclipse.jdt.internal.compiler.util.HashtableOfObject)>
<org.eclipse.jdt.internal.core.index.MemoryIndex: void addDocumentNames(java.lang.String,org.eclipse.jdt.internal.core.util.SimpleSet)>
<org.eclipse.jdt.internal.core.index.MemoryIndex: void addIndexEntry(char[],char[],java.lang.String)>
<org.eclipse.jdt.internal.core.index.MemoryIndex: void remove(java.lang.String)>
<org.eclipse.jdt.internal.core.jdom.CompilationUnit: char[] getContents()>
<org.eclipse.jdt.internal.core.jdom.CompilationUnit: char[] getFileName()>
<org.eclipse.jdt.internal.core.jdom.CompilationUnit: void <init>(char[],char[])>
<org.eclipse.jdt.internal.core.search.BasicSearchEngine$2: char[] getContents()>
<org.eclipse.jdt.internal.core.search.BasicSearchEngine$2: void <init>(org.eclipse.jdt.internal.core.search.BasicSearchEngine,char[])>
<org.eclipse.jdt.internal.core.search.JavaSearchDocument: byte[] getByteContents()>
<org.eclipse.jdt.internal.core.search.JavaSearchDocument: void <init>(java.lang.String,org.eclipse.jdt.core.search.SearchParticipant)>
<org.eclipse.jdt.internal.core.search.JavaSearchDocument: void <init>(java.util.zip.ZipEntry,org.eclipse.core.runtime.IPath,byte[],org.eclipse.jdt.core.search.SearchParticipant)>
<org.eclipse.jdt.internal.core.search.PathCollector: boolean acceptIndexMatch(java.lang.String,org.eclipse.jdt.core.search.SearchPattern,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>
<org.eclipse.jdt.internal.core.search.PathCollector: java.lang.String[] getPaths()>
<org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor: char[][] enclosingTypeNames()>
<org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor: void <init>(org.eclipse.jdt.internal.core.search.indexing.SourceIndexer)>
<org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor: void pushTypeName(char[])>
<org.eclipse.jdt.internal.core.search.matching.AndPattern: void findIndexMatches(org.eclipse.jdt.internal.core.index.Index,org.eclipse.jdt.internal.core.search.IndexQueryRequestor,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.jdt.core.search.IJavaSearchScope,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorLocator: org.eclipse.jdt.core.search.SearchMatch newDeclarationMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.compiler.lookup.Binding,int,int,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorPattern: boolean matchesDecodedKey(org.eclipse.jdt.core.search.SearchPattern)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorPattern: org.eclipse.jdt.internal.core.index.EntryResult[] queryIn(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorPattern: void <init>(boolean,boolean,char[],char[],char[][],char[][],int)>
<org.eclipse.jdt.internal.core.search.matching.ConstructorPattern: void <init>(boolean,boolean,char[],char[],java.lang.String,char[][],char[][],java.lang.String[],char[][],int)>
<org.eclipse.jdt.internal.core.search.matching.FieldLocator: int resolveLevelForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.FieldPattern: char[] getIndexKey()>
<org.eclipse.jdt.internal.core.search.matching.FieldPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.FieldPattern: org.eclipse.jdt.core.search.SearchPattern getBlankPattern()>
<org.eclipse.jdt.internal.core.search.matching.FieldPattern: void <init>(boolean,boolean,boolean,char[],char[],char[],char[],char[],int)>
<org.eclipse.jdt.internal.core.search.matching.FieldPattern: void decodeIndexKey(char[])>
<org.eclipse.jdt.internal.core.search.matching.InternalSearchPattern: org.eclipse.jdt.core.search.SearchPattern currentPattern()>
<org.eclipse.jdt.internal.core.search.matching.InternalSearchPattern: org.eclipse.jdt.internal.core.index.EntryResult[] queryIn(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.search.matching.InternalSearchPattern: void findIndexMatches(org.eclipse.jdt.internal.core.index.Index,org.eclipse.jdt.internal.core.search.IndexQueryRequestor,org.eclipse.jdt.core.search.SearchParticipant,org.eclipse.jdt.core.search.IJavaSearchScope,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern: boolean matchesName(char[],char[])>
<org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern: char[][][] getTypeArguments()>
<org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern: java.lang.String toString()>
<org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern: void setTypeArguments(char[][][])>
<org.eclipse.jdt.internal.core.search.matching.MatchLocator$WorkingCopyDocument: void <init>(org.eclipse.jdt.core.ICompilationUnit,org.eclipse.jdt.core.search.SearchParticipant)>
<org.eclipse.jdt.internal.core.search.matching.MatchLocator$WrappedCoreException: void <init>(org.eclipse.jdt.internal.core.search.matching.MatchLocator,org.eclipse.core.runtime.CoreException)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: int addMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,int)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: java.lang.Object removePossibleMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: java.lang.Object removeTrustedMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: org.eclipse.jdt.internal.compiler.ast.ASTNode[] matchingNodes(int,int)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: void addPossibleMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: void addTrustedMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,boolean)>
<org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet: void addTrustedMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,java.lang.Integer)>
<org.eclipse.jdt.internal.core.search.matching.MethodPattern: boolean matchesDecodedKey(org.eclipse.jdt.core.search.SearchPattern)>
<org.eclipse.jdt.internal.core.search.matching.MethodPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.MethodPattern: org.eclipse.jdt.internal.core.index.EntryResult[] queryIn(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.search.matching.MethodPattern: void <init>(boolean,boolean,char[],char[],char[],char[],char[],char[][],char[][],org.eclipse.jdt.core.IType,int)>
<org.eclipse.jdt.internal.core.search.matching.MethodPattern: void <init>(boolean,boolean,char[],char[],char[],java.lang.String,char[],char[],java.lang.String,char[][],char[][],java.lang.String[],char[][],int)>
<org.eclipse.jdt.internal.core.search.matching.OrLocator: org.eclipse.jdt.core.search.SearchMatch newDeclarationMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.compiler.lookup.Binding,int,int,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.PackageDeclarationPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.PackageDeclarationPattern: void <init>(char[],int)>
<org.eclipse.jdt.internal.core.search.matching.PackageReferencePattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.PackageReferencePattern: org.eclipse.jdt.core.search.SearchPattern getBlankPattern()>
<org.eclipse.jdt.internal.core.search.matching.PackageReferencePattern: void <init>(char[],int)>
<org.eclipse.jdt.internal.core.search.matching.PackageReferencePattern: void decodeIndexKey(char[])>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: char[] getQualifiedPattern(char[],char[])>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: char[] getQualifiedSourceName(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: char[] qualifiedSourceName(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: int resolveLevelForType(char[],char[],char[][][],int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: int resolveLevelForType(char[],char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: int resolveLevelForType(char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: org.eclipse.jdt.core.search.SearchMatch newDeclarationMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.compiler.lookup.Binding,int,int,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.PatternLocator: void matchLevelAndReportImportRef(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.PossibleMatch: char[] getContents()>
<org.eclipse.jdt.internal.core.search.matching.PossibleMatch: void <init>(org.eclipse.jdt.internal.core.search.matching.MatchLocator,org.eclipse.core.resources.IResource,org.eclipse.jdt.internal.core.Openable,org.eclipse.jdt.core.search.SearchDocument,boolean)>
<org.eclipse.jdt.internal.core.search.matching.PossibleMatchSet: org.eclipse.jdt.internal.core.search.matching.PossibleMatch[] getPossibleMatches(org.eclipse.jdt.core.IPackageFragmentRoot[])>
<org.eclipse.jdt.internal.core.search.matching.PossibleMatchSet: void add(org.eclipse.jdt.internal.core.search.matching.PossibleMatch)>
<org.eclipse.jdt.internal.core.search.matching.QualifiedTypeDeclarationPattern: boolean matchesDecodedKey(org.eclipse.jdt.core.search.SearchPattern)>
<org.eclipse.jdt.internal.core.search.matching.QualifiedTypeDeclarationPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.QualifiedTypeDeclarationPattern: void <init>(char[],char[],char,int)>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector$1: char[] getContents()>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector$1: char[] getFileName()>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector$1: char[] getMainTypeName()>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector$1: void <init>(org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector,char[],java.lang.String,char[])>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector: char[][][] collect()>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector: void addToResult(char[][])>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeReferencePattern: boolean matchesDecodedKey(org.eclipse.jdt.core.search.SearchPattern)>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeReferencePattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeReferencePattern: org.eclipse.jdt.internal.core.index.EntryResult[] queryIn(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.search.matching.SuperTypeReferencePattern: void <init>(char[],char[],boolean,int)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationLocator: int resolveLevel(org.eclipse.jdt.internal.compiler.lookup.Binding)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationLocator: int resolveLevelForType(char[],char[],char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern$PackageNameSet: char[] add(char[])>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern$PackageNameSet: void <init>(int)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern$PackageNameSet: void rehash()>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern: boolean matchesDecodedKey(org.eclipse.jdt.core.search.SearchPattern)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern: org.eclipse.jdt.internal.core.index.EntryResult[] queryIn(org.eclipse.jdt.internal.core.index.Index)>
<org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern: void <init>(char[],char[][],char[],char,int)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: int resolveLevel(org.eclipse.jdt.internal.compiler.lookup.Binding)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: int resolveLevelForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: int resolveLevelForTypeOrEnclosingTypes(char[],char[],org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: org.eclipse.jdt.core.IJavaElement findElement(org.eclipse.jdt.core.IJavaElement,int)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: void matchLevelAndReportImportRef(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: void matchReportImportRef(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.lookup.Binding,org.eclipse.jdt.core.IJavaElement,int,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator: void matchReportReference(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.core.IJavaElement,org.eclipse.jdt.internal.compiler.lookup.Binding,int,org.eclipse.jdt.internal.core.search.matching.MatchLocator)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: char[] getIndexKey()>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: java.lang.StringBuffer print(java.lang.StringBuffer)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: org.eclipse.jdt.core.search.SearchPattern getBlankPattern()>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: void <init>(char[],char[],int)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: void <init>(char[],char[],java.lang.String,int)>
<org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern: void decodeIndexKey(char[])>
<org.eclipse.jdt.internal.core.search.matching.VariablePattern: void <init>(int,boolean,boolean,boolean,char[],int)>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: java.lang.Object clone()>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: java.lang.Object get(java.lang.Object[])>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: java.lang.Object put(java.lang.Object[],java.lang.Object)>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: java.lang.Object[] getKey(java.lang.Object[],int)>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: void <init>(int)>
<org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject: void rehash()>
<org.eclipse.jdt.internal.core.util.LRUCache$LRUCacheEntry: void <init>(java.lang.Object,java.lang.Object,int)>
<org.eclipse.jdt.internal.core.util.LRUCache: java.lang.Object get(java.lang.Object)>
<org.eclipse.jdt.internal.core.util.LRUCache: java.lang.Object removeKey(java.lang.Object)>
<org.eclipse.jdt.internal.core.util.LRUCache: void privateAdd(java.lang.Object,java.lang.Object,int)>
<org.eclipse.jdt.internal.core.util.SimpleSet: java.lang.Object add(java.lang.Object)>
<org.eclipse.jdt.internal.core.util.SimpleSet: java.lang.Object remove(java.lang.Object)>
<org.eclipse.jdt.internal.core.util.SimpleSet: void <init>(int)>
<org.eclipse.jdt.internal.core.util.SimpleSet: void rehash()>
<org.eclipse.jdt.internal.core.util.SimpleWordSet: char[] add(char[])>
<org.eclipse.jdt.internal.core.util.SimpleWordSet: void <init>(int)>
<org.eclipse.jdt.internal.core.util.SimpleWordSet: void rehash()>
<org.eclipse.jdt.internal.core.util.Util: void quickSort(java.lang.Object[],int,int,org.eclipse.jdt.internal.core.util.Util$Comparer)>
<org.eclipse.jdt.internal.launching.LaunchingPlugin$JREUpdateJob: void <init>(org.eclipse.jdt.internal.launching.LaunchingPlugin,org.eclipse.jdt.internal.launching.LaunchingPlugin$VMChanges)>
<org.eclipse.jdt.internal.launching.LibraryInfo: java.lang.String getVersion()>
<org.eclipse.jdt.internal.launching.LibraryInfo: java.lang.String[] getBootpath()>
<org.eclipse.jdt.internal.launching.LibraryInfo: java.lang.String[] getEndorsedDirs()>
<org.eclipse.jdt.internal.launching.LibraryInfo: java.lang.String[] getExtensionDirs()>
<org.eclipse.jdt.internal.launching.LibraryInfo: void <init>(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[])>
<org.eclipse.jdt.internal.launching.ListenerList: java.lang.Object[] getListeners()>
<org.eclipse.jdt.internal.launching.ListenerList: void <init>(int)>
<org.eclipse.jdt.internal.launching.ListenerList: void add(java.lang.Object)>
<org.eclipse.jdt.internal.launching.ListenerList: void remove(java.lang.Object)>
<org.eclipse.jdt.internal.launching.Standard11xVM: void <init>(org.eclipse.jdt.launching.IVMInstallType,java.lang.String)>
<org.eclipse.jdt.internal.launching.StandardVM: void <init>(org.eclipse.jdt.launching.IVMInstallType,java.lang.String)>
<org.eclipse.jdt.launching.AbstractVMInstall: java.io.File getInstallLocation()>
<org.eclipse.jdt.launching.AbstractVMInstall: java.lang.String getId()>
<org.eclipse.jdt.launching.AbstractVMInstall: java.lang.String getName()>
<org.eclipse.jdt.launching.AbstractVMInstall: java.lang.String getVMArgs()>
<org.eclipse.jdt.launching.AbstractVMInstall: java.net.URL getJavadocLocation()>
<org.eclipse.jdt.launching.AbstractVMInstall: org.eclipse.jdt.launching.IVMInstallType getVMInstallType()>
<org.eclipse.jdt.launching.AbstractVMInstall: org.eclipse.jdt.launching.LibraryLocation[] getLibraryLocations()>
<org.eclipse.jdt.launching.AbstractVMInstall: void <init>(org.eclipse.jdt.launching.IVMInstallType,java.lang.String)>
<org.eclipse.jdt.launching.AbstractVMInstall: void setInstallLocation(java.io.File)>
<org.eclipse.jdt.launching.AbstractVMInstall: void setJavadocLocation(java.net.URL)>
<org.eclipse.jdt.launching.AbstractVMInstall: void setLibraryLocations(org.eclipse.jdt.launching.LibraryLocation[])>
<org.eclipse.jdt.launching.AbstractVMInstall: void setName(java.lang.String)>
<org.eclipse.jdt.launching.AbstractVMInstall: void setVMArgs(java.lang.String)>
<org.eclipse.jdt.launching.JavaRuntime$1: void <init>(java.lang.String,java.lang.String)>
<org.eclipse.jdt.launching.LibraryLocation: java.net.URL getJavadocLocation()>
<org.eclipse.jdt.launching.LibraryLocation: org.eclipse.core.runtime.IPath getPackageRootPath()>
<org.eclipse.jdt.launching.LibraryLocation: org.eclipse.core.runtime.IPath getSystemLibraryPath()>
<org.eclipse.jdt.launching.LibraryLocation: org.eclipse.core.runtime.IPath getSystemLibrarySourcePath()>
<org.eclipse.jdt.launching.LibraryLocation: void <init>(org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath)>
<org.eclipse.jdt.launching.LibraryLocation: void <init>(org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath,java.net.URL)>
<org.eclipse.jdt.launching.PropertyChangeEvent: java.lang.Object getOldValue()>
<org.eclipse.jdt.launching.PropertyChangeEvent: java.lang.String getProperty()>
<org.eclipse.jdt.launching.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<org.eclipse.jdt.launching.VMStandin: org.eclipse.jdt.launching.IVMInstall convertToRealVM()>
<org.eclipse.jdt.launching.VMStandin: void <init>(org.eclipse.jdt.launching.IVMInstallType,java.lang.String)>
<org.eclipse.osgi.framework.adaptor.BundleProtectionDomain: void <init>(java.security.PermissionCollection)>
<org.eclipse.osgi.framework.adaptor.FilePath: java.lang.String makeRelative(org.eclipse.osgi.framework.adaptor.FilePath)>
<org.eclipse.osgi.framework.adaptor.core.AbstractFrameworkAdaptor$3: org.eclipse.osgi.framework.adaptor.BundleData begin()>
<org.eclipse.osgi.framework.adaptor.core.AbstractFrameworkAdaptor$3: void <init>(org.eclipse.osgi.framework.adaptor.core.AbstractFrameworkAdaptor,org.eclipse.osgi.framework.adaptor.BundleData)>
<org.eclipse.osgi.framework.adaptor.core.BundleEntry$FileBundleEntry: java.net.URL getFileURL()>
<org.eclipse.osgi.framework.adaptor.core.BundleEntry$FileBundleEntry: void <init>(java.io.File,java.lang.String)>
<org.eclipse.osgi.framework.adaptor.core.BundleFile$DirBundleFile: org.eclipse.osgi.framework.adaptor.core.BundleEntry getEntry(java.lang.String)>
<org.eclipse.osgi.framework.adaptor.core.BundleFile$DirBundleFile: void <init>(java.io.File)>
<org.eclipse.osgi.framework.adaptor.core.BundleFile$NestedDirBundleFile: org.eclipse.osgi.framework.adaptor.core.BundleEntry getEntry(java.lang.String)>
<org.eclipse.osgi.framework.adaptor.core.BundleFile$NestedDirBundleFile: void <init>(org.eclipse.osgi.framework.adaptor.core.BundleFile,java.lang.String)>
<org.eclipse.osgi.framework.adaptor.core.BundleFile: java.io.File getBaseFile()>
<org.eclipse.osgi.framework.adaptor.core.BundleFile: void <init>(java.io.File)>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathDomain: void <init>(org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader,java.net.URL,java.security.PermissionCollection)>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathEntry: java.security.ProtectionDomain createProtectionDomain(java.security.ProtectionDomain)>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathEntry: java.security.ProtectionDomain getProtectionDomain()>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathEntry: org.eclipse.osgi.framework.adaptor.core.BundleFile getBundleFile()>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathEntry: void <init>(org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader,org.eclipse.osgi.framework.adaptor.core.BundleFile,java.security.ProtectionDomain)>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$FragmentClasspath: org.eclipse.osgi.framework.adaptor.core.AbstractBundleData getBundleData()>
<org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$FragmentClasspath: void <init>(org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader,org.eclipse.osgi.framework.adaptor.core.DefaultClassLoader$ClasspathEntry[],org.eclipse.osgi.framework.adaptor.core.AbstractBundleData,java.security.ProtectionDomain)>
<org.eclipse.osgi.framework.adaptor.core.InvalidVersion: java.lang.String toString()>
<org.eclipse.osgi.framework.adaptor.core.InvalidVersion: void <init>(java.lang.String)>
<org.eclipse.osgi.framework.eventmgr.EventListeners$ListElement: void <init>(java.lang.Object,java.lang.Object)>
<org.eclipse.osgi.framework.eventmgr.EventListeners: org.eclipse.osgi.framework.eventmgr.EventListeners$ListElement[] getListeners()>
<org.eclipse.osgi.framework.eventmgr.EventListeners: void addListener(java.lang.Object,java.lang.Object)>
<org.eclipse.osgi.framework.eventmgr.EventListeners: void copyList(int)>
<org.eclipse.osgi.framework.eventmgr.EventListeners: void removeListener(java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions$1: void <init>(org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: java.util.Enumeration elements()>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: org.eclipse.osgi.framework.internal.core.BundlePermissionCollection access$0(org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: org.eclipse.osgi.framework.internal.core.BundlePermissionCollection access$1(org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: void <init>(org.eclipse.osgi.framework.internal.core.BundlePermissionCollection)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: void setAssignedPermissions(org.eclipse.osgi.framework.internal.core.BundlePermissionCollection,boolean)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: void setConditionalPermissions(org.eclipse.osgi.framework.internal.core.ConditionalPermissions)>
<org.eclipse.osgi.framework.internal.core.BundleCombinedPermissions: void setRestrictedPermissions(org.eclipse.osgi.framework.internal.core.ConditionalPermissionSet)>
<org.eclipse.osgi.framework.internal.core.BundleLoader$4: java.lang.Object run()>
<org.eclipse.osgi.framework.internal.core.BundleLoader$4: void <init>(org.eclipse.osgi.framework.internal.core.BundleLoader,org.eclipse.osgi.framework.adaptor.BundleProtectionDomain,java.lang.String[])>
<org.eclipse.osgi.framework.internal.core.BundleLoader$5: java.lang.Object run()>
<org.eclipse.osgi.framework.internal.core.BundleLoader$5: void <init>(org.eclipse.osgi.framework.internal.core.BundleLoader,org.eclipse.osgi.framework.adaptor.BundleClassLoader)>
<org.eclipse.osgi.framework.internal.core.BundleNativeCode$Attribute: void addElement(java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.BundleProtectionDomainImpl: void <init>(org.eclipse.osgi.framework.internal.core.AbstractBundle,java.security.PermissionCollection)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: boolean remove(org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: java.util.List getBundles()>
<org.eclipse.osgi.framework.internal.core.BundleRepository: org.eclipse.osgi.framework.internal.core.AbstractBundle getBundle(java.lang.String,org.osgi.framework.Version)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: org.eclipse.osgi.framework.internal.core.AbstractBundle getBundle(long)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: org.eclipse.osgi.framework.internal.core.AbstractBundle[] getBundles(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: void <init>(int,org.eclipse.osgi.framework.internal.core.PackageAdminImpl)>
<org.eclipse.osgi.framework.internal.core.BundleRepository: void add(org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.BundleSource: java.io.InputStream getInputStream()>
<org.eclipse.osgi.framework.internal.core.BundleSource: void <init>(java.io.InputStream)>
<org.eclipse.osgi.framework.internal.core.BundleURLConnection: java.net.URL getFileURL()>
<org.eclipse.osgi.framework.internal.core.BundleURLConnection: void <init>(java.net.URL,org.eclipse.osgi.framework.adaptor.core.BundleEntry)>
<org.eclipse.osgi.framework.internal.core.ConditionalPermissionSet: org.osgi.service.condpermadmin.Condition[] getNeededConditions()>
<org.eclipse.osgi.framework.internal.core.ConditionalPermissionSet: void <init>(org.eclipse.osgi.framework.internal.core.ConditionalPermissionInfoImpl[],org.osgi.service.condpermadmin.Condition[])>
<org.eclipse.osgi.framework.internal.core.ConditionalPermissions: void <init>(org.eclipse.osgi.framework.internal.core.AbstractBundle,org.osgi.service.condpermadmin.ConditionalPermissionAdmin)>
<org.eclipse.osgi.framework.internal.core.ExportedPackageImpl: java.lang.String getName()>
<org.eclipse.osgi.framework.internal.core.ExportedPackageImpl: org.osgi.framework.Bundle getExportingBundle()>
<org.eclipse.osgi.framework.internal.core.ExportedPackageImpl: void <init>(org.eclipse.osgi.service.resolver.ExportPackageDescription,org.eclipse.osgi.framework.internal.core.BundleLoaderProxy)>
<org.eclipse.osgi.framework.internal.core.FilteredSourcePackage: void <init>(java.lang.String,int,org.eclipse.osgi.framework.internal.core.BundleLoaderProxy,java.lang.String,java.lang.String,java.lang.String[])>
<org.eclipse.osgi.framework.internal.core.Framework$2: java.lang.Object run()>
<org.eclipse.osgi.framework.internal.core.Framework$2: void <init>(org.eclipse.osgi.framework.internal.core.Framework,java.io.InputStream,java.lang.String,java.security.AccessControlContext)>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet$KeyedHashSetIterator: java.lang.Object next()>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet$KeyedHashSetIterator: void <init>(org.eclipse.osgi.framework.internal.core.KeyedHashSet)>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: boolean add(org.eclipse.osgi.framework.internal.core.KeyedElement)>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: java.lang.Object[] elements(java.lang.Object[])>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: java.util.Iterator iterator()>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: org.eclipse.osgi.framework.internal.core.KeyedElement getByKey(java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: void <init>(int,boolean)>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: void clear()>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: void expand()>
<org.eclipse.osgi.framework.internal.core.KeyedHashSet: void rehashTo(int)>
<org.eclipse.osgi.framework.internal.core.MultiSourcePackage: org.eclipse.osgi.framework.internal.core.SingleSourcePackage[] getSuppliers()>
<org.eclipse.osgi.framework.internal.core.MultiSourcePackage: void <init>(java.lang.String,org.eclipse.osgi.framework.internal.core.SingleSourcePackage[])>
<org.eclipse.osgi.framework.internal.core.PackageAdminImpl$2: java.lang.Object run()>
<org.eclipse.osgi.framework.internal.core.PackageAdminImpl$2: void <init>(org.eclipse.osgi.framework.internal.core.PackageAdminImpl,java.lang.Class)>
<org.eclipse.osgi.framework.internal.core.PackageAdminImpl: org.osgi.framework.Bundle getBundle(java.lang.Class)>
<org.eclipse.osgi.framework.internal.core.PackageAdminImpl: org.osgi.framework.Bundle[] getFragments(org.osgi.framework.Bundle)>
<org.eclipse.osgi.framework.internal.core.PackageAdminImpl: void <init>(org.eclipse.osgi.framework.internal.core.Framework)>
<org.eclipse.osgi.framework.internal.core.PackageSource: boolean hasCommonSource(org.eclipse.osgi.framework.internal.core.PackageSource)>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.eclipse.osgi.framework.adaptor.BundleProtectionDomain createProtectionDomain(org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.eclipse.osgi.framework.internal.core.BundlePermissionCollection createDefaultAssignedPermissions(org.osgi.service.permissionadmin.PermissionInfo[])>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.eclipse.osgi.framework.internal.core.BundlePermissionCollection getAssignedPermissions(org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.eclipse.osgi.framework.internal.core.BundlePermissionCollection getImpliedPermissions(org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.osgi.service.permissionadmin.PermissionInfo[] getDefaultPermissions()>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: org.osgi.service.permissionadmin.PermissionInfo[] getPermissions(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.PermissionAdminImpl: void <init>(org.eclipse.osgi.framework.internal.core.Framework,org.eclipse.osgi.framework.adaptor.PermissionStorage)>
<org.eclipse.osgi.framework.internal.core.ReferenceInputStream: java.net.URL getReference()>
<org.eclipse.osgi.framework.internal.core.ReferenceInputStream: void <init>(java.net.URL)>
<org.eclipse.osgi.framework.internal.core.SecurePermissionStorage: java.lang.Object run()>
<org.eclipse.osgi.framework.internal.core.SecurePermissionStorage: java.lang.String[] getPermissionData(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.SecurePermissionStorage: void <init>(org.eclipse.osgi.framework.adaptor.PermissionStorage)>
<org.eclipse.osgi.framework.internal.core.ServiceReferenceImpl: java.lang.Object getProperty(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.ServiceReferenceImpl: java.lang.String toString()>
<org.eclipse.osgi.framework.internal.core.ServiceReferenceImpl: void <init>(org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl)>
<org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl$Properties: java.lang.Object cloneValue(java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl$Properties: java.lang.Object getProperty(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl$Properties: java.lang.Object setProperty(java.lang.String,java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl$Properties: java.lang.String toString()>
<org.eclipse.osgi.framework.internal.core.ServiceRegistrationImpl$Properties: java.lang.String[] getPropertyKeys()>
<org.eclipse.osgi.framework.internal.core.SingleSourcePackage: org.eclipse.osgi.framework.internal.core.SingleSourcePackage[] getSuppliers()>
<org.eclipse.osgi.framework.internal.core.SingleSourcePackage: void <init>(java.lang.String,int,org.eclipse.osgi.framework.internal.core.BundleLoaderProxy)>
<org.eclipse.osgi.framework.internal.core.StartLevelEvent: org.eclipse.osgi.framework.internal.core.AbstractBundle getBundle()>
<org.eclipse.osgi.framework.internal.core.StartLevelEvent: void <init>(int,int,org.eclipse.osgi.framework.internal.core.AbstractBundle)>
<org.eclipse.osgi.framework.internal.core.StartLevelImpl: void <init>(org.osgi.framework.Bundle,org.eclipse.osgi.framework.internal.core.Framework)>
<org.eclipse.osgi.framework.internal.core.StartLevelManager: java.lang.Object getService(org.osgi.framework.Bundle,org.osgi.framework.ServiceRegistration)>
<org.eclipse.osgi.framework.internal.core.SystemBundleActivator: org.osgi.framework.ServiceRegistration register(java.lang.String,java.lang.Object)>
<org.eclipse.osgi.framework.internal.core.SystemBundleActivator: void start(org.osgi.framework.BundleContext)>
<org.eclipse.osgi.framework.internal.core.SystemBundleData$1: void <init>(org.eclipse.osgi.framework.internal.core.SystemBundleData,java.io.File)>
<org.eclipse.osgi.framework.internal.core.SystemPolicy: java.lang.Class loadClass(java.lang.String)>
<org.eclipse.osgi.framework.internal.core.SystemPolicy: void <init>(java.lang.ClassLoader)>
<org.eclipse.osgi.framework.internal.protocol.reference.ReferenceURLConnection: void <init>(java.net.URL)>
<org.eclipse.osgi.framework.log.FrameworkLogEntry: java.lang.String getEntry()>
<org.eclipse.osgi.framework.log.FrameworkLogEntry: java.lang.String getMessage()>
<org.eclipse.osgi.framework.log.FrameworkLogEntry: java.lang.Throwable getThrowable()>
<org.eclipse.osgi.framework.log.FrameworkLogEntry: org.eclipse.osgi.framework.log.FrameworkLogEntry[] getChildren()>
<org.eclipse.osgi.framework.log.FrameworkLogEntry: void <init>(java.lang.String,java.lang.String,int,java.lang.Throwable,org.eclipse.osgi.framework.log.FrameworkLogEntry[])>
<org.eclipse.osgi.framework.util.Headers$ArrayEnumeration: java.lang.Object nextElement()>
<org.eclipse.osgi.framework.util.Headers$ArrayEnumeration: void <init>(org.eclipse.osgi.framework.util.Headers,java.lang.Object[],int)>
<org.eclipse.osgi.framework.util.Headers: java.lang.Object get(java.lang.Object)>
<org.eclipse.osgi.framework.util.Headers: java.lang.Object remove(int)>
<org.eclipse.osgi.framework.util.Headers: java.lang.Object set(java.lang.Object,java.lang.Object)>
<org.eclipse.osgi.framework.util.Headers: java.util.Enumeration keys()>
<org.eclipse.osgi.framework.util.Headers: void <init>(int)>
<org.eclipse.osgi.framework.util.Headers: void <init>(java.util.Dictionary)>
<org.eclipse.osgi.framework.util.Headers: void add(java.lang.Object,java.lang.Object)>
<org.eclipse.osgi.framework.util.SecureAction$13: java.lang.Object run()>
<org.eclipse.osgi.framework.util.SecureAction$13: void <init>(org.eclipse.osgi.framework.util.SecureAction,java.lang.Runnable,java.lang.String)>
<org.eclipse.osgi.framework.util.SecureAction$14: java.lang.Object run()>
<org.eclipse.osgi.framework.util.SecureAction$14: void <init>(org.eclipse.osgi.framework.util.SecureAction,org.osgi.framework.BundleContext,org.osgi.framework.ServiceReference)>
<org.eclipse.osgi.internal.module.ResolverExport: java.lang.String getName()>
<org.eclipse.osgi.internal.module.ResolverExport: java.lang.String toString()>
<org.eclipse.osgi.internal.module.ResolverExport: org.eclipse.osgi.internal.module.ResolverBundle getExporter()>
<org.eclipse.osgi.internal.module.ResolverExport: org.eclipse.osgi.internal.module.ResolverExport getRoot()>
<org.eclipse.osgi.internal.module.ResolverExport: org.eclipse.osgi.internal.module.ResolverExport getRootRequires(org.eclipse.osgi.internal.module.ResolverExport,org.eclipse.osgi.internal.module.ResolverBundle)>
<org.eclipse.osgi.internal.module.ResolverExport: org.eclipse.osgi.service.resolver.BundleDescription getBundle()>
<org.eclipse.osgi.internal.module.ResolverExport: org.eclipse.osgi.service.resolver.ExportPackageDescription getExportPackageDescription()>
<org.eclipse.osgi.internal.module.ResolverExport: org.osgi.framework.Version getVersion()>
<org.eclipse.osgi.internal.module.ResolverExport: void <init>(org.eclipse.osgi.internal.module.ResolverBundle,org.eclipse.osgi.service.resolver.ExportPackageDescription)>
<org.eclipse.osgi.internal.module.ResolverExport: void <init>(org.eclipse.osgi.internal.module.ResolverBundle,org.eclipse.osgi.service.resolver.ExportPackageDescription,boolean)>
<org.eclipse.osgi.internal.module.ResolverImport: java.lang.String getName()>
<org.eclipse.osgi.internal.module.ResolverImport: java.lang.String toString()>
<org.eclipse.osgi.internal.module.ResolverImport: org.eclipse.osgi.internal.module.ResolverBundle getBundle()>
<org.eclipse.osgi.internal.module.ResolverImport: org.eclipse.osgi.internal.module.ResolverExport getMatchingExport()>
<org.eclipse.osgi.internal.module.ResolverImport: org.eclipse.osgi.service.resolver.BundleDescription getActualBundle()>
<org.eclipse.osgi.internal.module.ResolverImport: org.eclipse.osgi.service.resolver.ImportPackageSpecification getImportPackageSpecification()>
<org.eclipse.osgi.internal.module.ResolverImport: void <init>(org.eclipse.osgi.internal.module.ResolverBundle,org.eclipse.osgi.service.resolver.ImportPackageSpecification)>
<org.eclipse.osgi.internal.module.ResolverImport: void setMatchingExport(org.eclipse.osgi.internal.module.ResolverExport)>
<org.eclipse.osgi.internal.module.ResolverImport: void setName(java.lang.String)>
<org.eclipse.osgi.internal.module.VersionHashMap: java.lang.Object put(org.eclipse.osgi.internal.module.VersionSupplier)>
<org.eclipse.osgi.internal.module.VersionHashMap: java.lang.Object remove(org.eclipse.osgi.internal.module.VersionSupplier)>
<org.eclipse.osgi.internal.module.VersionHashMap: org.eclipse.osgi.internal.module.VersionSupplier[] add(int,org.eclipse.osgi.internal.module.VersionSupplier,org.eclipse.osgi.internal.module.VersionSupplier[])>
<org.eclipse.osgi.internal.module.VersionHashMap: org.eclipse.osgi.internal.module.VersionSupplier[] getArray(java.lang.String)>
<org.eclipse.osgi.internal.module.VersionHashMap: void remove(org.eclipse.osgi.internal.module.VersionSupplier[],java.lang.String,int)>
<org.eclipse.osgi.internal.module.VersionHashMap: void reorder()>
<org.eclipse.osgi.internal.profile.DefaultProfileLogger$TimeEntry: void <init>(org.eclipse.osgi.internal.profile.DefaultProfileLogger)>
<org.eclipse.osgi.internal.profile.DefaultProfileLogger: org.eclipse.osgi.internal.profile.DefaultProfileLogger$TimeEntry findCompareEntry(int,java.lang.String,int)>
<org.eclipse.osgi.internal.profile.DefaultProfileLogger: org.eclipse.osgi.internal.profile.DefaultProfileLogger$TimeEntry timeEntryFactory()>
<org.eclipse.osgi.internal.profile.DefaultProfileLogger: void <init>()>
<org.eclipse.osgi.internal.profile.DefaultProfileLogger: void logTime(int,java.lang.String,java.lang.String,java.lang.String)>
<org.eclipse.osgi.internal.resolver.BaseDescriptionImpl: java.lang.String getName()>
<org.eclipse.osgi.internal.resolver.BaseDescriptionImpl: org.osgi.framework.Version getVersion()>
<org.eclipse.osgi.internal.resolver.BaseDescriptionImpl: void setName(java.lang.String)>
<org.eclipse.osgi.internal.resolver.BaseDescriptionImpl: void setVersion(org.osgi.framework.Version)>
<org.eclipse.osgi.internal.resolver.BundleDeltaImpl: org.eclipse.osgi.service.resolver.BundleDescription getBundle()>
<org.eclipse.osgi.internal.resolver.BundleDeltaImpl: void <init>(org.eclipse.osgi.service.resolver.BundleDescription,int)>
<org.eclipse.osgi.internal.resolver.BundleDeltaImpl: void setBundle(org.eclipse.osgi.service.resolver.BundleDescription)>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: java.lang.Object getDirective(java.lang.String)>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: java.lang.Object setDirective(java.lang.String,java.lang.Object)>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: java.util.Map getAttributes()>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: java.util.Map getDirectives()>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: org.eclipse.osgi.service.resolver.BundleDescription getExporter()>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: void setAttributes(java.util.Map)>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: void setDirectives(java.util.Map)>
<org.eclipse.osgi.internal.resolver.ExportPackageDescriptionImpl: void setExporter(org.eclipse.osgi.service.resolver.BundleDescription)>
<org.eclipse.osgi.internal.resolver.HostSpecificationImpl: org.eclipse.osgi.service.resolver.BundleDescription[] getHosts()>
<org.eclipse.osgi.internal.resolver.HostSpecificationImpl: void setHosts(org.eclipse.osgi.service.resolver.BundleDescription[])>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: boolean isSatisfiedBy(org.eclipse.osgi.service.resolver.BaseDescription)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: java.lang.Object getDirective(java.lang.String)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: java.lang.Object setDirective(java.lang.String,java.lang.Object)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: java.lang.String getBundleSymbolicName()>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: java.util.Map getAttributes()>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: java.util.Map getDirectives()>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: org.eclipse.osgi.service.resolver.VersionRange getBundleVersionRange()>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: void setAttributes(java.util.Map)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: void setBundleSymbolicName(java.lang.String)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: void setBundleVersionRange(org.eclipse.osgi.service.resolver.VersionRange)>
<org.eclipse.osgi.internal.resolver.ImportPackageSpecificationImpl: void setDirectives(java.util.Map)>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: org.eclipse.osgi.service.resolver.BundleDelta[] getChanges()>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: void recordBundleAdded(org.eclipse.osgi.internal.resolver.BundleDescriptionImpl)>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: void recordBundleRemovalComplete(org.eclipse.osgi.internal.resolver.BundleDescriptionImpl)>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: void recordBundleRemovalPending(org.eclipse.osgi.internal.resolver.BundleDescriptionImpl)>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: void recordBundleRemoved(org.eclipse.osgi.internal.resolver.BundleDescriptionImpl)>
<org.eclipse.osgi.internal.resolver.StateDeltaImpl: void recordBundleResolved(org.eclipse.osgi.internal.resolver.BundleDescriptionImpl,boolean)>
<org.eclipse.osgi.internal.resolver.StateImpl: boolean basicAddBundle(org.eclipse.osgi.service.resolver.BundleDescription)>
<org.eclipse.osgi.internal.resolver.StateImpl: org.eclipse.osgi.service.resolver.BundleDescription[] getBundles(java.lang.String)>
<org.eclipse.osgi.internal.resolver.StateImpl: org.eclipse.osgi.service.resolver.ExportPackageDescription[] getExportedPackages()>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: java.lang.String getName()>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: org.eclipse.osgi.service.resolver.BaseDescription getSupplier()>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: org.eclipse.osgi.service.resolver.BundleDescription getBundle()>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: org.eclipse.osgi.service.resolver.VersionRange getVersionRange()>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: void setBundle(org.eclipse.osgi.service.resolver.BundleDescription)>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: void setName(java.lang.String)>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: void setSupplier(org.eclipse.osgi.service.resolver.BaseDescription)>
<org.eclipse.osgi.internal.resolver.VersionConstraintImpl: void setVersionRange(org.eclipse.osgi.service.resolver.VersionRange)>
<org.eclipse.osgi.service.pluginconversion.PluginConversionException: java.lang.Throwable getCause()>
<org.eclipse.osgi.service.pluginconversion.PluginConversionException: void <init>()>
<org.eclipse.osgi.service.pluginconversion.PluginConversionException: void <init>(java.lang.String)>
<org.eclipse.osgi.service.pluginconversion.PluginConversionException: void <init>(java.lang.String,java.lang.Throwable)>
<org.eclipse.osgi.util.NLS: java.lang.String bind(java.lang.String,java.lang.Object)>
<org.eclipse.update.internal.configurator.BundleManifest: org.eclipse.update.internal.configurator.PluginEntry getPluginEntry()>
<org.eclipse.update.internal.configurator.BundleManifest: void <init>(java.io.InputStream,java.lang.String)>
<org.eclipse.update.internal.configurator.BundleManifest: void parse(java.io.InputStream)>
<org.eclipse.update.internal.configurator.PluginEntry: java.lang.String getPluginIdentifier()>
<org.eclipse.update.internal.configurator.PluginEntry: java.lang.String getPluginVersion()>
<org.eclipse.update.internal.configurator.PluginEntry: java.lang.String getURL()>
<org.eclipse.update.internal.configurator.PluginEntry: org.eclipse.update.internal.configurator.VersionedIdentifier getVersionedIdentifier()>
<org.eclipse.update.internal.configurator.PluginEntry: void setPluginIdentifier(java.lang.String)>
<org.eclipse.update.internal.configurator.PluginEntry: void setPluginVersion(java.lang.String)>
<org.eclipse.update.internal.configurator.PluginEntry: void setURL(java.lang.String)>
<org.eclipse.update.internal.configurator.PluginParser: org.eclipse.update.internal.configurator.PluginEntry parse(java.io.File)>
<org.eclipse.update.internal.configurator.PluginParser: org.eclipse.update.internal.configurator.PluginEntry parse(java.io.InputStream,java.lang.String)>
<org.eclipse.update.internal.configurator.SitePolicy: java.lang.String[] getList()>
<org.eclipse.update.internal.configurator.SitePolicy: void <init>(int,java.lang.String[])>
<org.eclipse.update.internal.configurator.VersionedIdentifier: java.lang.String getVersion()>
<org.eclipse.update.internal.configurator.VersionedIdentifier: void <init>(java.lang.String,java.lang.String)>
<org.osgi.framework.BundleEvent: org.osgi.framework.Bundle getBundle()>
<org.osgi.framework.BundleEvent: void <init>(int,org.osgi.framework.Bundle)>
<org.osgi.framework.BundleException: java.lang.Throwable getCause()>
<org.osgi.framework.BundleException: java.lang.Throwable getNestedException()>
<org.osgi.framework.BundleException: void <init>(java.lang.String)>
<org.osgi.framework.BundleException: void <init>(java.lang.String,java.lang.Throwable)>
<org.osgi.framework.FrameworkEvent: java.lang.Throwable getThrowable()>
<org.osgi.framework.FrameworkEvent: org.osgi.framework.Bundle getBundle()>
<org.osgi.framework.FrameworkEvent: void <init>(int,org.osgi.framework.Bundle,java.lang.Throwable)>
<org.osgi.framework.InvalidSyntaxException: void <init>(java.lang.String,java.lang.String)>
<org.osgi.framework.ServiceEvent: org.osgi.framework.ServiceReference getServiceReference()>
<org.osgi.framework.ServiceEvent: void <init>(int,org.osgi.framework.ServiceReference)>
<org.osgi.service.prefs.BackingStoreException: void <init>(java.lang.String)>
<org.osgi.util.tracker.ServiceTracker$AllTracked: void <init>(org.osgi.util.tracker.ServiceTracker)>
<org.osgi.util.tracker.ServiceTracker$Tracked: void <init>(org.osgi.util.tracker.ServiceTracker)>
<org.osgi.util.tracker.ServiceTracker$Tracked: void track(org.osgi.framework.ServiceReference)>
<org.osgi.util.tracker.ServiceTracker$Tracked: void trackAdding(org.osgi.framework.ServiceReference)>
<org.xml.sax.SAXException: java.lang.String getMessage()>
<org.xml.sax.SAXException: void <init>(java.lang.String)>
<sun.jkernel.BackgroundDownloader: void startBackgroundDownloads()>
<sun.jkernel.Bundle$1: java.lang.Thread newThread(java.lang.Runnable)>
<sun.jkernel.KernelError: void <init>()>
<sun.jkernel.KernelError: void <init>(java.lang.String)>
<sun.misc.CEFormatException: void <init>(java.lang.String)>
<sun.misc.InvalidJarIndexException: void <init>()>
<sun.misc.InvalidJarIndexException: void <init>(java.lang.String)>
<sun.misc.Launcher$ExtClassLoader$1: java.lang.Object run()>
<sun.misc.Launcher$ExtClassLoader$1: void <init>(java.io.File[])>
<sun.misc.Launcher$ExtClassLoader: void <init>(java.io.File[])>
<sun.misc.ServiceConfigurationError: void <init>(java.lang.String)>
<sun.misc.URLClassPath$FileLoader$1: java.net.URL getCodeSourceURL()>
<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$FileLoader$1: void <init>(sun.misc.URLClassPath$FileLoader,java.lang.String,java.net.URL,java.io.File)>
<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>
<sun.misc.URLClassPath$JarLoader$2: java.security.CodeSigner[] getCodeSigners()>
<sun.misc.URLClassPath$JarLoader$2: void <init>(sun.misc.URLClassPath$JarLoader,java.lang.String,java.net.URL,java.util.jar.JarEntry)>
<sun.misc.URLClassPath$Loader$1: java.io.InputStream getInputStream()>
<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$Loader$1: void <init>(sun.misc.URLClassPath$Loader,java.lang.String,java.net.URL,java.net.URLConnection)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>
<sun.net.ProgressSource: java.lang.String getMethod()>
<sun.net.ProgressSource: java.net.URL getURL()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,int)>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,int)>
<sun.net.www.URLConnection: void <init>(java.net.URL)>
<sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()>
<sun.net.www.protocol.file.FileURLConnection: void <init>(java.net.URL,java.io.File)>
<sun.net.www.protocol.file.FileURLConnection: void connect()>
<sun.net.www.protocol.file.Handler: java.net.URLConnection createFileURLConnection(java.net.URL,java.io.File)>
<sun.net.www.protocol.file.Handler: java.net.URLConnection openConnection(java.net.URL)>
<sun.net.www.protocol.file.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel open(java.io.FileDescriptor,boolean,boolean,java.lang.Object,boolean)>
<sun.nio.ch.FileChannelImpl: void <init>(java.io.FileDescriptor,boolean,boolean,java.lang.Object,boolean)>
<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>
<sun.nio.cs.ISO_8859_1$Decoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>
<sun.nio.cs.ISO_8859_1$Decoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.ISO_8859_1$Decoder: void <init>(java.nio.charset.Charset,sun.nio.cs.ISO_8859_1$1)>
<sun.nio.cs.ISO_8859_1$Encoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.ISO_8859_1$Encoder: void <init>(java.nio.charset.Charset,sun.nio.cs.ISO_8859_1$1)>
<sun.nio.cs.StandardCharsets$Cache: void init(java.lang.Object[])>
<sun.nio.cs.StreamDecoder: int implRead(char[],int,int)>
<sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>
<sun.nio.cs.US_ASCII$Decoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.reflect.BootstrapConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.DelegatingConstructorAccessorImpl: void <init>(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.DelegatingConstructorAccessorImpl: void setDelegate(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.DelegatingMethodAccessorImpl: void <init>(sun.reflect.MethodAccessorImpl)>
<sun.reflect.DelegatingMethodAccessorImpl: void setDelegate(sun.reflect.MethodAccessorImpl)>
<sun.reflect.NativeConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.NativeConstructorAccessorImpl: void setParent(sun.reflect.DelegatingConstructorAccessorImpl)>
<sun.reflect.NativeMethodAccessorImpl: void <init>(java.lang.reflect.Method)>
<sun.reflect.NativeMethodAccessorImpl: void setParent(sun.reflect.DelegatingMethodAccessorImpl)>
<sun.reflect.ReflectionFactory: sun.reflect.ConstructorAccessor newConstructorAccessor(java.lang.reflect.Constructor)>
<sun.reflect.ReflectionFactory: sun.reflect.FieldAccessor newFieldAccessor(java.lang.reflect.Field,boolean)>
<sun.reflect.ReflectionFactory: sun.reflect.MethodAccessor newMethodAccessor(java.lang.reflect.Method)>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeByteFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeFieldAccessorFactory: sun.reflect.FieldAccessor newFieldAccessor(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeLongFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.reflect.UnsafeShortFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.security.action.GetPropertyAction: java.lang.Object run()>
<sun.security.action.GetPropertyAction: java.lang.String run()>
<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>
<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object)>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object,sun.security.jca.GetInstance$1)>
<sun.security.jca.ProviderConfig$4: java.lang.Object run()>
<sun.security.jca.ProviderConfig$4: void <init>(java.lang.String)>
<sun.security.jca.ProviderList$ServiceList$1: void <init>(sun.security.jca.ProviderList$ServiceList)>
<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.util.List)>
<sun.security.jca.Providers: java.lang.Object startJarVerification()>
<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>
<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>
<sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>
<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>
<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>
<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>
<sun.security.pkcs.SignerInfo: java.security.cert.X509Certificate getCertificate(sun.security.pkcs.PKCS7)>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>
<sun.security.provider.PolicyFile$PolicyEntry: java.security.CodeSource getCodeSource()>
<sun.security.provider.PolicyFile$PolicyEntry: java.util.List getPrincipals()>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource)>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource,java.util.List)>
<sun.security.provider.SeedGenerator$ThreadedSeedGenerator$1: java.lang.Object run()>
<sun.security.provider.SeedGenerator$ThreadedSeedGenerator$1: void <init>(sun.security.provider.SeedGenerator$ThreadedSeedGenerator,java.lang.ThreadGroup[])>
<sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>
<sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.lang.Object run()>
<sun.security.provider.SeedGenerator$URLSeedGenerator$1: void <init>(sun.security.provider.SeedGenerator$URLSeedGenerator,java.net.URL)>
<sun.security.util.ManifestDigester$Entry: byte[] digest(java.security.MessageDigest)>
<sun.security.util.ManifestDigester$Entry: byte[] digestWorkaround(java.security.MessageDigest)>
<sun.security.util.ObjectIdentifier: java.lang.String toString()>
<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>
<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>
<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>
<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>
<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>
<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.x509.DNSName: java.lang.String getName()>
<sun.security.x509.DNSName: void <init>(java.lang.String)>
<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>
<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: java.math.BigInteger getSerial()>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>
<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>
<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>
<sun.text.normalizer.ICUData$1: java.lang.Object run()>
<sun.text.normalizer.ICUData$1: void <init>(java.lang.Class,java.lang.String)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet)>
<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object toV(java.lang.Object)>
<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>
<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>
<sun.util.ResourceBundleEnumeration: java.lang.String nextElement()>
<sun.util.ResourceBundleEnumeration: void <init>(java.util.Set,java.util.Enumeration)>
<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>
<sun.util.calendar.BaseCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: java.lang.Object clone()>
<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>
<sun.util.calendar.CalendarDate: void <init>(java.util.TimeZone)>
<sun.util.calendar.Era: java.lang.String getAbbreviation()>
<sun.util.calendar.Era: java.lang.String getName()>
<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date addYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>
