<beaver.Parser$Exception: void <init>(java.lang.String)>
<beaver.Parser$Simulator: void <init>(beaver.Parser)>
<beaver.Parser$Simulator: void <init>(beaver.Parser,beaver.Parser$1)>
<beaver.Parser$TokenStream: void <init>(beaver.Parser,beaver.Scanner)>
<beaver.Parser: void <init>(beaver.ParsingTables)>
<beaver.Scanner$Exception: void <init>(int,int,java.lang.String)>
<beaver.Symbol: void <init>()>
<beaver.Symbol: void <init>(java.lang.Object)>
<beaver.Symbol: void <init>(short,int,int,int,java.lang.Object)>
<jas.AnnotElemValPair: void <init>(java.lang.String,char,jas.AnnotationAttr)>
<jas.AnnotationAttr: void <init>(java.lang.String,java.util.ArrayList)>
<jas.AnnotationDefaultAttr: void <init>(jas.ElemValPair)>
<jas.ArrayElemValPair: void <init>(java.lang.String,char,java.util.ArrayList)>
<jas.CPOperand: void <init>(jas.CP)>
<jas.CatchEntry: void <init>(jas.Label,jas.Label,jas.Label,jas.CP)>
<jas.ClassEnv: void addEnclMethAttr(jas.EnclMethAttr)>
<jas.ClassEnv: void finishInnerClassAttr(jas.InnerClassAttr)>
<jas.ClassEnv: void setClass(jas.CP)>
<jas.ClassEnv: void setClassAnnotAttrInvis(jas.VisibilityAnnotationAttr)>
<jas.ClassEnv: void setClassAnnotAttrVis(jas.VisibilityAnnotationAttr)>
<jas.ClassEnv: void setClassDepr(jas.DeprecatedAttr)>
<jas.ClassEnv: void setClassSigAttr(jas.SignatureAttr)>
<jas.ClassEnv: void setSuperClass(jas.CP)>
<jas.CodeAttr: void setCatchtable(jas.Catchtable)>
<jas.CodeAttr: void setLabelTable(java.util.Hashtable)>
<jas.CodeAttr: void setLineTable(jas.LineTableAttr)>
<jas.CodeAttr: void setLocalVarTable(jas.LocalVarTableAttr)>
<jas.ConstAttr: void <init>(jas.CP)>
<jas.GenericAttr: void <init>(java.lang.String,byte[])>
<jas.InvokeinterfaceOperand: void <init>(jas.CP,int)>
<jas.LabelOperand: void <init>(jas.Label,jas.Insn)>
<jas.LabelOperand: void <init>(jas.Label,jas.Insn,boolean)>
<jas.LdcOperand: void <init>(jas.Insn,jas.CP)>
<jas.LdcOperand: void <init>(jas.Insn,jas.CP,boolean)>
<jas.LocalVarEntry: void <init>(jas.Label,jas.Label,java.lang.String,java.lang.String,int)>
<jas.LookupswitchOperand: void <init>(jas.Insn,jas.Label,int[],jas.Label[])>
<jas.Method: void <init>(short,jas.CP,jas.CP,jas.CodeAttr,jas.ExceptAttr)>
<jas.Method: void <init>(short,jas.CP,jas.CP,jas.CodeAttr,jas.ExceptAttr,jas.SyntheticAttr)>
<jas.Method: void addAnnotationDef(jas.AnnotationDefaultAttr)>
<jas.Method: void addDeprecatedAttr(jas.DeprecatedAttr)>
<jas.Method: void addInvisAnnotationAttr(jas.VisibilityAnnotationAttr)>
<jas.Method: void addInvisParamAnnotationAttr(jas.ParameterVisibilityAnnotationAttr)>
<jas.Method: void addSignatureAttr(jas.SignatureAttr)>
<jas.Method: void addVisAnnotationAttr(jas.VisibilityAnnotationAttr)>
<jas.Method: void addVisParamAnnotationAttr(jas.ParameterVisibilityAnnotationAttr)>
<jas.MultiarrayOperand: void <init>(jas.CP,int)>
<jas.ParameterVisibilityAnnotationAttr: void <init>(java.lang.String,java.util.ArrayList)>
<jas.TableswitchOperand: void <init>(jas.Insn,int,int,jas.Label,jas.Label[])>
<jas.Var: void <init>(short,jas.CP,jas.CP,jas.ConstAttr)>
<jas.Var: void <init>(short,jas.CP,jas.CP,jas.ConstAttr,jas.SyntheticAttr)>
<jas.Var: void addDeprecatedAttr(jas.DeprecatedAttr)>
<jas.Var: void addSignatureAttr(jas.SignatureAttr)>
<jas.Var: void addVisibilityAnnotationAttrInvis(jas.VisibilityAnnotationAttr)>
<jas.Var: void addVisibilityAnnotationAttrVis(jas.VisibilityAnnotationAttr)>
<jas.VisibilityAnnotationAttr: void <init>(java.lang.String,java.util.ArrayList)>
<jas.jasError: void <init>(java.lang.String)>
<jasmin.CUP$parser$actions: void <init>(jasmin.parser)>
<jasmin.Scanner: void <init>(java.io.InputStream)>
<jasmin.parser: void <init>(jasmin.ClassFile,jasmin.Scanner)>
<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<java.io.EOFException: void <init>()>
<java.io.EOFException: void <init>(java.lang.String)>
<java.io.ExpiringCache$1: void <init>(java.io.ExpiringCache)>
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
<java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
<java.io.FilePermission$1: void <init>(java.io.FilePermission)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<java.io.FilterReader: void <init>(java.io.Reader)>
<java.io.FilterWriter: void <init>(java.io.Writer)>
<java.io.IOException: void <init>()>
<java.io.IOException: void <init>(java.lang.String)>
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.InvalidClassException: void <init>(java.lang.String)>
<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>
<java.io.InvalidObjectException: void <init>(java.lang.String)>
<java.io.LineNumberReader: void <init>(java.io.Reader)>
<java.io.NotSerializableException: void <init>(java.lang.String)>
<java.io.ObjectInputStream$1: void <init>(java.lang.Class)>
<java.io.ObjectInputStream$BlockDataInputStream: void <init>(java.io.ObjectInputStream,java.io.InputStream)>
<java.io.ObjectInputStream$PeekInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream$ValidationList$1: void <init>(java.io.ObjectInputStream$ValidationList)>
<java.io.ObjectOutputStream$1: void <init>(java.lang.Class)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void <init>(java.io.OutputStream)>
<java.io.ObjectStreamClass$1: void <init>(java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass$2: void <init>(java.io.ObjectStreamClass,java.lang.Class)>
<java.io.ObjectStreamClass$ClassDataSlot: void <init>(java.io.ObjectStreamClass,boolean)>
<java.io.ObjectStreamClass$EntryFuture$1: void <init>(java.io.ObjectStreamClass$EntryFuture)>
<java.io.ObjectStreamClass$EntryFuture: boolean set(java.lang.Object)>
<java.io.ObjectStreamClass$FieldReflector: void <init>(java.io.ObjectStreamField[])>
<java.io.ObjectStreamClass$FieldReflectorKey: void <init>(java.lang.Class,java.io.ObjectStreamField[],java.lang.ref.ReferenceQueue)>
<java.io.ObjectStreamClass$MemberSignature: void <init>(java.lang.reflect.Constructor)>
<java.io.ObjectStreamClass$MemberSignature: void <init>(java.lang.reflect.Field)>
<java.io.ObjectStreamClass$MemberSignature: void <init>(java.lang.reflect.Method)>
<java.io.ObjectStreamClass$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>
<java.io.ObjectStreamClass: java.io.InvalidClassException access$1002(java.io.ObjectStreamClass,java.io.InvalidClassException)>
<java.io.ObjectStreamClass: java.io.InvalidClassException access$1102(java.io.ObjectStreamClass,java.io.InvalidClassException)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] access$602(java.io.ObjectStreamClass,java.io.ObjectStreamField[])>
<java.io.ObjectStreamClass: java.lang.Long access$502(java.io.ObjectStreamClass,java.lang.Long)>
<java.io.ObjectStreamClass: java.lang.reflect.Constructor access$1302(java.io.ObjectStreamClass,java.lang.reflect.Constructor)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1602(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1802(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1902(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$2102(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$2302(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: void <init>(java.lang.Class)>
<java.io.ObjectStreamClass: void initNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: void initProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.io.ObjectStreamException: void <init>()>
<java.io.ObjectStreamException: void <init>(java.lang.String)>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>
<java.io.ObjectStreamField: void <init>(java.lang.reflect.Field,boolean,boolean)>
<java.io.OptionalDataException: void <init>(boolean)>
<java.io.OptionalDataException: void <init>(int)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<java.io.PrintStream: void <init>(boolean,java.io.OutputStream)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintStream: void init(java.io.OutputStreamWriter)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>
<java.io.PushbackReader: void <init>(java.io.Reader,int)>
<java.io.Reader: void <init>()>
<java.io.Reader: void <init>(java.lang.Object)>
<java.io.SerialCallbackContext: void <init>(java.lang.Object,java.io.ObjectStreamClass)>
<java.io.StreamCorruptedException: void <init>(java.lang.String)>
<java.io.StreamTokenizer: void <init>(java.io.Reader)>
<java.io.StringReader: void <init>(java.lang.String)>
<java.io.StringWriter: void <init>()>
<java.io.UTFDataFormatException: void <init>()>
<java.io.UTFDataFormatException: void <init>(java.lang.String)>
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>
<java.io.Writer: void <init>()>
<java.io.Writer: void <init>(java.lang.Object)>
<java.lang.ArithmeticException: void <init>(java.lang.String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(int)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.AssertionError: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.Class$1: void <init>(java.lang.Class,java.lang.reflect.Constructor)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.lang.ClassFormatError: void <init>(java.lang.String)>
<java.lang.ClassLoader$1: void <init>(java.lang.ClassLoader,java.lang.SecurityManager,java.lang.String,int)>
<java.lang.ClassLoader$2: void <init>(java.util.Enumeration)>
<java.lang.ClassLoader$3: void <init>(java.io.File)>
<java.lang.ClassLoader$NativeLibrary: void <init>(java.lang.Class,java.lang.String)>
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>
<java.lang.Error: void <init>()>
<java.lang.Error: void <init>(java.lang.String)>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<java.lang.IllegalAccessError: void <init>(java.lang.String)>
<java.lang.IllegalAccessException: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalMonitorStateException: void <init>()>
<java.lang.IllegalStateException: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.IllegalThreadStateException: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.InstantiationException: void <init>()>
<java.lang.InstantiationException: void <init>(java.lang.String)>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(java.lang.String)>
<java.lang.InterruptedException: void <init>()>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<java.lang.NoSuchFieldException: void <init>(java.lang.String)>
<java.lang.NoSuchMethodError: void <init>(java.lang.String)>
<java.lang.NoSuchMethodException: void <init>(java.lang.String)>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.lang.NumberFormatException: void <init>(java.lang.String)>
<java.lang.OutOfMemoryError: void <init>(java.lang.String)>
<java.lang.Package: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>
<java.lang.ProcessEnvironment$ExternalData: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$StringEntry: void <init>(java.util.Map$Entry)>
<java.lang.ProcessEnvironment$StringEntrySet$1: void <init>(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringEntrySet: void <init>(java.util.Set)>
<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>
<java.lang.ProcessEnvironment$StringValues$1: void <init>(java.lang.ProcessEnvironment$StringValues)>
<java.lang.ProcessEnvironment$StringValues: void <init>(java.util.Collection)>
<java.lang.ProcessEnvironment$Value: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$Variable: void <init>(java.lang.String,byte[])>
<java.lang.RuntimeException: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.SecurityManager$1: void <init>(java.lang.SecurityManager)>
<java.lang.String: void <init>(int,int,char[])>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.System$1: void <init>(java.lang.SecurityManager)>
<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>
<java.lang.Thread$1: void <init>(java.lang.Class)>
<java.lang.Thread: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.ThreadGroup: void <init>(java.lang.Void,java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadLocal$ThreadLocalMap$Entry: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.lang.UNIXProcess$1$1$1: void <init>(java.lang.UNIXProcess$1$1)>
<java.lang.UNIXProcess$1$1: void <init>(java.lang.UNIXProcess$1,java.lang.String)>
<java.lang.UNIXProcess$1: void <init>(java.lang.UNIXProcess,byte[],byte[],int,byte[],int,byte[],boolean,java.lang.UNIXProcess$Gate)>
<java.lang.UNIXProcess$Gate: void setException(java.io.IOException)>
<java.lang.UNIXProcess: java.io.InputStream access$702(java.lang.UNIXProcess,java.io.InputStream)>
<java.lang.UNIXProcess: java.io.InputStream access$802(java.lang.UNIXProcess,java.io.InputStream)>
<java.lang.UNIXProcess: java.io.OutputStream access$602(java.lang.UNIXProcess,java.io.OutputStream)>
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.lang.UnsupportedOperationException: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.VirtualMachineError: void <init>(java.lang.String)>
<java.lang.ref.FinalReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.Finalizer$FinalizerThread: void <init>(java.lang.ThreadGroup)>
<java.lang.ref.Finalizer: void <init>(java.lang.Object)>
<java.lang.ref.Finalizer: void access$100(java.lang.ref.Finalizer)>
<java.lang.ref.Finalizer: void remove()>
<java.lang.ref.Finalizer: void runFinalizer()>
<java.lang.ref.Reference$ReferenceHandler: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ref.Reference: void <init>(java.lang.Object)>
<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.ReferenceQueue: boolean enqueue(java.lang.ref.Reference)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.reflect.Constructor: void <init>(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])>
<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>
<java.lang.reflect.ReflectAccess: void setConstructorAccessor(java.lang.reflect.Constructor,sun.reflect.ConstructorAccessor)>
<java.math.BigDecimal: void <init>(java.math.BigInteger)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,long,int,int)>
<java.math.BigInteger: void <init>(int[],int)>
<java.math.MathContext: void <init>(int,java.math.RoundingMode)>
<java.math.MutableBigInteger: void <init>(int[])>
<java.math.MutableBigInteger: void setValue(int[],int)>
<java.net.Inet6Address: void initif(java.lang.String,byte[],java.net.NetworkInterface)>
<java.net.InetAddress$Cache: void <init>(java.net.InetAddress$Cache$Type)>
<java.net.InetAddress$CacheEntry: void <init>(java.lang.Object,long)>
<java.net.MalformedURLException: void <init>(java.lang.String)>
<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.net.URLClassLoader$1: void <init>(java.net.URLClassLoader,java.lang.String)>
<java.net.URLClassLoader$2: void <init>(java.net.URLClassLoader,java.lang.String)>
<java.net.URLClassLoader$3$1: void <init>(java.net.URLClassLoader$3)>
<java.net.URLClassLoader$3: void <init>(java.net.URLClassLoader,java.util.Enumeration)>
<java.net.URLClassLoader$4: void <init>(java.net.URLClassLoader,java.lang.SecurityManager,java.security.Permission)>
<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.net.URLStreamHandlerFactory)>
<java.net.UnknownHostException: void <init>(java.lang.String)>
<java.nio.BufferOverflowException: void <init>()>
<java.nio.BufferUnderflowException: void <init>()>
<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>
<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>
<java.nio.HeapByteBuffer: void <init>(byte[],int,int)>
<java.nio.HeapCharBuffer: void <init>(char[],int,int)>
<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>
<java.nio.ReadOnlyBufferException: void <init>()>
<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int)>
<java.nio.charset.CharacterCodingException: void <init>()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float,java.lang.String)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>
<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>
<java.nio.charset.MalformedInputException: void <init>(int)>
<java.nio.charset.UnmappableCharacterException: void <init>(int)>
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>
<java.security.AccessControlContext$2: void <init>(java.security.AccessControlContext,sun.security.util.Debug,java.security.ProtectionDomain)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],boolean)>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>
<java.security.AllPermissionCollection$1: void <init>(java.security.AllPermissionCollection)>
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>
<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>
<java.security.DigestException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>
<java.security.InvalidParameterException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyException: void <init>(java.lang.Throwable)>
<java.security.KeyFactory: void <init>(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)>
<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>
<java.security.NoSuchProviderException: void <init>(java.lang.String)>
<java.security.PermissionsEnumerator: void <init>(java.util.Iterator)>
<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>
<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>
<java.security.ProtectionDomain$1: void <init>(java.security.ProtectionDomain)>
<java.security.ProtectionDomain$2$1: void <init>(java.security.ProtectionDomain$2)>
<java.security.ProtectionDomain$Key: void <init>(java.security.ProtectionDomain)>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<java.security.Provider$Service: void <init>(java.security.Provider)>
<java.security.Provider$Service: void <init>(java.security.Provider,java.security.Provider$1)>
<java.security.ProviderException: void <init>(java.lang.String)>
<java.security.ProviderException: void <init>(java.lang.Throwable)>
<java.security.SecureClassLoader: void <init>(java.lang.ClassLoader)>
<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>
<java.security.Signature$CipherAdapter: void <init>(javax.crypto.Cipher)>
<java.security.Signature$Delegate: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>
<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>
<java.security.cert.CRLException: void <init>(java.lang.String)>
<java.security.cert.CertPathBuilder: void <init>(java.security.cert.CertPathBuilderSpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertPathValidator: void <init>(java.security.cert.CertPathValidatorSpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>
<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>
<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>
<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>
<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>
<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.AttributedString$AttributeMap: void <init>(java.text.AttributedString,int,int,int)>
<java.text.AttributedString$AttributedStringIterator: void <init>(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute[],int,int)>
<java.text.BreakDictionary$1: void <init>(java.text.BreakDictionary,java.lang.String)>
<java.text.BreakIterator$1: void <init>(java.lang.String,java.util.Locale)>
<java.text.BreakIterator$BreakIteratorCache: void <init>(java.util.Locale,java.text.BreakIterator)>
<java.text.DateFormatSymbols: void <init>(java.util.Locale)>
<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>
<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>
<java.text.DictionaryBasedBreakIterator: void setText(java.text.CharacterIterator)>
<java.text.DontCareFieldPosition$1: void <init>(java.text.DontCareFieldPosition)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition,java.text.FieldPosition$1)>
<java.text.FieldPosition: void <init>(java.text.Format$Field)>
<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>
<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.RuleBasedBreakIterator$1: void <init>(java.text.RuleBasedBreakIterator,java.lang.String)>
<java.text.RuleBasedBreakIterator$SafeCharIterator: void <init>(java.text.CharacterIterator)>
<java.text.RuleBasedBreakIterator: void setAdditionalData(byte[])>
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)>
<java.text.SimpleDateFormat: void <init>(int,int,java.util.Locale)>
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>
<java.util.AbstractList$ListItr: void <init>(java.util.AbstractList,int)>
<java.util.AbstractMap$2$1: void <init>(java.util.AbstractMap$2)>
<java.util.AbstractMap$2: void <init>(java.util.AbstractMap)>
<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>
<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>
<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: void setTimeZone(java.util.TimeZone)>
<java.util.Collections$1: void <init>(java.util.Collection)>
<java.util.Collections$EmptySet$1: void <init>(java.util.Collections$EmptySet)>
<java.util.Collections$SingletonList: void <init>(java.lang.Object)>
<java.util.Collections$SingletonSet$1: void <init>(java.util.Collections$SingletonSet)>
<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>
<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: void <init>(java.util.Map$Entry)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void <init>(java.util.Set)>
<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>
<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<java.util.ConcurrentModificationException: void <init>()>
<java.util.ConcurrentModificationException: void <init>(java.lang.String)>
<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>
<java.util.EmptyStackException: void <init>()>
<java.util.EventObject: void <init>(java.lang.Object)>
<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>
<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>
<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void <init>(java.util.Formatter$FormatSpecifier,java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>
<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.Formatter,java.lang.String[])>
<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<java.util.Formatter: void init(java.lang.Appendable,java.util.Locale)>
<java.util.FormatterClosedException: void <init>()>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>
<java.util.HashMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$HashIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$Values: void <init>(java.util.HashMap)>
<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable)>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IllegalFormatCodePointException: void <init>(int)>
<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>
<java.util.IllegalFormatException: void <init>()>
<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>
<java.util.IllegalFormatPrecisionException: void <init>(int)>
<java.util.IllegalFormatWidthException: void <init>(int)>
<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.JapaneseImperialCalendar: void setTimeZone(java.util.TimeZone)>
<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.LinkedHashMap$Entry: void access$600(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$Entry: void addBefore(java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedList$Entry: void <init>(java.lang.Object,java.util.LinkedList$Entry,java.util.LinkedList$Entry)>
<java.util.LinkedList$ListItr: void <init>(java.util.LinkedList,int)>
<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>
<java.util.MissingFormatWidthException: void <init>(java.lang.String)>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.NoSuchElementException: void <init>()>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.Properties$LineReader: void <init>(java.util.Properties,java.io.InputStream)>
<java.util.Properties: void <init>(java.util.Properties)>
<java.util.RandomAccessSubList: void <init>(java.util.AbstractList,int,int)>
<java.util.ResourceBundle$BundleReference: void <init>(java.util.ResourceBundle,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle$CacheKey: void access$500(java.util.ResourceBundle$CacheKey,java.lang.Throwable)>
<java.util.ResourceBundle$CacheKey: void setCause(java.lang.Throwable)>
<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>
<java.util.ResourceBundle$LoaderReference: void <init>(java.lang.ClassLoader,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.ServiceLoader$1: void <init>(java.util.ServiceLoader)>
<java.util.ServiceLoader$LazyIterator: void <init>(java.util.ServiceLoader,java.lang.Class,java.lang.ClassLoader)>
<java.util.ServiceLoader$LazyIterator: void <init>(java.util.ServiceLoader,java.lang.Class,java.lang.ClassLoader,java.util.ServiceLoader$1)>
<java.util.ServiceLoader: void <init>(java.lang.Class,java.lang.ClassLoader)>
<java.util.SubList$1: void <init>(java.util.SubList,int)>
<java.util.SubList: void <init>(java.util.AbstractList,int,int)>
<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntrySet: void <init>(java.util.TreeMap)>
<java.util.TreeMap$KeyIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$KeySet: void <init>(java.util.NavigableMap)>
<java.util.TreeMap$PrivateEntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$ValueIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$Values: void <init>(java.util.TreeMap)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.TreeSet: void <init>(java.util.NavigableMap)>
<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>
<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>
<java.util.Vector$1: void <init>(java.util.Vector)>
<java.util.WeakHashMap$Entry: java.lang.Object access$202(java.util.WeakHashMap$Entry,java.lang.Object)>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$102(java.util.WeakHashMap$Entry,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$HashIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.concurrent.CancellationException: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$EntrySet: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(java.lang.Object,int,java.util.concurrent.ConcurrentHashMap$HashEntry,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$HashIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$Segment: void setTable(java.util.concurrent.ConcurrentHashMap$HashEntry[])>
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object,java.lang.Object)>
<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>
<java.util.concurrent.Executors$RunnableAdapter: void <init>(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.FutureTask$Sync: void <init>(java.util.concurrent.FutureTask,java.util.concurrent.Callable)>
<java.util.concurrent.FutureTask$Sync: void innerSet(java.lang.Object)>
<java.util.concurrent.FutureTask$Sync: void innerSetException(java.lang.Throwable)>
<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: void unlink(java.util.concurrent.LinkedBlockingQueue$Node,java.util.concurrent.LinkedBlockingQueue$Node)>
<java.util.concurrent.RejectedExecutionException: void <init>()>
<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>(java.lang.Thread,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>(java.lang.Thread,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>
<java.util.jar.JarException: void <init>(java.lang.String)>
<java.util.jar.JarFile$1: void <init>(java.util.jar.JarFile,java.util.Enumeration)>
<java.util.jar.JarFile$JarFileEntry: void <init>(java.util.jar.JarFile,java.util.zip.ZipEntry)>
<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>
<java.util.jar.JarVerifier$3: void <init>(java.util.jar.JarVerifier)>
<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>
<java.util.jar.JarVerifier: void <init>(byte[])>
<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream,int)>
<java.util.logging.Level$KnownLevel: void <init>(java.util.logging.Level)>
<java.util.logging.LogManager$2: void <init>(java.util.logging.LogManager)>
<java.util.logging.LogManager$3: void <init>(java.util.logging.LogManager,java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager$4: void <init>(java.util.logging.LogManager,java.lang.String,java.util.logging.Logger)>
<java.util.logging.LogManager$5: void <init>(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager$6: void <init>(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager$Cleaner: void <init>(java.util.logging.LogManager)>
<java.util.logging.LogManager$Cleaner: void <init>(java.util.logging.LogManager,java.util.logging.LogManager$1)>
<java.util.logging.LogManager$LogNode: void <init>(java.util.logging.LogManager$LogNode,java.util.logging.LogManager$LoggerContext)>
<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.lang.String)>
<java.util.logging.LogManager$LoggerWeakRef: void <init>(java.util.logging.LogManager,java.util.logging.Logger)>
<java.util.logging.LogManager$LoggerWeakRef: void setNode(java.util.logging.LogManager$LogNode)>
<java.util.logging.LogManager$LoggerWeakRef: void setParentRef(java.lang.ref.WeakReference)>
<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager)>
<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager,java.util.logging.LogManager$1)>
<java.util.logging.LogManager: java.util.logging.Logger access$202(java.util.logging.LogManager,java.util.logging.Logger)>
<java.util.logging.LogManager: void access$800(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager: void access$900(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager: void doSetLevel(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager: void doSetParent(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<java.util.logging.Logger$1: void <init>(java.util.Locale)>
<java.util.logging.Logger: void doSetParent(java.util.logging.Logger)>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.util.logging.Logger: void setLogManager(java.util.logging.LogManager)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>
<java.util.regex.Pattern$1: void <init>(java.util.regex.Pattern,java.lang.Character$UnicodeBlock)>
<java.util.regex.Pattern$3: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$4: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$6: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$7: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$8: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$Behind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$BehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$BnM: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$BnMS: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Branch: void <init>(java.util.regex.Pattern$Node,java.util.regex.Pattern$Node,java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$CharProperty$1: void <init>(java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$CharPropertyNames$4: void <init>(java.util.regex.Pattern$CharPropertyNames$CloneableProperty)>
<java.util.regex.Pattern$Curly: void <init>(java.util.regex.Pattern$Node,int,int,int)>
<java.util.regex.Pattern$GroupCurly: void <init>(java.util.regex.Pattern$Node,int,int,int,int,int,boolean)>
<java.util.regex.Pattern$Neg: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$NotBehind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$NotBehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$Pos: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Prolog: void <init>(java.util.regex.Pattern$Loop)>
<java.util.regex.Pattern$Ques: void <init>(java.util.regex.Pattern$Node,int)>
<java.util.regex.Pattern$Slice: void <init>(int[])>
<java.util.regex.Pattern$SliceI: void <init>(int[])>
<java.util.regex.Pattern$SliceIS: void <init>(int[])>
<java.util.regex.Pattern$SliceNode: void <init>(int[])>
<java.util.regex.Pattern$SliceS: void <init>(int[])>
<java.util.regex.Pattern$SliceU: void <init>(int[])>
<java.util.regex.Pattern$SliceUS: void <init>(int[])>
<java.util.regex.Pattern$Start: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$StartS: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>
<java.util.zip.Deflater: void setInput(byte[],int,int)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,int)>
<java.util.zip.Inflater: void setInput(byte[],int,int)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>
<java.util.zip.ZipEntry: void setExtra(byte[])>
<java.util.zip.ZipError: void <init>(java.lang.String)>
<java.util.zip.ZipException: void <init>(java.lang.String)>
<java.util.zip.ZipFile$1: void <init>(java.util.zip.ZipFile,java.io.InputStream,java.util.zip.Inflater,int,java.util.zip.ZipFile$ZipFileInputStream)>
<java.util.zip.ZipFile$2: void <init>(java.util.zip.ZipFile)>
<java.util.zip.ZipFile$ZipFileInputStream: void <init>(java.util.zip.ZipFile,long)>
<java.util.zip.ZipOutputStream$XEntry: void <init>(java.util.zip.ZipEntry,long)>
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>
<java_cup.runtime.Symbol: void <init>(int,int,int,java.lang.Object)>
<java_cup.runtime.Symbol: void <init>(int,java.lang.Object)>
<java_cup.runtime.virtual_parse_stack: void <init>(java.util.Stack)>
<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.lang.String)>
<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>
<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>
<javax.crypto.SunJCE_b$2: void <init>(java.lang.Class)>
<javax.crypto.SunJCE_c$1: void <init>(javax.crypto.SunJCE_c,java.net.URL)>
<javax.crypto.SunJCE_c$s: void <init>(java.util.jar.JarFile,boolean)>
<javax.crypto.SunJCE_c: void <init>(java.net.URL,sun.security.validator.Validator,boolean)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(java.lang.String)>
<javax.crypto.SunJCE_f: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
<javax.crypto.SunJCE_j: void <init>(java.util.Enumeration)>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int,java.util.Set)>
<polyglot.ast.Binary$Operator: void <init>(java.lang.String,polyglot.ast.Precedence)>
<polyglot.ext.jl.ast.AbstractBlock_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.AbstractDelFactory_c: void <init>(polyglot.ast.DelFactory)>
<polyglot.ext.jl.ast.AbstractExtFactory_c: void <init>(polyglot.ast.ExtFactory)>
<polyglot.ext.jl.ast.AmbAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.AmbExpr_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AmbPrefix_c: void <init>(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: void <init>(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.AmbReceiver_c: void <init>(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.AmbTypeNode_c: void <init>(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: void <init>(polyglot.util.Position,polyglot.ast.ArrayAccess,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayAccess_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayInit_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Assert_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assign_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Binary_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Binary$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Block_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.BooleanLit_c: void <init>(polyglot.util.Position,boolean)>
<polyglot.ext.jl.ast.Branch_c: void <init>(polyglot.util.Position,polyglot.ast.Branch$Kind,java.lang.String)>
<polyglot.ext.jl.ast.Call_c: void <init>(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String,java.util.List)>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: void <init>(polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.ast.Case_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Cast_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Catch_c: void <init>(polyglot.util.Position,polyglot.ast.Formal,polyglot.ast.Block)>
<polyglot.ext.jl.ast.CharLit_c: void <init>(polyglot.util.Position,char)>
<polyglot.ext.jl.ast.ClassBody_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.ClassDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,java.lang.String,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.ClassLit_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Conditional_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ConstructorCall_c: void <init>(polyglot.util.Position,polyglot.ast.ConstructorCall$Kind,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.ConstructorDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguate(polyglot.ast.Ambiguous,polyglot.visit.ContextVisitor,polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.Do_c: void <init>(polyglot.util.Position,polyglot.ast.Stmt,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Empty_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Eval_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Expr_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.FieldAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Field,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.FieldDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Field_c: void <init>(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String)>
<polyglot.ext.jl.ast.FloatLit_c: void <init>(polyglot.util.Position,polyglot.ast.FloatLit$Kind,double)>
<polyglot.ext.jl.ast.For_c: void <init>(polyglot.util.Position,java.util.List,polyglot.ast.Expr,java.util.List,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Formal_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String)>
<polyglot.ext.jl.ast.If_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Import_c: void <init>(polyglot.util.Position,polyglot.ast.Import$Kind,java.lang.String)>
<polyglot.ext.jl.ast.Initializer_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Instanceof_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.IntLit_c: void <init>(polyglot.util.Position,polyglot.ast.IntLit$Kind,long)>
<polyglot.ext.jl.ast.Labeled_c: void <init>(polyglot.util.Position,java.lang.String,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Lit_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.LocalAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Local,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.LocalClassDecl_c: void <init>(polyglot.util.Position,polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.LocalDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Local_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.Loop_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.MethodDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NewArray_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,int,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.New_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.NodeFactory_c: void <init>(polyglot.ast.ExtFactory,polyglot.ast.DelFactory)>
<polyglot.ext.jl.ast.Node_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.NullLit_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.NumLit_c: void <init>(polyglot.util.Position,long)>
<polyglot.ext.jl.ast.PackageNode_c: void <init>(polyglot.util.Position,polyglot.types.Package)>
<polyglot.ext.jl.ast.Return_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.SourceFile_c: void <init>(polyglot.util.Position,polyglot.ast.PackageNode,java.util.List,java.util.List)>
<polyglot.ext.jl.ast.Special_c: void <init>(polyglot.util.Position,polyglot.ast.Special$Kind,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Stmt_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.StringLit_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.SwitchBlock_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.Switch_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.Synchronized_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Term_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Throw_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Try_c: void <init>(polyglot.util.Position,polyglot.ast.Block,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.TypeNode_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Unary_c: void <init>(polyglot.util.Position,polyglot.ast.Unary$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.While_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.parse.CUP$Grm$actions: void <init>(polyglot.ext.jl.parse.Grm)>
<polyglot.ext.jl.parse.Grm: void <init>(polyglot.lex.Lexer,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.util.ErrorQueue)>
<polyglot.ext.jl.parse.Lexer_c: void <init>(java.io.Reader)>
<polyglot.ext.jl.parse.Lexer_c: void <init>(java.io.Reader,java.lang.String,polyglot.util.ErrorQueue)>
<polyglot.ext.jl.parse.Name: void <init>(polyglot.parse.BaseParser,polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.parse.Name: void <init>(polyglot.parse.BaseParser,polyglot.util.Position,polyglot.ext.jl.parse.Name,java.lang.String)>
<polyglot.ext.jl.types.ArrayType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.types.ClassType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.ClassType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.ConstructorInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags,java.util.List,java.util.List)>
<polyglot.ext.jl.types.Context_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.FieldInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.FieldInstance_c: void setConstantValue(java.lang.Object)>
<polyglot.ext.jl.types.InitializerInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags)>
<polyglot.ext.jl.types.LazyClassInitializer_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.LocalInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.LocalInstance_c: void setConstantValue(java.lang.Object)>
<polyglot.ext.jl.types.MethodInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String,java.util.List,java.util.List)>
<polyglot.ext.jl.types.NullType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Package_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Package_c: void <init>(polyglot.types.TypeSystem,polyglot.types.Package,java.lang.String)>
<polyglot.ext.jl.types.ParsedClassType_c: void <init>(polyglot.types.TypeSystem,polyglot.types.LazyClassInitializer,polyglot.frontend.Source)>
<polyglot.ext.jl.types.ParsedClassType_c: void flags(polyglot.types.Flags)>
<polyglot.ext.jl.types.ParsedClassType_c: void kind(polyglot.types.ClassType$Kind)>
<polyglot.ext.jl.types.ParsedClassType_c: void outer(polyglot.types.ClassType)>
<polyglot.ext.jl.types.ParsedClassType_c: void package_(polyglot.types.Package)>
<polyglot.ext.jl.types.ParsedClassType_c: void position(polyglot.util.Position)>
<polyglot.ext.jl.types.ParsedClassType_c: void superType(polyglot.types.Type)>
<polyglot.ext.jl.types.PrimitiveType_c: void <init>(polyglot.types.TypeSystem,polyglot.types.PrimitiveType$Kind)>
<polyglot.ext.jl.types.ProcedureInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,java.util.List,java.util.List)>
<polyglot.ext.jl.types.ReferenceType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.TypeObject_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.TypeObject_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.TypeSystem_c$MostSpecificComparator: void <init>(polyglot.ext.jl.types.TypeSystem_c)>
<polyglot.ext.jl.types.TypeSystem_c: void initialize(polyglot.types.LoadedClassResolver,polyglot.frontend.ExtensionInfo)>
<polyglot.ext.jl.types.Type_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Type_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.UnknownPackage_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.UnknownQualifier_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.UnknownType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.VarInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.frontend.AbstractExtensionInfo: boolean runAllPasses(polyglot.frontend.Job)>
<polyglot.frontend.AbstractExtensionInfo: boolean runToPass(polyglot.frontend.Job,polyglot.frontend.Pass$ID)>
<polyglot.frontend.AbstractExtensionInfo: boolean runToPass(polyglot.frontend.Job,polyglot.frontend.Pass)>
<polyglot.frontend.AbstractExtensionInfo: void initCompiler(polyglot.frontend.Compiler)>
<polyglot.frontend.AbstractExtensionInfo: void runPass(polyglot.frontend.Job,polyglot.frontend.Pass)>
<polyglot.frontend.AbstractPass: void <init>(polyglot.frontend.Pass$ID)>
<polyglot.frontend.BarrierPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job)>
<polyglot.frontend.Compiler: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.frontend.Compiler: void <init>(polyglot.frontend.ExtensionInfo,polyglot.util.ErrorQueue)>
<polyglot.frontend.CupParser: void <init>(java_cup.runtime.lr_parser,polyglot.frontend.Source,polyglot.util.ErrorQueue)>
<polyglot.frontend.CyclicDependencyException: void <init>(java.lang.String)>
<polyglot.frontend.EmptyPass: void <init>(polyglot.frontend.Pass$ID)>
<polyglot.frontend.FileSource: void <init>(java.io.File)>
<polyglot.frontend.FileSource: void <init>(java.io.File,boolean)>
<polyglot.frontend.GlobalBarrierPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job)>
<polyglot.frontend.InnerJob: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.ast.Node,polyglot.types.Context,polyglot.frontend.Job,polyglot.frontend.Pass$ID,polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.ast.Node)>
<polyglot.frontend.Job: void ast(polyglot.ast.Node)>
<polyglot.frontend.Job: void setRunningPass(polyglot.frontend.Pass)>
<polyglot.frontend.OutputPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.visit.Translator)>
<polyglot.frontend.ParserPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Compiler,polyglot.frontend.Job)>
<polyglot.frontend.Source: void <init>(java.lang.String,java.lang.String,java.util.Date,boolean)>
<polyglot.frontend.SourceJob: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.frontend.Source,polyglot.ast.Node)>
<polyglot.frontend.SourceLoader: void <init>(polyglot.frontend.ExtensionInfo,java.util.Collection)>
<polyglot.frontend.Stats: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.frontend.TargetFactory: void <init>(java.io.File,java.lang.String,boolean)>
<polyglot.frontend.VisitorPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.visit.NodeVisitor)>
<polyglot.lex.BooleanLiteral: void <init>(polyglot.util.Position,boolean,int)>
<polyglot.lex.CharacterLiteral: void <init>(polyglot.util.Position,char,int)>
<polyglot.lex.DoubleLiteral: void <init>(polyglot.util.Position,double,int)>
<polyglot.lex.EOF: void <init>(polyglot.util.Position,int)>
<polyglot.lex.EscapedUnicodeReader: void <init>(java.io.Reader)>
<polyglot.lex.FloatLiteral: void <init>(polyglot.util.Position,float,int)>
<polyglot.lex.Identifier: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.IntegerLiteral: void <init>(polyglot.util.Position,int,int)>
<polyglot.lex.Keyword: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.Literal: void <init>(polyglot.util.Position,int)>
<polyglot.lex.LongLiteral: void <init>(polyglot.util.Position,long,int)>
<polyglot.lex.NullLiteral: void <init>(polyglot.util.Position,int)>
<polyglot.lex.NumericLiteral: void <init>(polyglot.util.Position,int)>
<polyglot.lex.Operator: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.StringLiteral: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.Token: void <init>(polyglot.util.Position,int)>
<polyglot.main.Options: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.parse.BaseParser: void <init>(polyglot.lex.Lexer,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.util.ErrorQueue)>
<polyglot.parse.VarDeclarator: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.types.BadSerializationException: void <init>(java.lang.String)>
<polyglot.types.CachingResolver: void <init>(polyglot.types.TopLevelResolver,polyglot.frontend.ExtensionInfo)>
<polyglot.types.ClassContextResolver: void <init>(polyglot.types.TypeSystem,polyglot.types.ClassType)>
<polyglot.types.CompoundResolver: void <init>(polyglot.types.TopLevelResolver,polyglot.types.TopLevelResolver)>
<polyglot.types.ImportTable: void <init>(polyglot.types.TypeSystem,polyglot.types.Resolver,polyglot.types.Package,java.lang.String)>
<polyglot.types.LoadedClassResolver: void <init>(polyglot.types.TypeSystem,java.lang.String,polyglot.types.reflect.ClassFileLoader,polyglot.main.Version,boolean)>
<polyglot.types.NoClassException: void <init>(java.lang.String)>
<polyglot.types.NoClassException: void <init>(java.lang.String,polyglot.types.Named)>
<polyglot.types.NoClassException: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.types.NoMemberException: void <init>(int,java.lang.String)>
<polyglot.types.PackageContextResolver: void <init>(polyglot.types.TypeSystem,polyglot.types.Package,polyglot.types.Resolver)>
<polyglot.types.SemanticException: void <init>()>
<polyglot.types.SemanticException: void <init>(java.lang.String)>
<polyglot.types.SemanticException: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.types.SourceClassResolver: void <init>(polyglot.frontend.Compiler,polyglot.frontend.ExtensionInfo,java.lang.String,polyglot.types.reflect.ClassFileLoader,boolean)>
<polyglot.types.reflect.ClassFile: void <init>(java.io.File,byte[],polyglot.frontend.ExtensionInfo)>
<polyglot.types.reflect.ClassFileLoader: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.types.reflect.ClassPathLoader: void <init>(java.lang.String,polyglot.types.reflect.ClassFileLoader)>
<polyglot.types.reflect.Constant: void <init>(int,java.lang.Object)>
<polyglot.types.reflect.Exceptions: void <init>(polyglot.types.reflect.ClassFile,java.io.DataInputStream,int,int)>
<polyglot.types.reflect.Field: void <init>(java.io.DataInputStream,polyglot.types.reflect.ClassFile)>
<polyglot.types.reflect.Method: void <init>(java.io.DataInputStream,polyglot.types.reflect.ClassFile)>
<polyglot.util.Base64$OutputStream: void <init>(java.io.OutputStream,int)>
<polyglot.util.BlockItem: void <init>(polyglot.util.BlockItem,int)>
<polyglot.util.BlockItem: void add(polyglot.util.Item)>
<polyglot.util.CodeWriter: void <init>(java.io.PrintWriter,int)>
<polyglot.util.Enum$EnumKey: void <init>(polyglot.util.Enum)>
<polyglot.util.ErrorInfo: void <init>(int,java.lang.String,polyglot.util.Position)>
<polyglot.util.ErrorLimitError: void <init>()>
<polyglot.util.IdentityKey: void <init>(java.lang.Object)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,polyglot.util.Position,java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.util.Overrun: void <init>()>
<polyglot.util.StdErrorQueue: void <init>(java.io.PrintStream,int,java.lang.String)>
<polyglot.util.SubtypeSet: void <init>(polyglot.types.Type)>
<polyglot.util.TypeEncoder: void <init>(polyglot.types.TypeSystem)>
<polyglot.util.TypeInputStream: void <init>(java.io.InputStream,polyglot.types.TypeSystem)>
<polyglot.util.TypeOutputStream: void <init>(java.io.OutputStream,polyglot.types.TypeSystem,polyglot.types.Type)>
<polyglot.util.TypedList: void <init>(java.util.List,java.lang.Class,boolean)>
<polyglot.util.TypedListIterator: void <init>(java.util.ListIterator,java.lang.Class,boolean)>
<polyglot.util.UnicodeWriter: void <init>(java.io.Writer)>
<polyglot.visit.AddMemberVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.AmbiguityRemover: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.visit.AmbiguityRemover$Kind)>
<polyglot.visit.AscriptionVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.CFGBuildError: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.visit.CFGBuilder$EdgeKeyTermPair: void <init>(polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void <init>(polyglot.types.TypeSystem,polyglot.visit.FlowGraph,polyglot.visit.DataFlow)>
<polyglot.visit.ClassSerializer: void <init>(polyglot.types.TypeSystem,polyglot.ast.NodeFactory,java.util.Date,polyglot.util.ErrorQueue,polyglot.main.Version)>
<polyglot.visit.ConstructorCallChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ContextVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.DataFlow$FlowGraphSource: void <init>(polyglot.visit.FlowGraph,polyglot.ast.CodeDecl)>
<polyglot.visit.DataFlow$Frame: void <init>(polyglot.visit.FlowGraph$Peer,boolean)>
<polyglot.visit.DataFlow: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,boolean)>
<polyglot.visit.DataFlow: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,boolean,boolean)>
<polyglot.visit.DataFlow: void dataflow(polyglot.ast.CodeDecl)>
<polyglot.visit.DumpAst: void <init>(polyglot.util.CodeWriter)>
<polyglot.visit.ErrorHandlingVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ExceptionChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ExitChecker: polyglot.visit.FlowGraph initGraph(polyglot.ast.CodeDecl,polyglot.ast.Term)>
<polyglot.visit.ExitChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.FlowGraph$Edge: void <init>(polyglot.visit.FlowGraph$EdgeKey,polyglot.visit.FlowGraph$Peer)>
<polyglot.visit.FlowGraph$EdgeKey: void <init>(java.lang.Object)>
<polyglot.visit.FlowGraph$ExceptionEdgeKey: void <init>(polyglot.types.Type)>
<polyglot.visit.FlowGraph$ListKey: void <init>(java.util.List)>
<polyglot.visit.FlowGraph$Peer: void <init>(polyglot.ast.Term,java.util.List)>
<polyglot.visit.FlowGraph: void <init>(polyglot.ast.Term,boolean)>
<polyglot.visit.FwdReferenceChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.InitChecker$MinMaxInitCount: void <init>(polyglot.visit.InitChecker$InitCount,polyglot.visit.InitChecker$InitCount)>
<polyglot.visit.InitChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ReachChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.Translator: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.frontend.TargetFactory)>
<polyglot.visit.TypeBuilder: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.TypeBuilder: void setImportTable(polyglot.types.ImportTable)>
<polyglot.visit.TypeChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.AbstractSootFieldRef$FieldResolutionFailedException: void <init>(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: void <init>(soot.SootClass,java.lang.String,soot.Type,boolean)>
<soot.AbstractSootMethodRef$ClassResolutionFailedException: void <init>(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: void <init>(soot.SootClass,java.lang.String,java.util.List,soot.Type,boolean)>
<soot.AbstractTrap: void <init>(soot.SootClass,soot.UnitBox,soot.UnitBox,soot.UnitBox)>
<soot.AbstractUnitAllMapTo: void <init>(java.lang.Object)>
<soot.AbstractUnitBox: void setUnit(soot.Unit)>
<soot.AbstractUnitPrinter: void setPositionTagger(soot.AttributesUnitPrinter)>
<soot.AbstractValueBox: void setValue(soot.Value)>
<soot.AnySubType: void <init>(soot.RefType)>
<soot.ArrayType: void <init>(soot.Type,int)>
<soot.AttributesUnitPrinter: void setUnitPrinter(soot.UnitPrinter)>
<soot.Body: void <init>(soot.SootMethod)>
<soot.Body: void setMethod(soot.SootMethod)>
<soot.BodyTransformer: void transform(soot.Body)>
<soot.BodyTransformer: void transform(soot.Body,java.lang.String)>
<soot.BodyTransformer: void transform(soot.Body,java.lang.String,java.util.Map)>
<soot.CoffiClassSource: void <init>(java.lang.String,java.io.InputStream)>
<soot.CompilationDeathException: void <init>(int)>
<soot.CompilationDeathException: void <init>(int,java.lang.String)>
<soot.CompilationDeathException: void <init>(java.lang.String)>
<soot.EquivalentValue: void <init>(soot.Value)>
<soot.FastHierarchy$Interval: void <init>(soot.FastHierarchy)>
<soot.JastAddInitialResolver$1: void <init>(soot.JastAddInitialResolver)>
<soot.JastAddJ.ASTNode$1: void <init>(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode with(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.SimpleSet removeInstanceVariables(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl extractSingleType(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.ASTNode: void <init>()>
<soot.JastAddJ.ASTNode: void addChild(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: void beginExceptionRange(soot.JastAddJ.Body,java.util.ArrayList)>
<soot.JastAddJ.ASTNode: void insertChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.ASTNode: void setChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.ASTNode: void setParent(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: void <init>()>
<soot.JastAddJ.AbstractWildcard: void <init>()>
<soot.JastAddJ.AbstractWildcardType: void <init>()>
<soot.JastAddJ.Access: void <init>()>
<soot.JastAddJ.AddExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AdditiveExpr: void <init>()>
<soot.JastAddJ.AmbiguousAccess: void <init>(java.lang.String)>
<soot.JastAddJ.AmbiguousAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.AndBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AndLogicalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AnnotatedCompilationUnit: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Modifiers)>
<soot.JastAddJ.Annotation: void <init>(java.lang.String,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.AnnotationDecl: void <init>()>
<soot.JastAddJ.AnnotationDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.List)>
<soot.JastAddJ.AnnotationDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.AnnotationDecl: void setSuperInterfaceIdList(soot.JastAddJ.List)>
<soot.JastAddJ.AnnotationMethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.Opt)>
<soot.JastAddJ.AnnotationMethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.Opt)>
<soot.JastAddJ.AnnotationMethodDecl: void setBlockOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.AnonymousDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.AnonymousDecl: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.AnonymousDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.AnonymousDecl: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.ArithmeticExpr: void <init>()>
<soot.JastAddJ.ArrayAccess: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ArrayCreationExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Opt)>
<soot.JastAddJ.ArrayDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ArrayInit: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.ArrayTypeAccess: void <init>()>
<soot.JastAddJ.ArrayTypeAccess: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.ArrayTypeAccess: void setAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssertStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Opt)>
<soot.JastAddJ.AssignAdditiveExpr: void <init>()>
<soot.JastAddJ.AssignAndExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignBitwiseExpr: void <init>()>
<soot.JastAddJ.AssignDivExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignExpr: void <init>()>
<soot.JastAddJ.AssignLShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMinusExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignModExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMulExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMultiplicativeExpr: void <init>()>
<soot.JastAddJ.AssignOrExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignPlusExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignRShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignShiftExpr: void <init>()>
<soot.JastAddJ.AssignSimpleExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignURShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignXorExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Attributes$FieldAttributes: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.Attributes$MethodAttributes: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.Attributes$TypeAttributes: void <init>(soot.JastAddJ.BytecodeParser,soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl,soot.JastAddJ.Program)>
<soot.JastAddJ.Attributes: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.Binary: void <init>()>
<soot.JastAddJ.BitNotExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.BitwiseExpr: void <init>()>
<soot.JastAddJ.Block: void <init>()>
<soot.JastAddJ.Block: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.Body: void <init>(soot.JastAddJ.TypeDecl,soot.jimple.JimpleBody,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Body: void addNextStmt(java.util.ArrayList)>
<soot.JastAddJ.BodyDecl: void <init>()>
<soot.JastAddJ.BooleanLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.BooleanType: void <init>()>
<soot.JastAddJ.BooleanType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.BoundFieldAccess: void <init>(java.lang.String,soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundFieldAccess: void <init>(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundFieldAccess: void setFieldDeclaration(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundMethodAccess: void <init>(java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.BoundMethodAccess: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.MethodDecl)>
<soot.JastAddJ.BoundMethodAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.BoundTypeAccess: void <init>(java.lang.String,java.lang.String,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.BoundTypeAccess: void setTypeDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.BranchTargetStmt: void <init>()>
<soot.JastAddJ.BreakStmt: void <init>(java.lang.String)>
<soot.JastAddJ.BridgeMethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.ByteType: void <init>()>
<soot.JastAddJ.ByteType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.BytecodeParser: soot.JastAddJ.CompilationUnit parse(soot.JastAddJ.TypeDecl,soot.JastAddJ.CONSTANT_Class_Info,soot.JastAddJ.Program)>
<soot.JastAddJ.BytecodeParser: soot.JastAddJ.CompilationUnit parse(soot.JastAddJ.TypeDecl,soot.JastAddJ.CONSTANT_Class_Info,soot.JastAddJ.Program,boolean)>
<soot.JastAddJ.BytecodeTypeAccess: void <init>(java.lang.String,java.lang.String)>
<soot.JastAddJ.CONSTANT_Class_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Double_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Fieldref_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Float_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Integer_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_InterfaceMethodref_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Long_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Methodref_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_NameAndType_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_String_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.CONSTANT_Utf8_Info: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.Case: void <init>()>
<soot.JastAddJ.CastExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Expr)>
<soot.JastAddJ.CatchClause: void <init>(soot.JastAddJ.ParameterDeclaration,soot.JastAddJ.Block)>
<soot.JastAddJ.CharType: void <init>()>
<soot.JastAddJ.CharType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.CharacterLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.ClassAccess: void <init>()>
<soot.JastAddJ.ClassDecl$1: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.ClassDecl$2: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.ClassDecl: void <init>()>
<soot.JastAddJ.ClassDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ClassDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ClassDecl: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.ClassDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ClassDecl: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.ClassDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ClassDeclSubstituted: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.ClassDeclSubstituted: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ClassDeclSubstituted: void setOriginal(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ClassDeclSubstituted: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.ClassInstanceExpr: soot.JastAddJ.SimpleSet keepInnerClasses(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.ClassInstanceExpr: void <init>()>
<soot.JastAddJ.ClassInstanceExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.ClassInstanceExpr: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.CompilationUnit: void <init>()>
<soot.JastAddJ.CompilationUnit: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ConditionalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.ConstCase: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ConstCase: void setValue(soot.JastAddJ.Expr)>
<soot.JastAddJ.ConstructorAccess: void <init>()>
<soot.JastAddJ.ConstructorAccess: void <init>(java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.ConstructorAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.ConstructorDecl: void <init>()>
<soot.JastAddJ.ConstructorDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.Block)>
<soot.JastAddJ.ConstructorDecl: void setBlock(soot.JastAddJ.Block)>
<soot.JastAddJ.ConstructorDecl: void setExceptionList(soot.JastAddJ.List)>
<soot.JastAddJ.ConstructorDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ConstructorDecl: void setParameterList(soot.JastAddJ.List)>
<soot.JastAddJ.ConstructorDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.Block,soot.JastAddJ.ConstructorDecl)>
<soot.JastAddJ.ConstructorDeclSubstituted: void setOriginal(soot.JastAddJ.ConstructorDecl)>
<soot.JastAddJ.ContinueStmt: void <init>(java.lang.String)>
<soot.JastAddJ.DefaultCase: void <init>()>
<soot.JastAddJ.Dims: void <init>(soot.JastAddJ.Opt)>
<soot.JastAddJ.DivExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.DoStmt: void <init>(soot.JastAddJ.Stmt,soot.JastAddJ.Expr)>
<soot.JastAddJ.Dot: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: void setRight(soot.JastAddJ.Access)>
<soot.JastAddJ.DoubleLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.DoubleType: void <init>()>
<soot.JastAddJ.DoubleType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.EQExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.ElementAnnotationValue: void <init>(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementArrayValue: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.ElementConstantValue: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ElementValue: void <init>()>
<soot.JastAddJ.ElementValuePair: void <init>(beaver.Symbol,soot.JastAddJ.ElementValue)>
<soot.JastAddJ.ElementValuePair: void <init>(java.lang.String,soot.JastAddJ.ElementValue)>
<soot.JastAddJ.ElementValuePair: void setElementValue(soot.JastAddJ.ElementValue)>
<soot.JastAddJ.EmptyStmt: void <init>()>
<soot.JastAddJ.EmptyType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List)>
<soot.JastAddJ.EmptyType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.EnhancedForStmt: void <init>(soot.JastAddJ.VariableDeclaration,soot.JastAddJ.Expr,soot.JastAddJ.Stmt)>
<soot.JastAddJ.EnumConstant: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.EnumConstant: void setBodyDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.EnumConstant: void setInitOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.EnumConstant: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.EnumDecl: void <init>()>
<soot.JastAddJ.EnumDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.EnumDecl: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.EnumDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.EnumDecl: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.EqualityExpr: void <init>()>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet keepAccessibleFields(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet keepAccessibleTypes(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.Expr: void <init>()>
<soot.JastAddJ.ExprStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.FieldDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.FieldDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.FieldDeclaration: void <init>()>
<soot.JastAddJ.FieldDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.Opt)>
<soot.JastAddJ.FieldDeclarationSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.FieldDeclarationSubstituted: void setOriginal(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.FieldDescriptor: void <init>(soot.JastAddJ.BytecodeParser,java.lang.String)>
<soot.JastAddJ.FieldInfo: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.FileNamesPart: void <init>(soot.JastAddJ.Program)>
<soot.JastAddJ.FloatType: void <init>()>
<soot.JastAddJ.FloatType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.FloatingPointLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.FloatingPointType: void <init>()>
<soot.JastAddJ.FolderPart: void <init>(java.io.File)>
<soot.JastAddJ.ForStmt: void <init>(soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.Stmt)>
<soot.JastAddJ.GEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.GLBType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.GLBType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GTExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.GenericClassDecl: void <init>()>
<soot.JastAddJ.GenericClassDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.GenericClassDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.GenericClassDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GenericClassDecl: void setParTypeDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericClassDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GenericClassDeclSubstituted: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GenericClassDeclSubstituted: void setOriginal(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GenericClassDeclSubstituted: void setParTypeDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericConstructorDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.Block,soot.JastAddJ.List)>
<soot.JastAddJ.GenericConstructorDecl: void setExceptionList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericConstructorDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GenericConstructorDecl: void setParameterList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericInterfaceDecl: void <init>()>
<soot.JastAddJ.GenericInterfaceDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.GenericInterfaceDecl: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.GenericInterfaceDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GenericInterfaceDecl: void setParTypeDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: void setOriginal(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: void setParTypeDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.GenericMethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.List)>
<soot.JastAddJ.GenericMethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.List)>
<soot.JastAddJ.GenericMethodDecl: void setBlockOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.GenericMethodDecl: void setParMethodDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.IdUse: void <init>(beaver.Symbol)>
<soot.JastAddJ.IdUse: void <init>(java.lang.String)>
<soot.JastAddJ.IfStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Stmt,soot.JastAddJ.Opt)>
<soot.JastAddJ.ImportDecl: void <init>()>
<soot.JastAddJ.InstanceInitializer: void <init>(soot.JastAddJ.Block)>
<soot.JastAddJ.InstanceOfExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Access)>
<soot.JastAddJ.IntType: void <init>()>
<soot.JastAddJ.IntType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.IntegerLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.IntegralType: void <init>()>
<soot.JastAddJ.InterfaceDecl$1: void <init>(soot.JastAddJ.InterfaceDecl)>
<soot.JastAddJ.InterfaceDecl: void <init>()>
<soot.JastAddJ.InterfaceDecl: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.InterfaceDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.InterfaceDecl: void setSuperInterfaceIdList(soot.JastAddJ.List)>
<soot.JastAddJ.InterfaceDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.InterfaceDeclSubstituted: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.InterfaceDeclSubstituted: void setOriginal(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.InterfaceDeclSubstituted: void setSuperInterfaceIdList(soot.JastAddJ.List)>
<soot.JastAddJ.JastAddJavaParser$Events: void <init>(soot.JastAddJ.JastAddJavaParser)>
<soot.JastAddJ.JavaScanner: void <init>(java.io.Reader)>
<soot.JastAddJ.LEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LTExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LUBType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.LUBType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.LabeledStmt: void <init>(java.lang.String,soot.JastAddJ.Stmt)>
<soot.JastAddJ.List: soot.JastAddJ.List add(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.List: void <init>()>
<soot.JastAddJ.List: void addChild(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.List: void insertChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.Literal: void <init>()>
<soot.JastAddJ.LocalClassDeclStmt: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.LogNotExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.LogicalExpr: void <init>()>
<soot.JastAddJ.LongLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.LongType: void <init>()>
<soot.JastAddJ.LongType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.MemberClassDecl: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.MemberDecl: void <init>()>
<soot.JastAddJ.MemberInterfaceDecl: void <init>(soot.JastAddJ.InterfaceDecl)>
<soot.JastAddJ.MemberTypeDecl: void <init>()>
<soot.JastAddJ.MethodAccess: soot.JastAddJ.SimpleSet removeInstanceMethods(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.MethodAccess: void <init>()>
<soot.JastAddJ.MethodAccess: void <init>(beaver.Symbol,soot.JastAddJ.List)>
<soot.JastAddJ.MethodAccess: void <init>(java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.MethodAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.MethodDecl: java.util.Iterator iterator()>
<soot.JastAddJ.MethodDecl: void <init>()>
<soot.JastAddJ.MethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.MethodDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.MethodDecl: void setBlockOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.MethodDeclSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.MethodDecl)>
<soot.JastAddJ.MethodDeclSubstituted: void setOriginal(soot.JastAddJ.MethodDecl)>
<soot.JastAddJ.MethodDescriptor: void <init>(soot.JastAddJ.BytecodeParser,java.lang.String)>
<soot.JastAddJ.MethodInfo: void <init>(soot.JastAddJ.BytecodeParser)>
<soot.JastAddJ.MinusExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ModExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Modifier: void <init>()>
<soot.JastAddJ.Modifier: void <init>(java.lang.String)>
<soot.JastAddJ.Modifiers: void <init>()>
<soot.JastAddJ.Modifiers: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.MulExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.MultiplicativeExpr: void <init>()>
<soot.JastAddJ.NEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.NullLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.NullType: void <init>()>
<soot.JastAddJ.NullType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.NumericType: void <init>()>
<soot.JastAddJ.Opt: void <init>()>
<soot.JastAddJ.Opt: void <init>(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.OrBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.OrLogicalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.PackageAccess: void <init>(java.lang.String)>
<soot.JastAddJ.PackageAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.PackageOrTypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.PackageOrTypeAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.ParClassDecl: void <init>()>
<soot.JastAddJ.ParClassDecl: void setArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.ParClassDecl: void setBodyDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.ParClassDecl: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.ParClassDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ParClassDecl: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.ParClassInstanceExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.List)>
<soot.JastAddJ.ParClassInstanceExpr: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.ParConstructorAccess: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ParConstructorAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.ParExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ParInterfaceDecl: void <init>()>
<soot.JastAddJ.ParInterfaceDecl: void setArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.ParInterfaceDecl: void setBodyDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.ParInterfaceDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ParInterfaceDecl: void setSuperInterfaceIdList(soot.JastAddJ.List)>
<soot.JastAddJ.ParMethodAccess: void <init>(beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ParMethodAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.ParMethodDecl: void <init>()>
<soot.JastAddJ.ParMethodDecl: void setExceptionList(soot.JastAddJ.List)>
<soot.JastAddJ.ParMethodDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.ParMethodDecl: void setParameterList(soot.JastAddJ.List)>
<soot.JastAddJ.ParMethodDecl: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ParMethodDecl: void setTypeArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.ParSuperConstructorAccess: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.ParSuperConstructorAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.ParTypeAccess: void <init>(soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.ParameterDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.ParameterDeclaration: void <init>()>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.TypeDecl,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.ParameterDeclaration)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void setOriginal(soot.JastAddJ.ParameterDeclaration)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ParseName: void <init>(beaver.Symbol)>
<soot.JastAddJ.ParseName: void <init>(java.lang.String)>
<soot.JastAddJ.PlusExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PostDecExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PostIncExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PostfixExpr: void <init>()>
<soot.JastAddJ.PreDecExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PreIncExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PrimaryExpr: void <init>()>
<soot.JastAddJ.PrimitiveType: void <init>()>
<soot.JastAddJ.PrimitiveTypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,int,int,int,soot.JastAddJ.Problem$Severity,soot.JastAddJ.Problem$Kind)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,int,soot.JastAddJ.Problem$Severity,soot.JastAddJ.Problem$Kind)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,soot.JastAddJ.Problem$Severity)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,soot.JastAddJ.Problem$Severity,soot.JastAddJ.Problem$Kind)>
<soot.JastAddJ.Program$1: void <init>(soot.JastAddJ.Program)>
<soot.JastAddJ.Program: void <init>()>
<soot.JastAddJ.Program: void initBytecodeReader(soot.JastAddJ.BytecodeReader)>
<soot.JastAddJ.Program: void initJavaParser(soot.JastAddJ.JavaParser)>
<soot.JastAddJ.RShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.RawClassDecl: void <init>()>
<soot.JastAddJ.RawClassDecl: void setArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.RawClassDecl: void setBodyDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.RawClassDecl: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.RawClassDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.RawClassDecl: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.RawInterfaceDecl: void <init>()>
<soot.JastAddJ.RawInterfaceDecl: void setArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.RawInterfaceDecl: void setBodyDeclList(soot.JastAddJ.List)>
<soot.JastAddJ.RawInterfaceDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.RawInterfaceDecl: void setSuperInterfaceIdList(soot.JastAddJ.List)>
<soot.JastAddJ.RawMethodDecl: void <init>()>
<soot.JastAddJ.RawMethodDecl: void setExceptionList(soot.JastAddJ.List)>
<soot.JastAddJ.RawMethodDecl: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.RawMethodDecl: void setParameterList(soot.JastAddJ.List)>
<soot.JastAddJ.RawMethodDecl: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.RawMethodDecl: void setTypeArgumentList(soot.JastAddJ.List)>
<soot.JastAddJ.ReferenceType: void <init>()>
<soot.JastAddJ.RelationalExpr: void <init>()>
<soot.JastAddJ.ReturnStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ReturnStmt: void <init>(soot.JastAddJ.Opt)>
<soot.JastAddJ.ShiftExpr: void <init>()>
<soot.JastAddJ.ShortType: void <init>()>
<soot.JastAddJ.ShortType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.SingleStaticImportDecl: void <init>(soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.SingleTypeImportDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.StaticImportDecl: void <init>()>
<soot.JastAddJ.StaticImportOnDemandDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.StaticInitializer: void <init>(soot.JastAddJ.Block)>
<soot.JastAddJ.Stmt: void <init>()>
<soot.JastAddJ.StringLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.SubExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.SuperAccess: void <init>(java.lang.String)>
<soot.JastAddJ.SuperConstructorAccess: void <init>()>
<soot.JastAddJ.SuperConstructorAccess: void <init>(java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.SuperConstructorAccess: void setArgList(soot.JastAddJ.List)>
<soot.JastAddJ.SwitchStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Block)>
<soot.JastAddJ.SwitchStmt: void setExpr(soot.JastAddJ.Expr)>
<soot.JastAddJ.SynchronizedStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Block)>
<soot.JastAddJ.ThisAccess: void <init>(java.lang.String)>
<soot.JastAddJ.ThrowStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.TryStmt: void <init>(soot.JastAddJ.Block,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.TypeAccess: void <init>()>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String,java.lang.String)>
<soot.JastAddJ.TypeDecl$1: void <init>(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeDecl$2: void <init>(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeDecl$3: void <init>(soot.JastAddJ.TypeDecl,soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.Opt)>
<soot.JastAddJ.TypeDecl$4: void <init>(soot.JastAddJ.TypeDecl,soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.TypeDecl: boolean allMethodsAbstract(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.TypeDecl: java.util.Iterator iterator()>
<soot.JastAddJ.TypeDecl: void <init>()>
<soot.JastAddJ.TypeDescriptor: void <init>(soot.JastAddJ.BytecodeParser,java.lang.String)>
<soot.JastAddJ.TypeImportOnDemandDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.TypeVariable$1: void <init>(soot.JastAddJ.TypeVariable,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeVariable: void <init>(soot.JastAddJ.Modifiers,beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.TypeVariable: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.TypeVariable: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.URShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Unary: void <init>()>
<soot.JastAddJ.Unicode: void <init>(java.io.Reader)>
<soot.JastAddJ.UnknownType: void <init>()>
<soot.JastAddJ.UnknownType: void setImplementsList(soot.JastAddJ.List)>
<soot.JastAddJ.UnknownType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.UnknownType: void setSuperClassAccessOpt(soot.JastAddJ.Opt)>
<soot.JastAddJ.VarAccess: void <init>()>
<soot.JastAddJ.VarAccess: void <init>(java.lang.String)>
<soot.JastAddJ.VarAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.VarDeclStmt: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>()>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.VariableArityParameterDeclaration: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.VariableArityParameterDeclaration)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void setOriginal(soot.JastAddJ.VariableArityParameterDeclaration)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.VariableDecl: void <init>(beaver.Symbol,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.VariableDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.VariableDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol,soot.JastAddJ.Opt)>
<soot.JastAddJ.VariableDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.Opt)>
<soot.JastAddJ.VoidType: void <init>()>
<soot.JastAddJ.VoidType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.WhileStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Stmt)>
<soot.JastAddJ.Wildcard: void <init>()>
<soot.JastAddJ.WildcardExtends: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardExtendsType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardExtendsType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.WildcardSuper: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardSuperType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List,soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardSuperType: void setModifiers(soot.JastAddJ.Modifiers)>
<soot.JastAddJ.WildcardType: void <init>(soot.JastAddJ.Modifiers,java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.WildcardsCompilationUnit: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.XorBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.ZipFilePart: void <init>(java.util.zip.ZipFile)>
<soot.JavaClassProvider$JarException: void <init>(java.lang.String)>
<soot.JavaClassSource: void <init>(java.lang.String,java.io.File)>
<soot.JimpleClassSource: void <init>(java.lang.String,java.io.InputStream)>
<soot.Main: int run(java.lang.String[])>
<soot.MethodContext: void <init>(soot.SootMethod,soot.Context)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain,java.lang.Object)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain,java.lang.Object,java.lang.Object)>
<soot.PatchingChain: void <init>(soot.util.Chain)>
<soot.PhaseOptions: void setPackManager(soot.PackManager)>
<soot.RefType: void setAnySubType(soot.AnySubType)>
<soot.RefType: void setSootClass(soot.SootClass)>
<soot.ResolutionFailedException: void <init>(java.lang.String)>
<soot.Scene: void setActiveHierarchy(soot.Hierarchy)>
<soot.Scene: void setCallGraph(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.Scene: void setEntryPoints(java.util.List)>
<soot.Scene: void setFastHierarchy(soot.FastHierarchy)>
<soot.Scene: void setMainClass(soot.SootClass)>
<soot.Scene: void setPointsToAnalysis(soot.PointsToAnalysis)>
<soot.Scene: void setSideEffectAnalysis(soot.jimple.toolkits.pointer.SideEffectAnalysis)>
<soot.Singletons$Global: void <init>(soot.Singletons)>
<soot.Singletons$Global: void <init>(soot.Singletons,soot.Singletons$1)>
<soot.SootClass: void addField(soot.SootField)>
<soot.SootClass: void addMethod(soot.SootMethod)>
<soot.SootClass: void setOuterClass(soot.SootClass)>
<soot.SootClass: void setSuperclass(soot.SootClass)>
<soot.SootField: void <init>(java.lang.String,soot.Type,int)>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type)>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type,int)>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type,int,java.util.List)>
<soot.SootMethod: void setActiveBody(soot.Body)>
<soot.SootMethod: void setDeclaringClass(soot.SootClass)>
<soot.SootMethod: void setSource(soot.MethodSource)>
<soot.SootResolver$1: void <init>(soot.SootResolver)>
<soot.SourceLocator$FoundFile: void <init>(java.io.File)>
<soot.SourceLocator$FoundFile: void <init>(java.util.zip.ZipFile,java.util.zip.ZipEntry)>
<soot.Transform: void <init>(java.lang.String,soot.Transformer)>
<soot.Type: void setArrayType(soot.ArrayType)>
<soot.TypeSwitch: void caseAnySubType(soot.AnySubType)>
<soot.TypeSwitch: void caseArrayType(soot.ArrayType)>
<soot.TypeSwitch: void caseDoubleType(soot.DoubleType)>
<soot.TypeSwitch: void caseFloatType(soot.FloatType)>
<soot.TypeSwitch: void caseIntType(soot.IntType)>
<soot.TypeSwitch: void caseLongType(soot.LongType)>
<soot.TypeSwitch: void caseNullType(soot.NullType)>
<soot.TypeSwitch: void caseRefType(soot.RefType)>
<soot.TypeSwitch: void caseUnknownType(soot.UnknownType)>
<soot.TypeSwitch: void caseVoidType(soot.VoidType)>
<soot.TypeSwitch: void setResult(java.lang.Object)>
<soot.baf.BafBody: void <init>(soot.SootMethod)>
<soot.baf.InstBox: void <init>(soot.baf.Inst)>
<soot.baf.JasminClass$1$10: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpLtInst)>
<soot.baf.JasminClass$1$11: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpLeInst)>
<soot.baf.JasminClass$1$12: void <init>(soot.baf.JasminClass$1,java.lang.String)>
<soot.baf.JasminClass$1$1: void <init>(soot.baf.JasminClass$1)>
<soot.baf.JasminClass$1$2: void <init>(soot.baf.JasminClass$1,int)>
<soot.baf.JasminClass$1$3: void <init>(soot.baf.JasminClass$1,int)>
<soot.baf.JasminClass$1$4: void <init>(soot.baf.JasminClass$1)>
<soot.baf.JasminClass$1$5: void <init>(soot.baf.JasminClass$1)>
<soot.baf.JasminClass$1$6: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpEqInst)>
<soot.baf.JasminClass$1$7: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpNeInst)>
<soot.baf.JasminClass$1$8: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpGtInst)>
<soot.baf.JasminClass$1$9: void <init>(soot.baf.JasminClass$1,soot.baf.IfCmpGeInst)>
<soot.baf.JasminClass$1: void <init>(soot.baf.JasminClass)>
<soot.baf.PlaceholderInst: void <init>(soot.Unit)>
<soot.baf.internal.AbstractBranchInst: void <init>(soot.UnitBox)>
<soot.baf.internal.AbstractOpTypeBranchInst: void <init>(soot.Type,soot.UnitBox)>
<soot.baf.internal.AbstractRefTypeInst: void <init>(soot.RefType)>
<soot.baf.internal.BFieldGetInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BFieldPutInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BIdentityInst: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.baf.internal.BIncInst: void <init>(soot.Local,soot.jimple.Constant)>
<soot.baf.internal.BInstanceCastInst: void <init>(soot.Type)>
<soot.baf.internal.BInstanceOfInst: void <init>(soot.Type)>
<soot.baf.internal.BInterfaceInvokeInst: void <init>(soot.SootMethodRef,int)>
<soot.baf.internal.BNewArrayInst: void <init>(soot.Type)>
<soot.baf.internal.BNewInst: void <init>(soot.RefType)>
<soot.baf.internal.BNewMultiArrayInst: void <init>(soot.ArrayType,int)>
<soot.baf.internal.BPopInst: void <init>(soot.Type)>
<soot.baf.internal.BPrimitiveCastInst$1: void <init>(soot.baf.internal.BPrimitiveCastInst)>
<soot.baf.internal.BPrimitiveCastInst: void <init>(soot.Type,soot.Type)>
<soot.baf.internal.BPushInst: void <init>(soot.jimple.Constant)>
<soot.baf.internal.BSpecialInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BStaticGetInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BStaticInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BStaticPutInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.baf.internal.BVirtualInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BafLocal: void <init>(java.lang.String,soot.Type)>
<soot.baf.internal.BafLocal: void setType(soot.Type)>
<soot.baf.internal.BafLocalBox: void <init>(soot.Value)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: boolean tryToMoveUnit(soot.Unit,soot.toolkits.graph.Block,soot.Unit,soot.Unit,int)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: int pushStoreToLoad(soot.Unit,soot.Unit,soot.toolkits.graph.Block)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: int stackIndependent(soot.Unit,soot.Unit,soot.toolkits.graph.Block,int)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: soot.Body access$002(soot.baf.toolkits.base.LoadStoreOptimizer$Instance,soot.Body)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: soot.util.Chain access$102(soot.baf.toolkits.base.LoadStoreOptimizer$Instance,soot.util.Chain)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: void <init>(soot.baf.toolkits.base.LoadStoreOptimizer)>
<soot.baf.toolkits.base.LoadStoreOptimizer: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.coffi.BasicBlock: void <init>(soot.coffi.Instruction,soot.coffi.Instruction)>
<soot.coffi.CFG: boolean jimplify(soot.coffi.cp_info[],int,soot.jimple.JimpleBody)>
<soot.coffi.CFG: void <init>(soot.coffi.method_info)>
<soot.coffi.CoffiMethodSource: void <init>(soot.coffi.ClassFile,soot.coffi.method_info)>
<soot.coffi.OutFlow: void <init>(soot.coffi.TypeStack)>
<soot.coffi.Util: void setClassNameToAbbreviation(java.util.Map)>
<soot.dava.CorruptASTException: void <init>(java.lang.String)>
<soot.dava.Dava: void set_CurrentPackageContext(soot.util.IterableSet)>
<soot.dava.DavaBody: void <init>(soot.SootMethod)>
<soot.dava.DavaBody: void set_ConstructorExpr(soot.jimple.InstanceInvokeExpr)>
<soot.dava.DavaBody: void set_ConstructorUnit(soot.Unit)>
<soot.dava.DavaBody: void set_ParamMap(java.util.Map)>
<soot.dava.DavaFlowAnalysisException: void <init>(java.lang.String)>
<soot.dava.DavaStaticBlockCleaner: void staticBlockInlining(soot.SootClass)>
<soot.dava.DavaUnitPrinter: void <init>(soot.dava.DavaBody)>
<soot.dava.DecompilationException: void <init>()>
<soot.dava.DecompilationException: void <init>(java.lang.String)>
<soot.dava.MethodCallFinder: void <init>(soot.dava.DavaStaticBlockCleaner)>
<soot.dava.MethodCallFinder: void inASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.RetriggerAnalysisException: void <init>()>
<soot.dava.StaticDefinitionFinder: void <init>(soot.SootMethod)>
<soot.dava.internal.AST.ASTAggregatedCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAggregatedCondition: void setLeftOp(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAggregatedCondition: void setRightOp(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAndCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTBinaryCondition: void <init>(soot.jimple.ConditionExpr)>
<soot.dava.internal.AST.ASTControlFlowNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTControlFlowNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr)>
<soot.dava.internal.AST.ASTControlFlowNode: void set_Condition(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTDoWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTDoWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTDoWhileNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTForLoopNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTForLoopNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void apply(soot.dava.toolkits.base.AST.analysis.Analysis)>
<soot.dava.internal.AST.ASTIfElseNode: void replace(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void replaceBody(java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void replaceElseBody(java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void replace(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTLabeledBlockNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List)>
<soot.dava.internal.AST.ASTLabeledBlockNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTLabeledNode: void <init>(soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.AST.ASTLabeledNode: void set_Label(soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.AST.ASTMethodNode: void <init>(java.util.List)>
<soot.dava.internal.AST.ASTMethodNode: void apply(soot.dava.toolkits.base.AST.analysis.Analysis)>
<soot.dava.internal.AST.ASTMethodNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTMethodNode: void setDavaBody(soot.dava.DavaBody)>
<soot.dava.internal.AST.ASTMethodNode: void setDeclarations(soot.dava.internal.AST.ASTStatementSequenceNode)>
<soot.dava.internal.AST.ASTMethodNode: void setDontPrintLocals(java.util.List)>
<soot.dava.internal.AST.ASTOrCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTStatementSequenceNode: void <init>(java.util.List)>
<soot.dava.internal.AST.ASTStatementSequenceNode: void setStatements(java.util.List)>
<soot.dava.internal.AST.ASTSwitchNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.Value,java.util.List,java.util.Map)>
<soot.dava.internal.AST.ASTSwitchNode: void replaceIndex2BodyList(java.util.Map)>
<soot.dava.internal.AST.ASTSynchronizedBlockNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,soot.Value)>
<soot.dava.internal.AST.ASTSynchronizedBlockNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTTryNode$container: void <init>(soot.dava.internal.AST.ASTTryNode,java.lang.Object)>
<soot.dava.internal.AST.ASTTryNode$container: void replaceBody(java.lang.Object)>
<soot.dava.internal.AST.ASTTryNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,java.util.List,java.util.Map,java.util.Map)>
<soot.dava.internal.AST.ASTTryNode: void replaceTryBody(java.util.List)>
<soot.dava.internal.AST.ASTUnaryCondition: void <init>(soot.Value)>
<soot.dava.internal.AST.ASTUnaryCondition: void setValue(soot.Value)>
<soot.dava.internal.AST.ASTUnconditionalLoopNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List)>
<soot.dava.internal.AST.ASTUnconditionalLoopNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: void replaceBody(java.util.List)>
<soot.dava.internal.SET.SETBasicBlock: void add(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETControlFlowNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETCycleNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETDagNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETDoWhileNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETIfElseNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet,soot.util.IterableSet,soot.util.IterableSet)>
<soot.dava.internal.SET.SETLabeledBlockNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean add_Child(soot.dava.internal.SET.SETNode,soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean insert_ChildBefore(soot.dava.internal.SET.SETNode,soot.dava.internal.SET.SETNode,soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean nest(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: void find_SmallestSETNode(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.SET.SETStatementSequenceNode: void <init>(soot.util.IterableSet,soot.dava.DavaBody)>
<soot.dava.internal.SET.SETSwitchNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.Value,soot.util.IterableSet,java.util.List,soot.util.IterableSet)>
<soot.dava.internal.SET.SETSynchronizedBlockNode: void <init>(soot.dava.toolkits.base.finders.ExceptionNode,soot.Value)>
<soot.dava.internal.SET.SETTopNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETTryNode: void <init>(soot.util.IterableSet,soot.dava.toolkits.base.finders.ExceptionNode,soot.dava.internal.asg.AugmentedStmtGraph,soot.dava.DavaBody)>
<soot.dava.internal.SET.SETUnconditionalWhileNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETWhileNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.asg.AugmentedStmt: void <init>(soot.jimple.Stmt)>
<soot.dava.internal.asg.AugmentedStmt: void set_Stmt(soot.jimple.Stmt)>
<soot.dava.internal.javaRep.DAbruptStmt: void <init>(java.lang.String,soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.javaRep.DArrayInitExpr: void <init>(soot.ValueBox[],soot.Type)>
<soot.dava.internal.javaRep.DArrayInitValueBox: void <init>(soot.Value)>
<soot.dava.internal.javaRep.DAssignStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.dava.internal.javaRep.DInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef,java.util.HashSet)>
<soot.dava.internal.javaRep.DIntConstant: void <init>(int,soot.Type)>
<soot.dava.internal.javaRep.DInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.dava.internal.javaRep.DNewInvokeExpr: void <init>(soot.RefType,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.dava.internal.javaRep.DShortcutAssignStmt: void <init>(soot.dava.internal.javaRep.DAssignStmt,soot.Type)>
<soot.dava.internal.javaRep.DShortcutIf: void <init>(soot.ValueBox,soot.ValueBox,soot.ValueBox)>
<soot.dava.internal.javaRep.DSpecialInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DStaticFieldRef: void <init>(soot.SootFieldRef,boolean)>
<soot.dava.internal.javaRep.DStaticFieldRef: void <init>(soot.SootFieldRef,java.lang.String)>
<soot.dava.internal.javaRep.DStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DThisRef: void <init>(soot.RefType)>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: void <init>(soot.Type,soot.dava.DavaBody)>
<soot.dava.internal.javaRep.DVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List,java.util.HashSet)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void set_CurExceptionSet(soot.util.IterableSet)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.interProcedural.ConstantFieldValueFinder: void <init>(soot.util.Chain)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CP: void <init>(soot.dava.internal.AST.ASTMethodNode,java.util.HashMap,java.util.HashMap)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void <init>(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable,boolean)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void <init>(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void setValue(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: void <init>(soot.Local)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: void <init>(soot.SootField)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies,soot.Local,soot.Local)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: void <init>(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder)>
<soot.dava.toolkits.base.AST.transformations.EliminateConditions: void <init>(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.transformations.ForLoopCreationHelper: void <init>(soot.dava.internal.AST.ASTStatementSequenceNode,soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.transformations.IfElseSplitter$1: void <init>(soot.dava.toolkits.base.AST.transformations.IfElseSplitter,java.lang.String)>
<soot.dava.toolkits.base.AST.transformations.IfElseSplitter: void inASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.transformations.IfElseSplitter: void outASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.transformations.LocalVariableCleaner: void <init>(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.transformations.ShortcutArrayInit: void inASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.transformations.SuperFirstStmtHandler: void <init>(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.transformations.UnreachableCodeEliminator: void <init>(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.transformations.UselessAbruptStmtRemover: void inASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void <init>(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.traversals.CopyPropagation: void <init>(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.traversals.InitializationDeclarationShortcut: void <init>(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.ExceptionNode: void <init>(soot.util.IterableSet,soot.SootClass,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.SwitchNode: void <init>(soot.dava.internal.asg.AugmentedStmt,java.util.TreeSet,soot.util.IterableSet)>
<soot.dava.toolkits.base.finders.SynchronizedBlockFinder: void find(soot.dava.DavaBody,soot.dava.internal.asg.AugmentedStmtGraph,soot.dava.internal.SET.SETNode)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: void <init>(soot.dava.toolkits.base.misc.PackageNamer,java.lang.String,soot.dava.toolkits.base.misc.PackageNamer$NameHolder,boolean)>
<soot.dava.toolkits.base.renamer.Renamer: void <init>(soot.dava.toolkits.base.renamer.heuristicSet,soot.dava.internal.AST.ASTMethodNode)>
<soot.grimp.Grimp$1: void <init>(soot.grimp.Grimp,soot.grimp.internal.ExprBox)>
<soot.grimp.GrimpBody$1: void <init>(soot.grimp.GrimpBody,soot.jimple.internal.StmtBox,soot.jimple.internal.StmtBox)>
<soot.grimp.GrimpBody$2: void <init>(soot.grimp.GrimpBody,java.util.HashMap)>
<soot.grimp.GrimpBody: void <init>(soot.SootMethod)>
<soot.grimp.internal.AbstractGrimpFloatBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.AbstractGrimpIntBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.AbstractGrimpIntLongBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.ExprBox: void <init>(soot.Value)>
<soot.grimp.internal.GCastExpr: void <init>(soot.Value,soot.Type)>
<soot.grimp.internal.GInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef)>
<soot.grimp.internal.GInstanceOfExpr: void <init>(soot.Value,soot.Type)>
<soot.grimp.internal.GInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.grimp.internal.GNewInvokeExpr: void <init>(soot.RefType,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.grimp.internal.GRValueBox: void <init>(soot.Value)>
<soot.grimp.internal.GSpecialInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.grimp.internal.GVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.ObjExprBox: void <init>(soot.Value)>
<soot.javaToJimple.AbstractJimpleBodyBuilder: void <init>()>
<soot.javaToJimple.AnonClassInitMethodSource: void anonType(polyglot.types.ClassType)>
<soot.javaToJimple.AnonClassInitMethodSource: void outerClassType(soot.Type)>
<soot.javaToJimple.AnonClassInitMethodSource: void polyglotType(polyglot.types.ClassType)>
<soot.javaToJimple.AnonClassInitMethodSource: void superOuterType(soot.Type)>
<soot.javaToJimple.AnonClassInitMethodSource: void thisOuterType(soot.Type)>
<soot.javaToJimple.AnonConstructorFinder: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.javaToJimple.AnonInitBodyBuilder: void <init>()>
<soot.javaToJimple.AnonLocalClassInfo: void finalLocalsAvail(java.util.ArrayList)>
<soot.javaToJimple.AnonLocalClassInfo: void finalLocalsUsed(java.util.ArrayList)>
<soot.javaToJimple.CastInsertionVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.javaToJimple.ClassResolver: void <init>(soot.SootClass,java.util.Set)>
<soot.javaToJimple.InitialResolver: void hierarchy(soot.FastHierarchy)>
<soot.javaToJimple.InitialResolver: void setAst(polyglot.ast.Node)>
<soot.javaToJimple.InitialResolver: void setHasOuterRefInInit(java.util.ArrayList)>
<soot.javaToJimple.InitialResolver: void setInnerClassInfoMap(java.util.HashMap)>
<soot.javaToJimple.InitialResolver: void setSpecialAnonMap(java.util.HashMap)>
<soot.javaToJimple.InnerClassInfo: void <init>(soot.SootClass,java.lang.String,int)>
<soot.javaToJimple.JavaToJimple$1: void <init>(soot.javaToJimple.JavaToJimple)>
<soot.javaToJimple.JimpleBodyBuilder: void <init>()>
<soot.javaToJimple.LocalGenerator: void <init>(soot.Body)>
<soot.javaToJimple.PolyglotMethodSource: void <init>(polyglot.ast.Block,java.util.List)>
<soot.javaToJimple.PolyglotMethodSource: void setFieldInits(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setFinalsList(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setInitializerBlocks(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setJBB(soot.javaToJimple.AbstractJimpleBodyBuilder)>
<soot.javaToJimple.PolyglotMethodSource: void setOuterClassThisInit(soot.Local)>
<soot.javaToJimple.PolyglotMethodSource: void setStaticFieldInits(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setStaticInitializerBlocks(java.util.ArrayList)>
<soot.javaToJimple.PrivateFieldAccMethodSource: void <init>(soot.Type,java.lang.String,boolean,soot.SootClass)>
<soot.javaToJimple.PrivateFieldSetMethodSource: void <init>(soot.Type,java.lang.String,boolean)>
<soot.javaToJimple.PrivateMethodAccMethodSource: void <init>(polyglot.types.MethodInstance)>
<soot.javaToJimple.SaveASTVisitor: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.frontend.ExtensionInfo)>
<soot.javaToJimple.jj.ExtensionInfo$1: void <init>(soot.javaToJimple.jj.ExtensionInfo,polyglot.frontend.ExtensionInfo)>
<soot.javaToJimple.jj.ExtensionInfo: void sourceJobMap(java.util.HashMap)>
<soot.javaToJimple.jj.ast.JjArrayAccessAssign_c: void <init>(polyglot.util.Position,polyglot.ast.ArrayAccess,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjArrayInit_c: void <init>(polyglot.util.Position,java.util.List)>
<soot.javaToJimple.jj.ast.JjBinary_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Binary$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjCast_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjFieldAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Field,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjFieldDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjLocalAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Local,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjLocalDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjReturn_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjUnary_c: void <init>(polyglot.util.Position,polyglot.ast.Unary$Operator,polyglot.ast.Expr)>
<soot.jimple.AbstractJimpleValueSwitch: void setResult(java.lang.Object)>
<soot.jimple.GroupIntPair: void <init>(java.lang.Object,int)>
<soot.jimple.JasminClass$1$1: void <init>(soot.jimple.JasminClass$1)>
<soot.jimple.JasminClass$1$2: void <init>(soot.jimple.JasminClass$1,int)>
<soot.jimple.JasminClass$1: void <init>(soot.jimple.JasminClass,soot.Value)>
<soot.jimple.JasminClass$2: void <init>(soot.jimple.JasminClass,java.lang.String)>
<soot.jimple.JasminClass$3: void <init>(soot.jimple.JasminClass,java.lang.String)>
<soot.jimple.JasminClass$4$1: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4$2: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4$3: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4$4: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4$5: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4$6: void <init>(soot.jimple.JasminClass$4)>
<soot.jimple.JasminClass$4: void <init>(soot.jimple.JasminClass,soot.Value,java.lang.String)>
<soot.jimple.JasminClass$5$1: void <init>(soot.jimple.JasminClass$5)>
<soot.jimple.JasminClass$5: void <init>(soot.jimple.JasminClass)>
<soot.jimple.JasminClass$6: void <init>(soot.jimple.JasminClass,int,soot.Local)>
<soot.jimple.JasminClass$7$10: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$11: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$12: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$13: void <init>(soot.jimple.JasminClass$7,soot.jimple.NegExpr)>
<soot.jimple.JasminClass$7$14: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$15: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$16: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$17: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$18: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$19: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$1: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$20: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$2: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$3: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$4: void <init>(soot.jimple.JasminClass$7,soot.Type,soot.Type,soot.jimple.CastExpr)>
<soot.jimple.JasminClass$7$5: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$6: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$7: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$8: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7$9: void <init>(soot.jimple.JasminClass$7)>
<soot.jimple.JasminClass$7: void <init>(soot.jimple.JasminClass)>
<soot.jimple.JimpleBody: void <init>(soot.SootMethod)>
<soot.jimple.JimpleMethodSource: void <init>(soot.jimple.parser.JimpleAST)>
<soot.jimple.JimpleToBafContext: void setCurrentUnit(soot.Unit)>
<soot.jimple.NoSuchLocalException: void <init>()>
<soot.jimple.ParameterRef: void <init>(soot.Type,int)>
<soot.jimple.ReachingTypeDumper$StringComparator: void <init>(soot.jimple.ReachingTypeDumper)>
<soot.jimple.ReachingTypeDumper: void <init>(soot.PointsToAnalysis,java.lang.String)>
<soot.jimple.StaticFieldRef: void <init>(soot.SootFieldRef)>
<soot.jimple.StmtBody: void <init>(soot.SootMethod)>
<soot.jimple.ThisRef: void <init>(soot.RefType)>
<soot.jimple.internal.AbstractCastExpr: void <init>(soot.ValueBox,soot.Type)>
<soot.jimple.internal.AbstractInstanceFieldRef: void <init>(soot.ValueBox,soot.SootFieldRef)>
<soot.jimple.internal.AbstractInstanceOfExpr: void <init>(soot.ValueBox,soot.Type)>
<soot.jimple.internal.AbstractInterfaceInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractJimpleFloatBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.AbstractLengthExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractNegExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractNewArrayExpr: void <init>(soot.Type,soot.ValueBox)>
<soot.jimple.internal.AbstractNewMultiArrayExpr: void <init>(soot.ArrayType,soot.ValueBox[])>
<soot.jimple.internal.AbstractSpecialInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractStaticInvokeExpr: void <init>(soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractUnopExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractVirtualInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.ConditionExprBox: void <init>(soot.Value)>
<soot.jimple.internal.IdentityRefBox: void <init>(soot.Value)>
<soot.jimple.internal.ImmediateBox: void <init>(soot.Value)>
<soot.jimple.internal.InvokeExprBox: void <init>(soot.Value)>
<soot.jimple.internal.JArrayRef: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JAssignStmt$1: void <init>(soot.jimple.internal.JAssignStmt,soot.jimple.JimpleToBafContext,java.util.List,soot.Value)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value,soot.jimple.internal.JAssignStmt$1)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void setOtherBox(soot.ValueBox)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value,soot.jimple.internal.JAssignStmt$1)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void setOtherBox(soot.ValueBox)>
<soot.jimple.internal.JAssignStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JAssignStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JCastExpr: void <init>(soot.Value,soot.Type)>
<soot.jimple.internal.JEnterMonitorStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JExitMonitorStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JGotoStmt: void <init>(soot.UnitBox)>
<soot.jimple.internal.JIdentityStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JIfStmt$1: void <init>(soot.jimple.internal.JIfStmt,java.util.List)>
<soot.jimple.internal.JIfStmt$2: void <init>(soot.jimple.internal.JIfStmt,java.util.List)>
<soot.jimple.internal.JIfStmt$3: void <init>(soot.jimple.internal.JIfStmt,java.util.List,soot.Value)>
<soot.jimple.internal.JIfStmt: void <init>(soot.Value,soot.UnitBox)>
<soot.jimple.internal.JIfStmt: void <init>(soot.ValueBox,soot.UnitBox)>
<soot.jimple.internal.JIfStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef)>
<soot.jimple.internal.JInstanceOfExpr: void <init>(soot.Value,soot.Type)>
<soot.jimple.internal.JInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JInvokeStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JInvokeStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JLookupSwitchStmt: void <init>(soot.Value,java.util.List,java.util.List,soot.UnitBox)>
<soot.jimple.internal.JLookupSwitchStmt: void <init>(soot.ValueBox,java.util.List,soot.UnitBox[],soot.UnitBox)>
<soot.jimple.internal.JNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>
<soot.jimple.internal.JNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.jimple.internal.JRetStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JReturnStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JSpecialInvokeExpr: void <init>(soot.Local,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JTableSwitchStmt: void <init>(soot.Value,int,int,java.util.List,soot.UnitBox)>
<soot.jimple.internal.JTableSwitchStmt: void <init>(soot.ValueBox,int,int,soot.UnitBox[],soot.UnitBox)>
<soot.jimple.internal.JThrowStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.jimple.internal.JTrap: void <init>(soot.SootClass,soot.UnitBox,soot.UnitBox,soot.UnitBox)>
<soot.jimple.internal.JVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JimpleLocal: void <init>(java.lang.String,soot.Type)>
<soot.jimple.internal.JimpleLocal: void setType(soot.Type)>
<soot.jimple.internal.JimpleLocalBox: void <init>(soot.Value)>
<soot.jimple.internal.RValueBox: void <init>(soot.Value)>
<soot.jimple.internal.StmtBox: void <init>(soot.jimple.Stmt)>
<soot.jimple.internal.VariableBox: void <init>(soot.Value)>
<soot.jimple.parser.BodyExtractorWalker: void <init>(soot.SootClass,soot.SootResolver,java.util.Map)>
<soot.jimple.parser.CstPoolExtractor$CstPoolExtractorWalker: void <init>(soot.jimple.parser.CstPoolExtractor)>
<soot.jimple.parser.CstPoolExtractor: void <init>(soot.jimple.parser.node.Start)>
<soot.jimple.parser.SkeletonExtractorWalker: void <init>(soot.SootResolver,soot.SootClass)>
<soot.jimple.parser.Walker: void <init>(soot.SootClass,soot.SootResolver)>
<soot.jimple.parser.lexer.Lexer: void <init>(java.io.PushbackReader)>
<soot.jimple.parser.lexer.LexerException: void <init>(java.lang.String)>
<soot.jimple.parser.node.AAbstractModifier: void <init>(soot.jimple.parser.node.TAbstract)>
<soot.jimple.parser.node.AAbstractModifier: void setAbstract(soot.jimple.parser.node.TAbstract)>
<soot.jimple.parser.node.AAndBinop: void <init>(soot.jimple.parser.node.TAnd)>
<soot.jimple.parser.node.AAndBinop: void setAnd(soot.jimple.parser.node.TAnd)>
<soot.jimple.parser.node.AAnnotationModifier: void <init>(soot.jimple.parser.node.TAnnotation)>
<soot.jimple.parser.node.AAnnotationModifier: void setAnnotation(soot.jimple.parser.node.TAnnotation)>
<soot.jimple.parser.node.AArrayBrackets: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayBrackets: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AArrayBrackets: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayDescriptor: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayDescriptor: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AArrayDescriptor: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AArrayDescriptor: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayNewExpr: void <init>(soot.jimple.parser.node.TNewarray,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PNonvoidType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayNewExpr: void setFixedArrayDescriptor(soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayNewExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AArrayNewExpr: void setNewarray(soot.jimple.parser.node.TNewarray)>
<soot.jimple.parser.node.AArrayNewExpr: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AArrayNewExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AArrayRef: void <init>(soot.jimple.parser.node.TIdentifier,soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayRef: void setFixedArrayDescriptor(soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayRef: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AArrayReference: void <init>(soot.jimple.parser.node.PArrayRef)>
<soot.jimple.parser.node.AArrayReference: void setArrayRef(soot.jimple.parser.node.PArrayRef)>
<soot.jimple.parser.node.AAssignStatement: void <init>(soot.jimple.parser.node.PVariable,soot.jimple.parser.node.TEquals,soot.jimple.parser.node.PExpression,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AAssignStatement: void setEquals(soot.jimple.parser.node.TEquals)>
<soot.jimple.parser.node.AAssignStatement: void setExpression(soot.jimple.parser.node.PExpression)>
<soot.jimple.parser.node.AAssignStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AAssignStatement: void setVariable(soot.jimple.parser.node.PVariable)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.ABaseNonvoidType)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.ABaseNonvoidType,soot.jimple.parser.node.ABaseNonvoidType$1)>
<soot.jimple.parser.node.ABaseNonvoidType: void <init>(soot.jimple.parser.node.PBaseTypeNoName,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.ABaseNonvoidType: void setBaseTypeNoName(soot.jimple.parser.node.PBaseTypeNoName)>
<soot.jimple.parser.node.ABinopBoolExpr: void <init>(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopBoolExpr: void setBinopExpr(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopExpr: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.PBinop,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpr: void setBinop(soot.jimple.parser.node.PBinop)>
<soot.jimple.parser.node.ABinopExpr: void setLeft(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpr: void setRight(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpression: void <init>(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopExpression: void setBinopExpr(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABooleanBaseType: void <init>(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseType: void setBoolean(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: void <init>(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: void setBoolean(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABreakpointStatement: void <init>(soot.jimple.parser.node.TBreakpoint,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ABreakpointStatement: void setBreakpoint(soot.jimple.parser.node.TBreakpoint)>
<soot.jimple.parser.node.ABreakpointStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AByteBaseType: void <init>(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseType: void setByte(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseTypeNoName: void <init>(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseTypeNoName: void setByte(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.ACaseStmt: void <init>(soot.jimple.parser.node.PCaseLabel,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.ACaseStmt: void setCaseLabel(soot.jimple.parser.node.PCaseLabel)>
<soot.jimple.parser.node.ACaseStmt: void setColon(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ACaseStmt: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.ACastExpression: void <init>(soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PNonvoidType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ACastExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ACastExpression: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ACastExpression: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ACastExpression: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ACatchClause: void <init>(soot.jimple.parser.node.TCatch,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TFrom,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TTo,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TWith,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ACatchClause: void setCatch(soot.jimple.parser.node.TCatch)>
<soot.jimple.parser.node.ACatchClause: void setFrom(soot.jimple.parser.node.TFrom)>
<soot.jimple.parser.node.ACatchClause: void setFromLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACatchClause: void setName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.ACatchClause: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ACatchClause: void setTo(soot.jimple.parser.node.TTo)>
<soot.jimple.parser.node.ACatchClause: void setToLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACatchClause: void setWith(soot.jimple.parser.node.TWith)>
<soot.jimple.parser.node.ACatchClause: void setWithLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACharBaseType: void <init>(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseType: void setChar(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseTypeNoName: void <init>(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseTypeNoName: void setChar(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.AClassFileType: void <init>(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClassFileType: void setTheclass(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClassNameBaseType: void <init>(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameBaseType: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void <init>(soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AClassNameSingleClassNameList: void <init>(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameSingleClassNameList: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClzzConstant: void <init>(soot.jimple.parser.node.TClass,soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.AClzzConstant: void setId(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClzzConstant: void setStringConstant(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.ACmpBinop: void <init>(soot.jimple.parser.node.TCmp)>
<soot.jimple.parser.node.ACmpBinop: void setCmp(soot.jimple.parser.node.TCmp)>
<soot.jimple.parser.node.ACmpeqBinop: void <init>(soot.jimple.parser.node.TCmpeq)>
<soot.jimple.parser.node.ACmpeqBinop: void setCmpeq(soot.jimple.parser.node.TCmpeq)>
<soot.jimple.parser.node.ACmpgBinop: void <init>(soot.jimple.parser.node.TCmpg)>
<soot.jimple.parser.node.ACmpgBinop: void setCmpg(soot.jimple.parser.node.TCmpg)>
<soot.jimple.parser.node.ACmpgeBinop: void <init>(soot.jimple.parser.node.TCmpge)>
<soot.jimple.parser.node.ACmpgeBinop: void setCmpge(soot.jimple.parser.node.TCmpge)>
<soot.jimple.parser.node.ACmpgtBinop: void <init>(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.ACmpgtBinop: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.ACmplBinop: void <init>(soot.jimple.parser.node.TCmpl)>
<soot.jimple.parser.node.ACmplBinop: void setCmpl(soot.jimple.parser.node.TCmpl)>
<soot.jimple.parser.node.ACmpleBinop: void <init>(soot.jimple.parser.node.TCmple)>
<soot.jimple.parser.node.ACmpleBinop: void setCmple(soot.jimple.parser.node.TCmple)>
<soot.jimple.parser.node.ACmpltBinop: void <init>(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.ACmpltBinop: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.ACmpneBinop: void <init>(soot.jimple.parser.node.TCmpne)>
<soot.jimple.parser.node.ACmpneBinop: void setCmpne(soot.jimple.parser.node.TCmpne)>
<soot.jimple.parser.node.AConstantCaseLabel: void <init>(soot.jimple.parser.node.TCase,soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AConstantCaseLabel: void setCase(soot.jimple.parser.node.TCase)>
<soot.jimple.parser.node.AConstantCaseLabel: void setIntegerConstant(soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AConstantCaseLabel: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AConstantImmediate: void <init>(soot.jimple.parser.node.PConstant)>
<soot.jimple.parser.node.AConstantImmediate: void setConstant(soot.jimple.parser.node.PConstant)>
<soot.jimple.parser.node.ADeclaration: void <init>(soot.jimple.parser.node.PJimpleType,soot.jimple.parser.node.PLocalNameList,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ADeclaration: void setJimpleType(soot.jimple.parser.node.PJimpleType)>
<soot.jimple.parser.node.ADeclaration: void setLocalNameList(soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.ADeclaration: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ADefaultCaseLabel: void <init>(soot.jimple.parser.node.TDefault)>
<soot.jimple.parser.node.ADefaultCaseLabel: void setDefault(soot.jimple.parser.node.TDefault)>
<soot.jimple.parser.node.ADivBinop: void <init>(soot.jimple.parser.node.TDiv)>
<soot.jimple.parser.node.ADivBinop: void setDiv(soot.jimple.parser.node.TDiv)>
<soot.jimple.parser.node.ADoubleBaseType: void <init>(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseType: void setDouble(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: void <init>(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: void setDouble(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.AEmptyMethodBody: void <init>(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEmptyMethodBody: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEntermonitorStatement: void <init>(soot.jimple.parser.node.TEntermonitor,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEntermonitorStatement: void setEntermonitor(soot.jimple.parser.node.TEntermonitor)>
<soot.jimple.parser.node.AEntermonitorStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AEntermonitorStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEnumModifier: void <init>(soot.jimple.parser.node.TEnum)>
<soot.jimple.parser.node.AEnumModifier: void setEnum(soot.jimple.parser.node.TEnum)>
<soot.jimple.parser.node.AExitmonitorStatement: void <init>(soot.jimple.parser.node.TExitmonitor,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AExitmonitorStatement: void setExitmonitor(soot.jimple.parser.node.TExitmonitor)>
<soot.jimple.parser.node.AExitmonitorStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AExitmonitorStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AExtendsClause: void <init>(soot.jimple.parser.node.TExtends,soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AExtendsClause: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AExtendsClause: void setExtends(soot.jimple.parser.node.TExtends)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AFieldMember)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AFieldMember,soot.jimple.parser.node.AFieldMember$1)>
<soot.jimple.parser.node.AFieldMember: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AFieldMember: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AFieldMember: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AFieldMember: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AFieldReference: void <init>(soot.jimple.parser.node.PFieldRef)>
<soot.jimple.parser.node.AFieldReference: void setFieldRef(soot.jimple.parser.node.PFieldRef)>
<soot.jimple.parser.node.AFieldSignature: void <init>(soot.jimple.parser.node.TCmplt,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AFieldSignature: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AFieldSignature: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AFieldSignature: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.AFieldSignature: void setFieldName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AFieldSignature: void setFirst(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.AFieldSignature: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AFile$Modifier_Cast: void <init>(soot.jimple.parser.node.AFile)>
<soot.jimple.parser.node.AFile$Modifier_Cast: void <init>(soot.jimple.parser.node.AFile,soot.jimple.parser.node.AFile$1)>
<soot.jimple.parser.node.AFile: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PFileType,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.PExtendsClause,soot.jimple.parser.node.PImplementsClause,soot.jimple.parser.node.PFileBody)>
<soot.jimple.parser.node.AFile: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AFile: void setExtendsClause(soot.jimple.parser.node.PExtendsClause)>
<soot.jimple.parser.node.AFile: void setFileBody(soot.jimple.parser.node.PFileBody)>
<soot.jimple.parser.node.AFile: void setFileType(soot.jimple.parser.node.PFileType)>
<soot.jimple.parser.node.AFile: void setImplementsClause(soot.jimple.parser.node.PImplementsClause)>
<soot.jimple.parser.node.AFileBody$Member_Cast: void <init>(soot.jimple.parser.node.AFileBody)>
<soot.jimple.parser.node.AFileBody$Member_Cast: void <init>(soot.jimple.parser.node.AFileBody,soot.jimple.parser.node.AFileBody$1)>
<soot.jimple.parser.node.AFileBody: void <init>(soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPMember,soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFileBody: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.AFileBody: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFinalModifier: void <init>(soot.jimple.parser.node.TFinal)>
<soot.jimple.parser.node.AFinalModifier: void setFinal(soot.jimple.parser.node.TFinal)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AFloatBaseType: void <init>(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseType: void setFloat(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseTypeNoName: void <init>(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseTypeNoName: void setFloat(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatConstant: void <init>(soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TFloatConstant)>
<soot.jimple.parser.node.AFloatConstant: void setFloatConstant(soot.jimple.parser.node.TFloatConstant)>
<soot.jimple.parser.node.AFloatConstant: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AFullIdentClassName: void <init>(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullIdentClassName: void setFullIdentifier(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AFullIdentNonvoidType)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AFullIdentNonvoidType,soot.jimple.parser.node.AFullIdentNonvoidType$1)>
<soot.jimple.parser.node.AFullIdentNonvoidType: void <init>(soot.jimple.parser.node.TFullIdentifier,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AFullIdentNonvoidType: void setFullIdentifier(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody: void <init>(soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPDeclaration,soot.jimple.parser.node.XPStatement,soot.jimple.parser.node.XPCatchClause,soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFullMethodBody: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.AFullMethodBody: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AGotoStatement: void <init>(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AGotoStatement: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AGotoStmt: void <init>(soot.jimple.parser.node.TGoto,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AGotoStmt: void setGoto(soot.jimple.parser.node.TGoto)>
<soot.jimple.parser.node.AGotoStmt: void setLabelName(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.AGotoStmt: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentClassName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentClassName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AIdentNonvoidType)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AIdentNonvoidType,soot.jimple.parser.node.AIdentNonvoidType$1)>
<soot.jimple.parser.node.AIdentNonvoidType: void <init>(soot.jimple.parser.node.TIdentifier,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AIdentNonvoidType: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TColonEquals,soot.jimple.parser.node.TAtIdentifier,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setAtIdentifier(soot.jimple.parser.node.TAtIdentifier)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setColonEquals(soot.jimple.parser.node.TColonEquals)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TColonEquals,soot.jimple.parser.node.TAtIdentifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: void setAtIdentifier(soot.jimple.parser.node.TAtIdentifier)>
<soot.jimple.parser.node.AIdentityStatement: void setColonEquals(soot.jimple.parser.node.TColonEquals)>
<soot.jimple.parser.node.AIdentityStatement: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AIdentityStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AIfStatement: void <init>(soot.jimple.parser.node.TIf,soot.jimple.parser.node.PBoolExpr,soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AIfStatement: void setBoolExpr(soot.jimple.parser.node.PBoolExpr)>
<soot.jimple.parser.node.AIfStatement: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AIfStatement: void setIf(soot.jimple.parser.node.TIf)>
<soot.jimple.parser.node.AImmediateExpression: void <init>(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AImmediateExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AImplementsClause: void <init>(soot.jimple.parser.node.TImplements,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AImplementsClause: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AImplementsClause: void setImplements(soot.jimple.parser.node.TImplements)>
<soot.jimple.parser.node.AInstanceofExpression: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TInstanceof,soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AInstanceofExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AInstanceofExpression: void setInstanceof(soot.jimple.parser.node.TInstanceof)>
<soot.jimple.parser.node.AInstanceofExpression: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AIntBaseType: void <init>(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseType: void setInt(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseTypeNoName: void <init>(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseTypeNoName: void setInt(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntegerConstant: void <init>(soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AIntegerConstant: void setIntegerConstant(soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AIntegerConstant: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AInterfaceFileType: void <init>(soot.jimple.parser.node.TInterface)>
<soot.jimple.parser.node.AInterfaceFileType: void setInterface(soot.jimple.parser.node.TInterface)>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: void <init>(soot.jimple.parser.node.TInterfaceinvoke)>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: void setInterfaceinvoke(soot.jimple.parser.node.TInterfaceinvoke)>
<soot.jimple.parser.node.AInvokeExpression: void <init>(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeExpression: void setInvokeExpr(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeStatement: void <init>(soot.jimple.parser.node.PInvokeExpr,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AInvokeStatement: void setInvokeExpr(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ALabelName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.ALabelName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.ALabelStatement: void <init>(soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ALabelStatement: void setColon(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ALabelStatement: void setLabelName(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ALengthofUnop: void <init>(soot.jimple.parser.node.TLengthof)>
<soot.jimple.parser.node.ALengthofUnop: void setLengthof(soot.jimple.parser.node.TLengthof)>
<soot.jimple.parser.node.ALocalFieldRef: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TDot,soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ALocalFieldRef: void setDot(soot.jimple.parser.node.TDot)>
<soot.jimple.parser.node.ALocalFieldRef: void setFieldSignature(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ALocalFieldRef: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalImmediate: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalImmediate: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalName: void <init>(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ALocalName: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ALocalVariable: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalVariable: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALongBaseType: void <init>(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseType: void setLong(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseTypeNoName: void <init>(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseTypeNoName: void setLong(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ALookupswitchStatement)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ALookupswitchStatement,soot.jimple.parser.node.ALookupswitchStatement$1)>
<soot.jimple.parser.node.ALookupswitchStatement: void <init>(soot.jimple.parser.node.TLookupswitch,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.TRBrace,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ALookupswitchStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLookupswitch(soot.jimple.parser.node.TLookupswitch)>
<soot.jimple.parser.node.ALookupswitchStatement: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.ALookupswitchStatement: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ALookupswitchStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AMethodMember)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AMethodMember,soot.jimple.parser.node.AMethodMember$1)>
<soot.jimple.parser.node.AMethodMember: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PParameterList,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PThrowsClause,soot.jimple.parser.node.PMethodBody)>
<soot.jimple.parser.node.AMethodMember: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMethodMember: void setMethodBody(soot.jimple.parser.node.PMethodBody)>
<soot.jimple.parser.node.AMethodMember: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMethodMember: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMethodMember: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMethodMember: void setThrowsClause(soot.jimple.parser.node.PThrowsClause)>
<soot.jimple.parser.node.AMethodMember: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AMethodSignature: void <init>(soot.jimple.parser.node.TCmplt,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PParameterList,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AMethodSignature: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AMethodSignature: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AMethodSignature: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.AMethodSignature: void setFirst(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.AMethodSignature: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMethodSignature: void setMethodName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMethodSignature: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMethodSignature: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMethodSignature: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AMinusBinop: void <init>(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AMinusBinop: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AModBinop: void <init>(soot.jimple.parser.node.TMod)>
<soot.jimple.parser.node.AModBinop: void setMod(soot.jimple.parser.node.TMod)>
<soot.jimple.parser.node.AMultBinop: void <init>(soot.jimple.parser.node.TMult)>
<soot.jimple.parser.node.AMultBinop: void setMult(soot.jimple.parser.node.TMult)>
<soot.jimple.parser.node.AMultiArgList: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AMultiArgList: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AMultiArgList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiArgList: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AMultiLocalNameList: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.AMultiLocalNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiLocalNameList: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AMultiLocalNameList: void setLocalNameList(soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.AMultiNameList: void <init>(soot.jimple.parser.node.PName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PNameList)>
<soot.jimple.parser.node.AMultiNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiNameList: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMultiNameList: void setNameList(soot.jimple.parser.node.PNameList)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: void <init>(soot.jimple.parser.node.AMultiNewExpr)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: void <init>(soot.jimple.parser.node.AMultiNewExpr,soot.jimple.parser.node.AMultiNewExpr$1)>
<soot.jimple.parser.node.AMultiNewExpr: void <init>(soot.jimple.parser.node.TNewmultiarray,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PBaseType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.XPArrayDescriptor)>
<soot.jimple.parser.node.AMultiNewExpr: void setBaseType(soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.AMultiNewExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMultiNewExpr: void setNewmultiarray(soot.jimple.parser.node.TNewmultiarray)>
<soot.jimple.parser.node.AMultiNewExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMultiParameterList: void <init>(soot.jimple.parser.node.PParameter,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMultiParameterList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiParameterList: void setParameter(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.AMultiParameterList: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.ANativeModifier: void <init>(soot.jimple.parser.node.TNative)>
<soot.jimple.parser.node.ANativeModifier: void setNative(soot.jimple.parser.node.TNative)>
<soot.jimple.parser.node.ANegUnop: void <init>(soot.jimple.parser.node.TNeg)>
<soot.jimple.parser.node.ANegUnop: void setNeg(soot.jimple.parser.node.TNeg)>
<soot.jimple.parser.node.ANewExpression: void <init>(soot.jimple.parser.node.PNewExpr)>
<soot.jimple.parser.node.ANewExpression: void setNewExpr(soot.jimple.parser.node.PNewExpr)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void <init>(soot.jimple.parser.node.PNonstaticInvoke,soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TDot,soot.jimple.parser.node.PMethodSignature,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PArgList,soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setDot(soot.jimple.parser.node.TDot)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setMethodSignature(soot.jimple.parser.node.PMethodSignature)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setNonstaticInvoke(soot.jimple.parser.node.PNonstaticInvoke)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ANonvoidJimpleType: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANonvoidJimpleType: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANopStatement: void <init>(soot.jimple.parser.node.TNop,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ANopStatement: void setNop(soot.jimple.parser.node.TNop)>
<soot.jimple.parser.node.ANopStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ANovoidType: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANovoidType: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANullBaseType: void <init>(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseType: void setNullType(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseTypeNoName: void <init>(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseTypeNoName: void setNullType(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullConstant: void <init>(soot.jimple.parser.node.TNull)>
<soot.jimple.parser.node.ANullConstant: void setNull(soot.jimple.parser.node.TNull)>
<soot.jimple.parser.node.AOrBinop: void <init>(soot.jimple.parser.node.TOr)>
<soot.jimple.parser.node.AOrBinop: void setOr(soot.jimple.parser.node.TOr)>
<soot.jimple.parser.node.AParameter: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AParameter: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.APlusBinop: void <init>(soot.jimple.parser.node.TPlus)>
<soot.jimple.parser.node.APlusBinop: void setPlus(soot.jimple.parser.node.TPlus)>
<soot.jimple.parser.node.APrivateModifier: void <init>(soot.jimple.parser.node.TPrivate)>
<soot.jimple.parser.node.APrivateModifier: void setPrivate(soot.jimple.parser.node.TPrivate)>
<soot.jimple.parser.node.AProtectedModifier: void <init>(soot.jimple.parser.node.TProtected)>
<soot.jimple.parser.node.AProtectedModifier: void setProtected(soot.jimple.parser.node.TProtected)>
<soot.jimple.parser.node.APublicModifier: void <init>(soot.jimple.parser.node.TPublic)>
<soot.jimple.parser.node.APublicModifier: void setPublic(soot.jimple.parser.node.TPublic)>
<soot.jimple.parser.node.AQuotedClassName: void <init>(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedClassName: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedName: void <init>(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedName: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AQuotedNonvoidType)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AQuotedNonvoidType,soot.jimple.parser.node.AQuotedNonvoidType$1)>
<soot.jimple.parser.node.AQuotedNonvoidType: void <init>(soot.jimple.parser.node.TQuotedName,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AQuotedNonvoidType: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AReferenceExpression: void <init>(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceExpression: void setReference(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceVariable: void <init>(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceVariable: void setReference(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.ARetStatement: void <init>(soot.jimple.parser.node.TRet,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ARetStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ARetStatement: void setRet(soot.jimple.parser.node.TRet)>
<soot.jimple.parser.node.ARetStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AReturnStatement: void <init>(soot.jimple.parser.node.TReturn,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AReturnStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AReturnStatement: void setReturn(soot.jimple.parser.node.TReturn)>
<soot.jimple.parser.node.AReturnStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AShlBinop: void <init>(soot.jimple.parser.node.TShl)>
<soot.jimple.parser.node.AShlBinop: void setShl(soot.jimple.parser.node.TShl)>
<soot.jimple.parser.node.AShortBaseType: void <init>(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseType: void setShort(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseTypeNoName: void <init>(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseTypeNoName: void setShort(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShrBinop: void <init>(soot.jimple.parser.node.TShr)>
<soot.jimple.parser.node.AShrBinop: void setShr(soot.jimple.parser.node.TShr)>
<soot.jimple.parser.node.ASigFieldRef: void <init>(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ASigFieldRef: void setFieldSignature(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ASimpleNewExpr: void <init>(soot.jimple.parser.node.TNew,soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.ASimpleNewExpr: void setBaseType(soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.ASimpleNewExpr: void setNew(soot.jimple.parser.node.TNew)>
<soot.jimple.parser.node.ASingleArgList: void <init>(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ASingleArgList: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ASingleLocalNameList: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ASingleLocalNameList: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ASingleNameList: void <init>(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ASingleNameList: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ASingleParameterList: void <init>(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.ASingleParameterList: void setParameter(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: void <init>(soot.jimple.parser.node.TSpecialinvoke)>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: void setSpecialinvoke(soot.jimple.parser.node.TSpecialinvoke)>
<soot.jimple.parser.node.AStaticInvokeExpr: void <init>(soot.jimple.parser.node.TStaticinvoke,soot.jimple.parser.node.PMethodSignature,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PArgList,soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setMethodSignature(soot.jimple.parser.node.PMethodSignature)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setStaticinvoke(soot.jimple.parser.node.TStaticinvoke)>
<soot.jimple.parser.node.AStaticModifier: void <init>(soot.jimple.parser.node.TStatic)>
<soot.jimple.parser.node.AStaticModifier: void setStatic(soot.jimple.parser.node.TStatic)>
<soot.jimple.parser.node.AStrictfpModifier: void <init>(soot.jimple.parser.node.TStrictfp)>
<soot.jimple.parser.node.AStrictfpModifier: void setStrictfp(soot.jimple.parser.node.TStrictfp)>
<soot.jimple.parser.node.AStringConstant: void <init>(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.AStringConstant: void setStringConstant(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.ASynchronizedModifier: void <init>(soot.jimple.parser.node.TSynchronized)>
<soot.jimple.parser.node.ASynchronizedModifier: void setSynchronized(soot.jimple.parser.node.TSynchronized)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ATableswitchStatement)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ATableswitchStatement,soot.jimple.parser.node.ATableswitchStatement$1)>
<soot.jimple.parser.node.ATableswitchStatement: void <init>(soot.jimple.parser.node.TTableswitch,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.TRBrace,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ATableswitchStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ATableswitchStatement: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.ATableswitchStatement: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ATableswitchStatement: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.ATableswitchStatement: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ATableswitchStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ATableswitchStatement: void setTableswitch(soot.jimple.parser.node.TTableswitch)>
<soot.jimple.parser.node.AThrowStatement: void <init>(soot.jimple.parser.node.TThrow,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AThrowStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AThrowStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AThrowStatement: void setThrow(soot.jimple.parser.node.TThrow)>
<soot.jimple.parser.node.AThrowsClause: void <init>(soot.jimple.parser.node.TThrows,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AThrowsClause: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AThrowsClause: void setThrows(soot.jimple.parser.node.TThrows)>
<soot.jimple.parser.node.ATransientModifier: void <init>(soot.jimple.parser.node.TTransient)>
<soot.jimple.parser.node.ATransientModifier: void setTransient(soot.jimple.parser.node.TTransient)>
<soot.jimple.parser.node.AUnknownJimpleType: void <init>(soot.jimple.parser.node.TUnknown)>
<soot.jimple.parser.node.AUnknownJimpleType: void setUnknown(soot.jimple.parser.node.TUnknown)>
<soot.jimple.parser.node.AUnopBoolExpr: void <init>(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopBoolExpr: void setUnopExpr(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopExpr: void <init>(soot.jimple.parser.node.PUnop,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AUnopExpr: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AUnopExpr: void setUnop(soot.jimple.parser.node.PUnop)>
<soot.jimple.parser.node.AUnopExpression: void <init>(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopExpression: void setUnopExpr(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUshrBinop: void <init>(soot.jimple.parser.node.TUshr)>
<soot.jimple.parser.node.AUshrBinop: void setUshr(soot.jimple.parser.node.TUshr)>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: void <init>(soot.jimple.parser.node.TVirtualinvoke)>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: void setVirtualinvoke(soot.jimple.parser.node.TVirtualinvoke)>
<soot.jimple.parser.node.AVoidType: void <init>(soot.jimple.parser.node.TVoid)>
<soot.jimple.parser.node.AVoidType: void setVoid(soot.jimple.parser.node.TVoid)>
<soot.jimple.parser.node.AVolatileModifier: void <init>(soot.jimple.parser.node.TVolatile)>
<soot.jimple.parser.node.AVolatileModifier: void setVolatile(soot.jimple.parser.node.TVolatile)>
<soot.jimple.parser.node.AXorBinop: void <init>(soot.jimple.parser.node.TXor)>
<soot.jimple.parser.node.AXorBinop: void setXor(soot.jimple.parser.node.TXor)>
<soot.jimple.parser.node.Node: void parent(soot.jimple.parser.node.Node)>
<soot.jimple.parser.node.Start: void <init>(soot.jimple.parser.node.PFile,soot.jimple.parser.node.EOF)>
<soot.jimple.parser.node.Start: void setEOF(soot.jimple.parser.node.EOF)>
<soot.jimple.parser.node.Start: void setPFile(soot.jimple.parser.node.PFile)>
<soot.jimple.parser.node.TypedLinkedList$TypedLinkedListIterator: void <init>(soot.jimple.parser.node.TypedLinkedList,java.util.ListIterator)>
<soot.jimple.parser.node.TypedLinkedList: void <init>(soot.jimple.parser.node.Cast)>
<soot.jimple.parser.node.X1PArrayBrackets: void <init>(soot.jimple.parser.node.XPArrayBrackets,soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X1PArrayBrackets: void setPArrayBrackets(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X1PArrayBrackets: void setXPArrayBrackets(soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.X1PArrayDescriptor: void <init>(soot.jimple.parser.node.XPArrayDescriptor,soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X1PArrayDescriptor: void setPArrayDescriptor(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X1PArrayDescriptor: void setXPArrayDescriptor(soot.jimple.parser.node.XPArrayDescriptor)>
<soot.jimple.parser.node.X1PCaseStmt: void <init>(soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X1PCaseStmt: void setPCaseStmt(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X1PCaseStmt: void setXPCaseStmt(soot.jimple.parser.node.XPCaseStmt)>
<soot.jimple.parser.node.X1PCatchClause: void <init>(soot.jimple.parser.node.XPCatchClause,soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X1PCatchClause: void setPCatchClause(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X1PCatchClause: void setXPCatchClause(soot.jimple.parser.node.XPCatchClause)>
<soot.jimple.parser.node.X1PDeclaration: void <init>(soot.jimple.parser.node.XPDeclaration,soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X1PDeclaration: void setPDeclaration(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X1PDeclaration: void setXPDeclaration(soot.jimple.parser.node.XPDeclaration)>
<soot.jimple.parser.node.X1PMember: void <init>(soot.jimple.parser.node.XPMember,soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X1PMember: void setPMember(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X1PMember: void setXPMember(soot.jimple.parser.node.XPMember)>
<soot.jimple.parser.node.X1PModifier: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X1PModifier: void setPModifier(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X1PModifier: void setXPModifier(soot.jimple.parser.node.XPModifier)>
<soot.jimple.parser.node.X1PStatement: void <init>(soot.jimple.parser.node.XPStatement,soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X1PStatement: void setPStatement(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X1PStatement: void setXPStatement(soot.jimple.parser.node.XPStatement)>
<soot.jimple.parser.node.X2PArrayBrackets: void <init>(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X2PArrayBrackets: void setPArrayBrackets(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X2PArrayDescriptor: void <init>(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X2PArrayDescriptor: void setPArrayDescriptor(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X2PCaseStmt: void <init>(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X2PCaseStmt: void setPCaseStmt(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X2PCatchClause: void <init>(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X2PCatchClause: void setPCatchClause(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X2PDeclaration: void <init>(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X2PDeclaration: void setPDeclaration(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X2PMember: void <init>(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X2PMember: void setPMember(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X2PModifier: void <init>(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X2PModifier: void setPModifier(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X2PStatement: void <init>(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X2PStatement: void setPStatement(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.parser.Parser: void <init>(soot.jimple.parser.lexer.Lexer)>
<soot.jimple.parser.parser.Parser: void push(int,soot.jimple.parser.node.Node,boolean)>
<soot.jimple.parser.parser.ParserException: void <init>(soot.jimple.parser.node.Token,java.lang.String)>
<soot.jimple.parser.parser.State: void <init>(int,java.lang.Object)>
<soot.jimple.spark.SparkTransformer$1: void <init>(soot.jimple.spark.SparkTransformer,soot.jimple.Stmt,java.util.Map,soot.tagkit.Tag)>
<soot.jimple.spark.builder.GlobalNodeFactory: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.builder.MethodNodeFactory$1: void <init>(soot.jimple.spark.builder.MethodNodeFactory)>
<soot.jimple.spark.builder.MethodNodeFactory: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.MethodPAG)>
<soot.jimple.spark.builder.MethodNodeFactory: void setCurrentMethod(soot.SootMethod)>
<soot.jimple.spark.internal.SparkNativeHelper: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.internal.TypeManager: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.internal.TypeManager: void setFastHierarchy(soot.FastHierarchy)>
<soot.jimple.spark.ondemand.AllocAndContext: void <init>(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.AllocAndContextSet$1: void <init>(soot.jimple.spark.ondemand.AllocAndContextSet)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1UpContextEdgeHandler: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack,soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet,soot.jimple.spark.ondemand.genericutil.Propagator)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.ondemand.AllocAndContextSet,soot.jimple.spark.ondemand.genericutil.Propagator)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2Helper: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,java.util.HashSet,soot.jimple.spark.ondemand.genericutil.Stack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$3: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.ondemand.genericutil.Propagator)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$CallSiteAndContext: void <init>(java.lang.Integer,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$VarContextAndUp: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: void <init>(soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo,soot.jimple.spark.pag.PAG,int,int)>
<soot.jimple.spark.ondemand.InnerTypesIncrementalHeuristic: void <init>(soot.jimple.spark.internal.TypeManager,int)>
<soot.jimple.spark.ondemand.TerminateEarlyException: void <init>()>
<soot.jimple.spark.ondemand.WrappedPointsToSet: void <init>(soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.genericutil.ArraySet$ArraySetIterator: void <init>(soot.jimple.spark.ondemand.genericutil.ArraySet)>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: void <init>(java.lang.Object[])>
<soot.jimple.spark.ondemand.genericutil.Propagator: void <init>(java.util.Set,soot.jimple.spark.ondemand.genericutil.Stack)>
<soot.jimple.spark.ondemand.pautil.AssignEdge: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.AssignEdge: void setCallSite(java.lang.Integer)>
<soot.jimple.spark.pag.AllocDotField: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.AllocNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.ClassConstantNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.ClassConstant)>
<soot.jimple.spark.pag.ContextVarNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.LocalVarNode,soot.Context)>
<soot.jimple.spark.pag.FieldRefNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.GlobalVarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type)>
<soot.jimple.spark.pag.LocalVarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.MethodPAG: void <init>(soot.jimple.spark.pag.PAG,soot.SootMethod)>
<soot.jimple.spark.pag.Node: void <init>(soot.jimple.spark.pag.PAG,soot.Type)>
<soot.jimple.spark.pag.Node: void setType(soot.Type)>
<soot.jimple.spark.pag.PAG$1: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.SparkField,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.pag.PAG2HTML$1: void <init>(soot.jimple.spark.pag.PAG2HTML,java.io.PrintWriter)>
<soot.jimple.spark.pag.PAG2HTML: void <init>(soot.jimple.spark.pag.PAG,java.lang.String)>
<soot.jimple.spark.pag.PAG: void <init>(soot.options.SparkOptions)>
<soot.jimple.spark.pag.PAG: void setOnFlyCallGraph(soot.jimple.spark.solver.OnFlyCallGraph)>
<soot.jimple.spark.pag.PAGDumper$1: void <init>(soot.jimple.spark.pag.PAGDumper,soot.jimple.spark.pag.VarNode,java.io.PrintWriter)>
<soot.jimple.spark.pag.PAGDumper$ObjectNumberer: void <init>(soot.jimple.spark.pag.PAGDumper,java.lang.Object,int)>
<soot.jimple.spark.pag.PAGDumper: void <init>(soot.jimple.spark.pag.PAG,java.lang.String)>
<soot.jimple.spark.pag.Parm: void <init>(soot.SootMethod,int)>
<soot.jimple.spark.pag.StringConstantNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.String)>
<soot.jimple.spark.pag.ValNode: void <init>(soot.jimple.spark.pag.PAG,soot.Type)>
<soot.jimple.spark.pag.VarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type)>
<soot.jimple.spark.sets.AllSharedHybridNodes$BitVectorLookupMap: void <init>(soot.jimple.spark.sets.AllSharedHybridNodes)>
<soot.jimple.spark.sets.BitPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.DoublePointsToSet$1: void <init>(soot.jimple.spark.sets.DoublePointsToSet,soot.jimple.spark.sets.DoublePointsToSet,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.DoublePointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HashPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HybridPointsToSet$2: void <init>(soot.jimple.spark.sets.HybridPointsToSet,soot.jimple.spark.sets.HybridPointsToSet)>
<soot.jimple.spark.sets.HybridPointsToSet$3: void <init>(soot.jimple.spark.sets.HybridPointsToSet,soot.jimple.spark.sets.HybridPointsToSet)>
<soot.jimple.spark.sets.HybridPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.PointsToSetEqualsWrapper: void <init>(soot.jimple.spark.sets.EqualsSupportingPointsToSet)>
<soot.jimple.spark.sets.PointsToSetInternal$1: void <init>(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.PointsToSetInternal$2: void <init>(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.PointsToSetInternal$3: void <init>(soot.jimple.spark.sets.PointsToSetInternal,java.util.HashSet)>
<soot.jimple.spark.sets.PointsToSetInternal$4: void <init>(soot.jimple.spark.sets.PointsToSetInternal,int[])>
<soot.jimple.spark.sets.PointsToSetInternal$5: void <init>(soot.jimple.spark.sets.PointsToSetInternal,java.lang.StringBuffer)>
<soot.jimple.spark.sets.PointsToSetInternal$6: void <init>(soot.jimple.spark.sets.PointsToSetInternal,java.util.HashSet)>
<soot.jimple.spark.sets.PointsToSetInternal$9: void <init>(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.PointsToSetInternal: void <init>(soot.Type)>
<soot.jimple.spark.sets.PointsToSetInternal: void setType(soot.Type)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList$ListNode: void <init>(soot.jimple.spark.sets.SharedHybridSet$OverflowList,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedHybridSet$OverflowList$ListNode)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList: void <init>(soot.jimple.spark.sets.SharedHybridSet)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList: void <init>(soot.jimple.spark.sets.SharedHybridSet,soot.jimple.spark.sets.PointsToBitVector)>
<soot.jimple.spark.sets.SharedHybridSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SharedHybridSet: void findAppropriateBitVector(soot.jimple.spark.sets.PointsToBitVector,soot.jimple.spark.sets.PointsToBitVector,int,int)>
<soot.jimple.spark.sets.SharedHybridSet: void setNewBitVector(int,soot.jimple.spark.sets.PointsToBitVector)>
<soot.jimple.spark.sets.SharedListSet$ListNode: void <init>(soot.jimple.spark.sets.SharedListSet,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet$Pair: void <init>(soot.jimple.spark.sets.SharedListSet,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SortedArraySet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.EBBCollapser: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.OnFlyCallGraph$1: void <init>(soot.jimple.spark.solver.OnFlyCallGraph,soot.Local,soot.Context)>
<soot.jimple.spark.solver.OnFlyCallGraph$2: void <init>(soot.jimple.spark.solver.OnFlyCallGraph,soot.Local,soot.Context)>
<soot.jimple.spark.solver.OnFlyCallGraph: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.PropAlias: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.PropCycle$1: void <init>(soot.jimple.spark.solver.PropCycle,soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.solver.PropCycle$2: void <init>(soot.jimple.spark.solver.PropCycle,soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.solver.PropCycle: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.PropIter$1: void <init>(soot.jimple.spark.solver.PropIter,soot.jimple.spark.pag.SparkField,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.solver.PropIter$2: void <init>(soot.jimple.spark.solver.PropIter,soot.jimple.spark.pag.SparkField,soot.jimple.spark.pag.Node[])>
<soot.jimple.spark.solver.PropIter: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.PropMerge$1: void <init>(soot.jimple.spark.solver.PropMerge,soot.jimple.spark.pag.SparkField,soot.jimple.spark.pag.FieldRefNode)>
<soot.jimple.spark.solver.PropMerge: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.PropWorklist$1: void <init>(soot.jimple.spark.solver.PropWorklist,soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.solver.PropWorklist$2: void <init>(soot.jimple.spark.solver.PropWorklist,soot.jimple.spark.pag.SparkField,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.solver.PropWorklist$3: void <init>(soot.jimple.spark.solver.PropWorklist,soot.jimple.spark.pag.SparkField,soot.jimple.spark.pag.Node[],java.util.HashSet)>
<soot.jimple.spark.solver.PropWorklist$4: void <init>(soot.jimple.spark.solver.PropWorklist,soot.jimple.spark.pag.SparkField,soot.jimple.spark.pag.Node[],java.util.HashSet)>
<soot.jimple.spark.solver.PropWorklist$5: void <init>(soot.jimple.spark.solver.PropWorklist,soot.jimple.spark.pag.SparkField,soot.jimple.spark.pag.Node[],java.util.HashSet)>
<soot.jimple.spark.solver.PropWorklist: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.SCCCollapser: void <init>(soot.jimple.spark.pag.PAG,boolean)>
<soot.jimple.spark.solver.TopoSorter: void <init>(soot.jimple.spark.pag.PAG,boolean)>
<soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol: void <init>(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,boolean,boolean,boolean,boolean)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: void <init>(soot.SootMethod,soot.Local)>
<soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList: void <init>(java.util.List)>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: void <init>(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: void changeEndUnits(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: void <init>(soot.SootMethod,soot.Local)>
<soot.jimple.toolkits.annotation.arraycheck.MethodParameter: void <init>(soot.SootMethod,int)>
<soot.jimple.toolkits.annotation.arraycheck.MethodReturn: void <init>(soot.SootMethod)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedEdge: void <init>(java.lang.Object,java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void <init>(java.util.HashSet)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void <init>(java.util.HashSet,boolean)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void setVertexes(java.util.HashSet)>
<soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher: void setNextMethod(soot.SootMethod)>
<soot.jimple.toolkits.annotation.callgraph.CallGraphInfo: void <init>(soot.SootMethod,java.util.ArrayList,java.util.ArrayList)>
<soot.jimple.toolkits.annotation.callgraph.CallGraphInfo: void setCenter(soot.SootMethod)>
<soot.jimple.toolkits.annotation.callgraph.CallGraphInfo: void setInputs(java.util.ArrayList)>
<soot.jimple.toolkits.annotation.callgraph.CallGraphInfo: void setOutputs(java.util.ArrayList)>
<soot.jimple.toolkits.annotation.callgraph.MethInfo: void <init>(soot.SootMethod,boolean,soot.Kind)>
<soot.jimple.toolkits.annotation.callgraph.MethInfo: void edgeKind(soot.Kind)>
<soot.jimple.toolkits.annotation.callgraph.MethInfo: void method(soot.SootMethod)>
<soot.jimple.toolkits.annotation.logic.Loop: void <init>(soot.jimple.Stmt,java.util.List,soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.nullcheck.NullCheckEliminator: void <init>(soot.jimple.toolkits.annotation.nullcheck.NullCheckEliminator$AnalysisFactory)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis$AnalysisInfo: void <init>(soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis$AnalysisInfo: void <init>(soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis,soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis$AnalysisInfo)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.nullcheck.RefIntPair: void <init>(soot.EquivalentValue,int,soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.toolkits.scalar.LiveLocals)>
<soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis$1IntComparator: void <init>(soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis)>
<soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.toolkits.annotation.purity.SootMethodFilter,java.util.Iterator,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityAnalysis: void <init>(soot.Singletons$Global)>
<soot.jimple.toolkits.annotation.purity.PurityEdge: void <init>(soot.jimple.toolkits.annotation.purity.PurityNode,java.lang.String,soot.jimple.toolkits.annotation.purity.PurityNode,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityInterproceduralAnalysis: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Iterator,soot.options.PurityOptions)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis)>
<soot.jimple.toolkits.annotation.purity.PurityMethodNode: void <init>(soot.SootMethod)>
<soot.jimple.toolkits.annotation.purity.PurityStmtNode: void <init>(soot.jimple.Stmt,boolean)>
<soot.jimple.toolkits.callgraph.CallGraph$CallersOfMethodIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfMethodIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfUnitIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.Unit)>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: void <init>(soot.PointsToAnalysis)>
<soot.jimple.toolkits.callgraph.ClinitElimAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.Edge: void <init>(soot.MethodOrMethodContext,soot.Unit,soot.MethodOrMethodContext,soot.Kind)>
<soot.jimple.toolkits.callgraph.Edge: void <init>(soot.MethodOrMethodContext,soot.jimple.Stmt,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterBySrc(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterByTgt(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterByUnit(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Filter: java.util.Iterator wrap(java.util.Iterator)>
<soot.jimple.toolkits.callgraph.Filter: void <init>(soot.jimple.toolkits.callgraph.EdgePredicate)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void <init>(soot.jimple.toolkits.callgraph.ContextManager,soot.jimple.toolkits.callgraph.ReachableMethods)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void <init>(soot.jimple.toolkits.callgraph.ContextManager,soot.jimple.toolkits.callgraph.ReachableMethods,boolean)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Collection)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Iterator)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Iterator,soot.jimple.toolkits.callgraph.Filter)>
<soot.jimple.toolkits.callgraph.Targets: void <init>(java.util.Iterator)>
<soot.jimple.toolkits.callgraph.TopologicalOrderer: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.TransitiveTargets: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.TransitiveTargets: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.toolkits.callgraph.Filter)>
<soot.jimple.toolkits.callgraph.VirtualCallSite: void <init>(soot.jimple.Stmt,soot.SootMethod,soot.jimple.InstanceInvokeExpr,soot.util.NumberedString,soot.Kind)>
<soot.jimple.toolkits.graph.LoopConditionUnroller: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.jimple.toolkits.infoflow.AbstractDataSource: void <init>(java.lang.Object)>
<soot.jimple.toolkits.infoflow.CachedEquivalentValue: void <init>(soot.Value)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: void <init>(soot.SootClass,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: void <init>(soot.jimple.toolkits.infoflow.LocalObjectsAnalysis,soot.jimple.toolkits.infoflow.InfoFlowAnalysis,soot.jimple.toolkits.infoflow.InfoFlowAnalysis,soot.jimple.toolkits.infoflow.UseFinder,soot.SootClass,java.util.List)>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void <init>(java.lang.String,soot.Type,soot.Local)>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void <init>(java.lang.String,soot.Type,soot.Local,java.lang.Object)>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void setInfo(java.lang.Object)>
<soot.jimple.toolkits.infoflow.LocalObjectsAnalysis: void <init>(soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: void <init>(soot.SootMethod,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.pointer.CastCheckEliminator: void <init>(soot.toolkits.graph.BriefUnitGraph)>
<soot.jimple.toolkits.pointer.CodeBlockRWSet$1: void <init>(soot.jimple.toolkits.pointer.CodeBlockRWSet,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.toolkits.pointer.DependenceGraph$Edge: void <init>(soot.jimple.toolkits.pointer.DependenceGraph,short,short)>
<soot.jimple.toolkits.pointer.LocalTypeSet: void <init>(java.util.List,java.util.List)>
<soot.jimple.toolkits.pointer.PASideEffectTester$1: void <init>(soot.jimple.toolkits.pointer.PASideEffectTester)>
<soot.jimple.toolkits.pointer.PASideEffectTester: void newMethod(soot.SootMethod)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: void <init>(soot.PointsToAnalysis,soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.pointer.SideEffectTagger$1: void <init>(soot.jimple.toolkits.pointer.SideEffectTagger)>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: void <init>(soot.jimple.toolkits.pointer.SideEffectTagger)>
<soot.jimple.toolkits.pointer.StmtRWSet: boolean addFieldRef(soot.PointsToSet,java.lang.Object)>
<soot.jimple.toolkits.pointer.StmtRWSet: boolean addGlobal(soot.SootField)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileDescriptorNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileInputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileOutputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileSystemNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectInputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectOutputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectStreamClassNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNativeLibraryNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangDoubleNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangFloatNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangObjectNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangPackageNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectArrayNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectConstructorNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectFieldNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectMethodNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectProxyNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangRuntimeNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangShutdownNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStrictMathNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStringNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThreadNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThrowableNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressImplNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaSecurityAccessControllerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilJarJarFileNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilResourceBundleNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilTimeZoneNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipCRC32Native: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipInflaterNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipZipEntryNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipZipFileNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.NativeMethodClass: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.NativeMethodNotSupportedException: void <init>(soot.SootMethod)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscSignalHandlerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscSignalNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscUnsafeNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.representations.GeneralConstObject: void <init>(soot.Type,java.lang.String)>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: java.util.List getCopiesOfAt(soot.Local,soot.jimple.Stmt)>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: boolean areEqualUses(java.util.Map,java.util.List)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.scalar.FastAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.SootMethod,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.LocalCreation: void <init>(soot.util.Chain,java.lang.String)>
<soot.jimple.toolkits.scalar.PessimisticAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.SootMethod,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.SlowAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.jimple.toolkits.scalar.ToppedSet: void <init>(soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.scalar.UnreachableCodeEliminator$Instance: void <init>(soot.jimple.toolkits.scalar.UnreachableCodeEliminator)>
<soot.jimple.toolkits.scalar.pre.BusyCodeMotion$1: void <init>(soot.jimple.toolkits.scalar.pre.BusyCodeMotion,soot.Body,int,float)>
<soot.jimple.toolkits.scalar.pre.BusyCodeMotion$2: void <init>(soot.jimple.toolkits.scalar.pre.BusyCodeMotion,soot.Body,int,float)>
<soot.jimple.toolkits.scalar.pre.DelayabilityAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.jimple.toolkits.scalar.pre.EarliestnessComputation,java.util.Map,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.LazyCodeMotion$1: void <init>(soot.jimple.toolkits.scalar.pre.LazyCodeMotion,soot.Body,int,float)>
<soot.jimple.toolkits.scalar.pre.LazyCodeMotion$2: void <init>(soot.jimple.toolkits.scalar.pre.LazyCodeMotion,soot.Body,int,float)>
<soot.jimple.toolkits.scalar.pre.NotIsolatedAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.jimple.toolkits.scalar.pre.LatestComputation,java.util.Map,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void setJoinStmt(soot.jimple.Stmt)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void setStartStmt(soot.jimple.Stmt)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void setStartStmtMethod(soot.SootMethod)>
<soot.jimple.toolkits.thread.ThreadLocalObjectsAnalysis: void <init>(soot.jimple.toolkits.thread.mhp.MhpTester)>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis$1: void <init>(soot.jimple.toolkits.thread.mhp.StartJoinAnalysis,java.util.HashSet)>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.SootMethod,soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.spark.pag.PAG)>
<soot.jimple.toolkits.thread.mhp.findobject.AllocNodesFinder: void <init>(soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph,soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.spark.pag.PAG)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiCalledMethods: void <init>(soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph,java.util.Set)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: void <init>(soot.toolkits.graph.UnitGraph,soot.SootMethod,java.util.Set,soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.thread.synchronization.CriticalSection: void <init>(boolean,soot.SootMethod,int)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: void <init>(soot.PointsToAnalysis,soot.jimple.toolkits.callgraph.CallGraph,java.util.Collection,soot.jimple.toolkits.thread.ThreadLocalObjectsAnalysis)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionDataDependency: void <init>(soot.jimple.toolkits.thread.synchronization.CriticalSection,int,soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup: void add(soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionInterferenceGraph: void <init>(java.util.List,soot.jimple.toolkits.thread.mhp.MhpTester,boolean,boolean,boolean)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionVisibleEdgesPred: void <init>(java.util.Collection)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionVisibleEdgesPred: void setExemptTransaction(soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.DeadlockAvoidanceEdge: void <init>(soot.SootClass)>
<soot.jimple.toolkits.thread.synchronization.DeadlockDetector: void <init>(boolean,boolean,java.util.List)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: java.util.List getLocksetOf(soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis,soot.jimple.toolkits.pointer.RWSet,soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.thread.synchronization.NewStaticLock: void <init>(soot.SootClass)>
<soot.jimple.toolkits.thread.synchronization.SynchronizedRegionFinder$1: void <init>(soot.jimple.toolkits.thread.synchronization.SynchronizedRegionFinder)>
<soot.jimple.toolkits.thread.synchronization.SynchronizedRegionFinder: void <init>(soot.toolkits.graph.UnitGraph,soot.Body,boolean,boolean,soot.jimple.toolkits.thread.ThreadLocalObjectsAnalysis)>
<soot.jimple.toolkits.thread.synchronization.SynchronizedRegionFlowPair: void <init>(soot.jimple.toolkits.thread.synchronization.CriticalSection,boolean)>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: soot.jimple.toolkits.typing.TypeNode typeNode(int,soot.Type,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.ClassHierarchy$ToInt: void defaultCase(soot.Type)>
<soot.jimple.toolkits.typing.ConstraintChecker$RuntimeTypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.ConstraintChecker: void check(soot.jimple.Stmt,soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.ConstraintCollector: void <init>(soot.jimple.toolkits.typing.TypeResolver,boolean)>
<soot.jimple.toolkits.typing.ConstraintCollector: void collect(soot.jimple.Stmt,soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.InternalTypingException: void <init>()>
<soot.jimple.toolkits.typing.StronglyConnectedComponents: void <init>(java.util.List)>
<soot.jimple.toolkits.typing.TypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.ArrayType,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.RefType,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.Type,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeResolver: void <init>(soot.jimple.JimpleBody,soot.Scene)>
<soot.jimple.toolkits.typing.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.TypeResolver)>
<soot.jimple.toolkits.typing.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.TypeResolver,soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.fast.AugEvalFunction: void <init>(soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode: void <init>(soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode,soot.RefType)>
<soot.jimple.toolkits.typing.fast.SingletonList: void <init>(java.lang.Object)>
<soot.jimple.toolkits.typing.fast.TypeResolver$CastInsertionUseVisitor: void <init>(soot.jimple.toolkits.typing.fast.TypeResolver,boolean,soot.jimple.JimpleBody,soot.jimple.toolkits.typing.fast.Typing,soot.jimple.toolkits.typing.fast.IHierarchy)>
<soot.jimple.toolkits.typing.fast.TypeResolver$TypePromotionUseVisitor: void <init>(soot.jimple.toolkits.typing.fast.TypeResolver,soot.jimple.JimpleBody,soot.jimple.toolkits.typing.fast.Typing)>
<soot.jimple.toolkits.typing.fast.TypeResolver: void <init>(soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.fast.UseChecker: void <init>(soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.fast.UseChecker: void check(soot.jimple.toolkits.typing.fast.Typing,soot.jimple.toolkits.typing.fast.IUseVisitor)>
<soot.jimple.toolkits.typing.integer.ConstraintChecker$RuntimeTypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.integer.ConstraintChecker: void <init>(soot.jimple.toolkits.typing.integer.TypeResolver,boolean)>
<soot.jimple.toolkits.typing.integer.ConstraintChecker: void check(soot.jimple.Stmt,soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void <init>(soot.jimple.toolkits.typing.integer.TypeResolver,boolean)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void collect(soot.jimple.Stmt,soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.integer.InternalTypingException: void <init>()>
<soot.jimple.toolkits.typing.integer.StronglyConnectedComponents: void <init>(java.util.List)>
<soot.jimple.toolkits.typing.integer.TypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.integer.TypeNode: void <init>(int,soot.Type)>
<soot.jimple.toolkits.typing.integer.TypeResolver: void <init>(soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.integer.TypeResolver)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.integer.TypeResolver,soot.jimple.toolkits.typing.integer.TypeNode)>
<soot.options.ABCOptions: void <init>(java.util.Map)>
<soot.options.AETOptions: void <init>(java.util.Map)>
<soot.options.BCMOptions: void <init>(java.util.Map)>
<soot.options.CGGOptions: void <init>(java.util.Map)>
<soot.options.CGOptions: void <init>(java.util.Map)>
<soot.options.CHAOptions: void <init>(java.util.Map)>
<soot.options.CPOptions: void <init>(java.util.Map)>
<soot.options.JBOptions: void <init>(java.util.Map)>
<soot.options.JBTROptions: void <init>(java.util.Map)>
<soot.options.JJOptions: void <init>(java.util.Map)>
<soot.options.LCMOptions: void <init>(java.util.Map)>
<soot.options.ProfilingOptions: void <init>(java.util.Map)>
<soot.options.PurityOptions: void <init>(java.util.Map)>
<soot.options.SMBOptions: void <init>(java.util.Map)>
<soot.options.ShimpleOptions: void <init>(java.util.Map)>
<soot.options.SparkOptions: void <init>(java.util.Map)>
<soot.shimple.DefaultShimpleFactory: void setBody(soot.Body)>
<soot.shimple.ShimpleBody: void <init>(soot.SootMethod,java.util.Map)>
<soot.shimple.ShimpleMethodSource: void <init>(soot.MethodSource)>
<soot.shimple.internal.PhiNodeManager: void <init>(soot.shimple.ShimpleBody)>
<soot.shimple.internal.PiNodeManager: void <init>(soot.shimple.ShimpleBody,boolean)>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain)>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain,soot.Unit)>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain,soot.Unit,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void <init>(soot.Body,soot.util.Chain)>
<soot.shimple.internal.SPiExpr: void <init>(soot.Value,soot.Unit,java.lang.Object)>
<soot.shimple.internal.SValueUnitPair: void <init>(soot.Value,soot.Unit)>
<soot.shimple.internal.SValueUnitPair: void setUnit(soot.Unit)>
<soot.shimple.internal.ShimpleBodyBuilder: void <init>(soot.shimple.ShimpleBody)>
<soot.shimple.toolkits.scalar.SCPFAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.tagkit.AnnotationAnnotationElem: void <init>(soot.tagkit.AnnotationTag,char,java.lang.String)>
<soot.tagkit.AnnotationArrayElem: void <init>(java.util.ArrayList,char,java.lang.String)>
<soot.tagkit.AnnotationDefaultTag: void <init>(soot.tagkit.AnnotationElem)>
<soot.tagkit.AnnotationTag: void setElems(java.util.ArrayList)>
<soot.tagkit.AttributeValueException: void <init>()>
<soot.tagkit.CodeAttribute: void <init>(java.lang.String,java.util.List,java.util.List)>
<soot.tagkit.InnerClassAttribute: void <init>(java.util.ArrayList)>
<soot.tagkit.LinkTag: void <init>(java.lang.String,soot.tagkit.Host,java.lang.String)>
<soot.tagkit.LinkTag: void <init>(java.lang.String,soot.tagkit.Host,java.lang.String,java.lang.String)>
<soot.tagkit.ParamNamesTag: void <init>(java.util.ArrayList)>
<soot.toolkits.astmetrics.ASTMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.AbruptEdgesMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ConditionComplexityMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ConstructNumbersMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ExpressionComplexityMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.IdentifiersMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.MetricData: void <init>(java.lang.String,java.lang.Object)>
<soot.toolkits.astmetrics.NumLocalsMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth$1: void <init>(soot.toolkits.astmetrics.StmtSumWeightedByDepth)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.metricPrettyPrinter: void <init>(soot.toolkits.astmetrics.ASTMetric)>
<soot.toolkits.exceptions.ThrowableSet$AlreadyHasExclusionsException: void <init>(java.lang.String)>
<soot.toolkits.exceptions.ThrowableSet$Pair: void <init>(soot.toolkits.exceptions.ThrowableSet,soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.exceptions.UnitThrowAnalysis$UnitSwitch: void <init>(soot.toolkits.exceptions.UnitThrowAnalysis)>
<soot.toolkits.exceptions.UnitThrowAnalysis$ValueSwitch: void <init>(soot.toolkits.exceptions.UnitThrowAnalysis)>
<soot.toolkits.graph.Block: void <init>(soot.Unit,soot.Unit,soot.Body,int,int,soot.toolkits.graph.BlockGraph)>
<soot.toolkits.graph.Block: void insertAfter(soot.Unit,soot.Unit)>
<soot.toolkits.graph.Block: void insertBefore(soot.Unit,soot.Unit)>
<soot.toolkits.graph.Block: void setPreds(java.util.List)>
<soot.toolkits.graph.Block: void setSuccs(java.util.List)>
<soot.toolkits.graph.BriefUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.CompleteUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.CytronDominanceFrontier: void <init>(soot.toolkits.graph.DominatorTree)>
<soot.toolkits.graph.DGEdge: void <init>(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.DominatorNode: void <init>(java.lang.Object)>
<soot.toolkits.graph.DominatorNode: void setParent(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DominatorTree: void <init>(soot.toolkits.graph.DominatorsFinder)>
<soot.toolkits.graph.DummyBlock: void <init>(soot.Body,int)>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: void <init>(soot.Trap,soot.toolkits.exceptions.ThrowableSet,soot.toolkits.graph.Block)>
<soot.toolkits.graph.ExceptionalUnitGraph$1CFGEdge: void <init>(soot.toolkits.graph.ExceptionalUnitGraph,soot.Unit,soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: void <init>(soot.Trap,soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body,soot.toolkits.exceptions.ThrowAnalysis,boolean)>
<soot.toolkits.graph.ExceptionalUnitGraph: void initialize(soot.toolkits.exceptions.ThrowAnalysis,boolean)>
<soot.toolkits.graph.InverseGraph: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.MHGDominatorsFinder: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.PseudoTopologicalOrderer: java.util.List computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.PseudoTopologicalOrderer: java.util.List newList(soot.toolkits.graph.DirectedGraph,boolean)>
<soot.toolkits.graph.SimpleDominatorsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SimpleDominatorsFinder: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer$PseudoTopologicalReverseOrderer: java.util.LinkedList computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer$PseudoTopologicalReverseOrderer: java.util.List newList(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer$PseudoTopologicalReverseOrderer: void <init>(soot.toolkits.graph.SlowPseudoTopologicalOrderer)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer$PseudoTopologicalReverseOrderer: void <init>(soot.toolkits.graph.SlowPseudoTopologicalOrderer,soot.toolkits.graph.SlowPseudoTopologicalOrderer$1)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer: java.util.LinkedList computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer: java.util.List newList(soot.toolkits.graph.DirectedGraph,boolean)>
<soot.toolkits.graph.TrapUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.UnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.interaction.FlowInfo: void <init>(java.lang.Object,java.lang.Object,boolean)>
<soot.toolkits.graph.interaction.FlowInfo: void info(java.lang.Object)>
<soot.toolkits.graph.interaction.FlowInfo: void unit(java.lang.Object)>
<soot.toolkits.graph.interaction.InteractionEvent: void <init>(int,java.lang.Object)>
<soot.toolkits.graph.interaction.InteractionEvent: void info(java.lang.Object)>
<soot.toolkits.graph.interaction.InteractionHandler: void handleCallGraphStart(java.lang.Object,soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher)>
<soot.toolkits.graph.interaction.InteractionHandler: void setGrapher(soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher)>
<soot.toolkits.scalar.AbstractFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.ArrayFlowUniverse: void <init>(java.lang.Object[])>
<soot.toolkits.scalar.ArrayPackedSet: void <init>(soot.toolkits.scalar.ObjectIntMapper)>
<soot.toolkits.scalar.ArrayPackedSet: void <init>(soot.toolkits.scalar.ObjectIntMapper,int[])>
<soot.toolkits.scalar.BackwardFlowAnalysis$1: void <init>(soot.toolkits.scalar.BackwardFlowAnalysis,java.util.Map)>
<soot.toolkits.scalar.BackwardFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.BranchedFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.FlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis$1: void <init>(soot.toolkits.scalar.ForwardBranchedFlowAnalysis,java.util.Map)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.ForwardFlowAnalysis$1: void <init>(soot.toolkits.scalar.ForwardFlowAnalysis,java.util.Map)>
<soot.toolkits.scalar.ForwardFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.GuaranteedDefsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.InitAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.LocalDefsFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.LocalUnitPair: void <init>(soot.Local,soot.Unit)>
<soot.toolkits.scalar.Pair: void <init>(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.SimpleLiveLocalsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: void <init>(soot.toolkits.scalar.SmartLocalDefs,soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SmartLocalDefs: void <init>(soot.toolkits.graph.UnitGraph,soot.toolkits.scalar.LiveLocals)>
<soot.toolkits.scalar.StringGroupPair: void <init>(java.lang.String,java.lang.Object)>
<soot.toolkits.scalar.UnitValueBoxPair: void <init>(soot.Unit,soot.ValueBox)>
<soot.toolkits.scalar.ValueUnitPair: void <init>(soot.Value,soot.Unit)>
<soot.toolkits.scalar.ValueUnitPair: void setUnit(soot.Unit)>
<soot.util.ArrayNumberer$NumbererIterator: void <init>(soot.util.ArrayNumberer)>
<soot.util.ArraySet$ArrayIterator: void <init>(soot.util.ArraySet)>
<soot.util.BitSetIterator: void <init>(long[])>
<soot.util.Cons: void <init>(java.lang.Object,java.lang.Object)>
<soot.util.EscapedWriter: void <init>(java.io.Writer)>
<soot.util.HashChain$Link: void <init>(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain$Link: void bind(soot.util.HashChain$Link,soot.util.HashChain$Link)>
<soot.util.HashChain$Link: void setNext(soot.util.HashChain$Link)>
<soot.util.HashChain$Link: void setPrevious(soot.util.HashChain$Link)>
<soot.util.HashChain$LinkIterator: void <init>(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain$LinkIterator: void <init>(soot.util.HashChain,java.lang.Object,java.lang.Object)>
<soot.util.HashChain: boolean add(java.lang.Object)>
<soot.util.HashChain: java.lang.Object access$002(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain: java.lang.Object access$102(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain: void addFirst(java.lang.Object)>
<soot.util.HashChain: void addLast(java.lang.Object)>
<soot.util.IterableSet: boolean add(java.lang.Object)>
<soot.util.JasminOutputStream: void <init>(java.io.OutputStream)>
<soot.util.LargeNumberedMap: void <init>(soot.util.ArrayNumberer)>
<soot.util.NumberedSet: void <init>(soot.util.ArrayNumberer)>
<soot.util.PhaseDumper$PhaseStack: void <init>(soot.util.PhaseDumper)>
<soot.util.SingletonList: void <init>(java.lang.Object)>
<soot.util.SmallNumberedMap: void <init>(soot.util.ArrayNumberer)>
<soot.util.TrustingMonotonicArraySet$ArrayIterator: void <init>(soot.util.TrustingMonotonicArraySet)>
<soot.util.cfgcmd.CFGToDotGraph$1: void <init>(soot.util.cfgcmd.CFGToDotGraph)>
<soot.util.cfgcmd.CFGToDotGraph$ExceptionDestComparator: void <init>(soot.util.cfgcmd.CFGToDotGraph$DotNamer)>
<soot.util.cfgcmd.CFGToDotGraph$NodeComparator: void <init>(soot.util.cfgcmd.CFGToDotGraph$DotNamer)>
<soot.util.dot.DotGraphEdge: void <init>(soot.util.dot.DotGraphNode,soot.util.dot.DotGraphNode)>
<soot.util.queue.QueueReader: void <init>(java.lang.Object[],int)>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(soot.xml.XMLNode)>
<soot.xml.XMLNode: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])>
<soot.xml.XMLPrinter$XMLLabel: void <init>(soot.xml.XMLPrinter,long,java.lang.String,java.lang.String)>
<soot.xml.XMLPrinter: soot.xml.XMLNode setXMLNode(soot.xml.XMLNode)>
<sun.jkernel.BackgroundDownloader$1: void <init>(java.lang.String,java.lang.Process)>
<sun.jkernel.BackgroundDownloader$2: void <init>(java.lang.String,java.lang.Process)>
<sun.jkernel.Bundle$2: void <init>(sun.jkernel.Bundle,java.io.InputStream)>
<sun.jkernel.Bundle$3: void <init>(sun.jkernel.Bundle,boolean,boolean)>
<sun.jkernel.BundleCheck: void <init>(byte[])>
<sun.jkernel.DownloadManager$2$1: void <init>(sun.jkernel.DownloadManager$2)>
<sun.jkernel.DownloadManager$2$2: void <init>(sun.jkernel.DownloadManager$2,java.lang.String)>
<sun.jkernel.KernelError: void <init>(java.lang.String)>
<sun.misc.CEFormatException: void <init>(java.lang.String)>
<sun.misc.CEStreamExhausted: void <init>()>
<sun.misc.CompoundEnumeration: void <init>(java.util.Enumeration[])>
<sun.misc.ExtensionDependency$1: void <init>(sun.misc.ExtensionDependency,java.io.File)>
<sun.misc.ExtensionDependency$2: void <init>(sun.misc.ExtensionDependency,java.lang.String[],java.lang.String)>
<sun.misc.ExtensionDependency$3: void <init>(sun.misc.ExtensionDependency)>
<sun.misc.ExtensionDependency$4: void <init>(sun.misc.ExtensionDependency,java.io.File)>
<sun.misc.FDBigInt: void <init>(int[],int)>
<sun.misc.FileURLMapper: void <init>(java.net.URL)>
<sun.misc.FloatingDecimal: void <init>(boolean,int,char[],int,boolean)>
<sun.misc.FormattedFloatingDecimal: void <init>(double,int,sun.misc.FormattedFloatingDecimal$Form)>
<sun.misc.InvalidJarIndexException: void <init>(java.lang.String)>
<sun.misc.Launcher$2: void <init>(java.io.File[])>
<sun.misc.Launcher$AppClassLoader$1: void <init>(java.lang.String,java.io.File[],java.lang.ClassLoader)>
<sun.misc.Launcher$AppClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
<sun.misc.Launcher$ExtClassLoader$1: void <init>(java.io.File[])>
<sun.misc.Launcher$ExtClassLoader: void <init>(java.io.File[])>
<sun.misc.ProxyGenerator$1: void <init>(java.lang.String,byte[])>
<sun.misc.ProxyGenerator$ConstantPool$ValueEntry: void <init>(java.lang.Object)>
<sun.misc.ProxyGenerator$FieldInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>
<sun.misc.ProxyGenerator$MethodInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>
<sun.misc.ProxyGenerator$ProxyMethod: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],java.lang.Class)>
<sun.misc.ProxyGenerator$ProxyMethod: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],java.lang.Class,sun.misc.ProxyGenerator$1)>
<sun.misc.ProxyGenerator: void <init>(java.lang.String,java.lang.Class[])>
<sun.misc.Service$LazyIterator: void <init>(java.lang.Class,java.lang.ClassLoader)>
<sun.misc.Service$LazyIterator: void <init>(java.lang.Class,java.lang.ClassLoader,sun.misc.Service$1)>
<sun.misc.ServiceConfigurationError: void <init>(java.lang.String)>
<sun.misc.SoftCache$ValueCell: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>
<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>
<sun.misc.URLClassPath$3: void <init>(sun.misc.URLClassPath,java.net.URL)>
<sun.misc.URLClassPath$FileLoader$1: void <init>(sun.misc.URLClassPath$FileLoader,java.lang.String,java.net.URL,java.io.File)>
<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>
<sun.misc.URLClassPath$JarLoader$1: void <init>(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader$2: void <init>(sun.misc.URLClassPath$JarLoader,java.lang.String,java.net.URL,java.util.jar.JarEntry)>
<sun.misc.URLClassPath$JarLoader$3: void <init>(sun.misc.URLClassPath$JarLoader,java.net.URL)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex)>
<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap)>
<sun.misc.URLClassPath$Loader$1: void <init>(sun.misc.URLClassPath$Loader,java.lang.String,java.net.URL,java.net.URLConnection)>
<sun.misc.URLClassPath$Loader: void <init>(java.net.URL)>
<sun.nio.cs.FastCharsetProvider: void <init>(java.lang.String,java.util.Map,java.util.Map,java.util.Map)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.reflect.BootstrapConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.ClassDefiner$1: void <init>(java.lang.ClassLoader)>
<sun.reflect.ClassFileAssembler: void <init>(sun.reflect.ByteVector)>
<sun.reflect.DelegatingClassLoader: void <init>(java.lang.ClassLoader)>
<sun.reflect.DelegatingConstructorAccessorImpl: void <init>(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.DelegatingConstructorAccessorImpl: void setDelegate(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.Label$PatchInfo: void <init>(sun.reflect.ClassFileAssembler,short,short,int)>
<sun.reflect.MethodAccessorGenerator$1: void <init>(sun.reflect.MethodAccessorGenerator,java.lang.String,byte[],java.lang.Class)>
<sun.reflect.MethodAccessorGenerator: sun.reflect.ConstructorAccessor generateConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int)>
<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>
<sun.reflect.MethodAccessorGenerator: sun.reflect.SerializationConstructorAccessorImpl generateSerializationConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,java.lang.Class)>
<sun.reflect.NativeConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.NativeConstructorAccessorImpl: void setParent(sun.reflect.DelegatingConstructorAccessorImpl)>
<sun.reflect.ReflectionFactory: void setConstructorAccessor(java.lang.reflect.Constructor,sun.reflect.ConstructorAccessor)>
<sun.security.action.PutAllAction: void <init>(java.security.Provider,java.util.Map)>
<sun.security.ec.ECKeyFactory$2: void <init>(java.security.Provider)>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object)>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object,sun.security.jca.GetInstance$1)>
<sun.security.jca.ProviderConfig$2: void <init>(sun.security.jca.ProviderConfig)>
<sun.security.jca.ProviderConfig$3: void <init>(sun.security.jca.ProviderConfig)>
<sun.security.jca.ProviderList$3: void <init>(sun.security.jca.ProviderList)>
<sun.security.jca.ProviderList$ServiceList$1: void <init>(sun.security.jca.ProviderList$ServiceList)>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.util.List)>
<sun.security.jca.ProviderList$ServiceList: void addService(java.security.Provider$Service)>
<sun.security.jca.ProviderList: void <init>(sun.security.jca.ProviderConfig[],boolean)>
<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>
<sun.security.provider.PolicyFile$10: void <init>(sun.security.provider.PolicyFile,java.security.Identity)>
<sun.security.provider.PolicyFile$1: void <init>(sun.security.provider.PolicyFile)>
<sun.security.provider.PolicyFile$2: void <init>(sun.security.provider.PolicyFile,java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile$3: void <init>(sun.security.provider.PolicyFile,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo,java.lang.String)>
<sun.security.provider.PolicyFile$4: void <init>(sun.security.provider.PolicyFile,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile$5: void <init>(sun.security.provider.PolicyFile,java.security.ProtectionDomain)>
<sun.security.provider.PolicyFile$6: void <init>(sun.security.provider.PolicyFile,java.security.CodeSource)>
<sun.security.provider.PolicyFile$8: void <init>(sun.security.provider.PolicyFile,sun.security.provider.PolicyFile$PolicyEntry,java.security.CodeSource)>
<sun.security.provider.PolicyFile$9: void <init>(sun.security.provider.PolicyFile,java.security.cert.Certificate)>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource)>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource,java.util.List)>
<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>
<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>
<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>
<sun.security.util.DerIndefLenConverter: byte[] convert(byte[])>
<sun.security.util.DerInputBuffer: void <init>(byte[])>
<sun.security.util.DerInputBuffer: void <init>(byte[],int,int)>
<sun.security.util.DerInputStream: void <init>(sun.security.util.DerInputBuffer)>
<sun.security.util.ManifestDigester$Entry: void <init>(int,int,int,byte[])>
<sun.security.util.ManifestDigester: void <init>(byte[])>
<sun.security.util.ManifestEntryVerifier: void <init>(java.util.jar.Manifest)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>
<sun.security.util.ObjectIdentifier: void <init>(int[],boolean)>
<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>
<sun.security.util.SignatureFileVerifier: void setSignatureFile(byte[])>
<sun.security.validator.SimpleValidator: void <init>(java.lang.String,java.util.Collection)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.x509.AVAKeyword: void <init>(java.lang.String,sun.security.util.ObjectIdentifier,boolean,boolean)>
<sun.security.x509.AlgorithmId: void <init>(sun.security.util.ObjectIdentifier,sun.security.util.DerValue)>
<sun.security.x509.IPAddressName: void <init>(byte[])>
<sun.security.x509.KeyUsageExtension: void <init>(boolean[])>
<sun.security.x509.OIDMap$OIDInfo: void <init>(java.lang.String,sun.security.util.ObjectIdentifier,java.lang.String)>
<sun.security.x509.URIName: void <init>(java.net.URI,java.lang.String,sun.security.x509.DNSName)>
<sun.security.x509.UnparseableExtension: void <init>(sun.security.x509.Extension,java.lang.Throwable)>
<sun.security.x509.X509CRLEntryImpl: void setCertificateIssuer(javax.security.auth.x500.X500Principal,javax.security.auth.x500.X500Principal)>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>
<sun.security.x509.X509CertImpl: void verify(java.security.PublicKey)>
<sun.security.x509.X509CertImpl: void verify(java.security.PublicKey,java.lang.String)>
<sun.security.x509.X509Key: void <init>(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>
<sun.text.CompactByteArray: void <init>(short[],byte[])>
<sun.text.SupplementaryCharacterData: void <init>(int[])>
<sun.text.normalizer.CharTrie$FriendAgent: void <init>(sun.text.normalizer.CharTrie)>
<sun.text.normalizer.CharTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>
<sun.text.normalizer.ICUData$1: void <init>(java.lang.Class,java.lang.String)>
<sun.text.normalizer.IntTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>
<sun.text.normalizer.RuleCharacterIterator: void <init>(java.lang.String,sun.text.normalizer.SymbolTable,java.text.ParsePosition)>
<sun.text.normalizer.Trie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>
<sun.text.normalizer.TrieIterator: void <init>(sun.text.normalizer.Trie)>
<sun.text.normalizer.UnicodeSet$VersionFilter: void <init>(sun.text.normalizer.VersionInfo)>
<sun.text.normalizer.UnicodeSetIterator: void <init>(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSetIterator: void reset(sun.text.normalizer.UnicodeSet)>
<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<sun.util.LocaleServiceProviderPool$1: void <init>(sun.util.LocaleServiceProviderPool,java.lang.Class)>
<sun.util.ResourceBundleEnumeration: void <init>(java.util.Set,java.util.Enumeration)>
<sun.util.calendar.AbstractCalendar: void setEras(sun.util.calendar.Era[])>
<sun.util.calendar.BaseCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: void <init>(java.util.TimeZone)>
<sun.util.calendar.Gregorian$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.ImmutableGregorianDate: void <init>(sun.util.calendar.BaseCalendar$Date)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar: void <init>(java.lang.String,sun.util.calendar.Era[])>
<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int,int,int,long[],int[],int[],boolean)>
<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>
<sun.util.resources.LocaleData$2: void <init>(java.io.File)>
<beaver.Parser: beaver.ParsingTables access$000(beaver.Parser)>
<beaver.Parser: short[] access$200(beaver.Parser)>
<jas.VisibilityAnnotationAttr: java.util.ArrayList getList()>
<jasmin.ClassFile: jas.CodeAttr _getCode()>
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()>
<java.io.BufferedInputStream: byte[] getBufIfOpen()>
<java.io.BufferedInputStream: java.io.InputStream getInIfOpen()>
<java.io.ObjectInputStream$ValidationList: java.io.ObjectInputStream$ValidationList$Callback access$400(java.io.ObjectInputStream$ValidationList)>
<java.io.ObjectStreamClass$EntryFuture: java.lang.Object get()>
<java.io.ObjectStreamClass$EntryFuture: java.lang.Thread getOwner()>
<java.io.ObjectStreamClass$FieldReflector: java.io.ObjectStreamField[] getFields()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>
<java.io.ObjectStreamClass: java.lang.Class access$000(java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: java.lang.Class forClass()>
<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1600(java.io.ObjectStreamClass)>
<java.io.ObjectStreamField: java.lang.Class getType()>
<java.io.ObjectStreamField: java.lang.reflect.Field getField()>
<java.io.WriteAbortedException: java.lang.Throwable getCause()>
<java.lang.ClassLoader$NativeLibrary: java.lang.Class access$200(java.lang.ClassLoader$NativeLibrary)>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.lang.ClassLoader: java.security.ProtectionDomain getDefaultDomain()>
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<java.lang.ConditionalSpecialCasing$Entry: char[] getLowerCase()>
<java.lang.ConditionalSpecialCasing$Entry: char[] getUpperCase()>
<java.lang.InheritableThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>
<java.lang.ProcessEnvironment$ExternalData: byte[] getBytes()>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Set access$500(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringValues: java.util.Collection access$700(java.lang.ProcessEnvironment$StringValues)>
<java.lang.SystemClassLoaderAction: java.lang.Object run()>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>
<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>
<java.lang.UNIXProcess$Gate: java.io.IOException getException()>
<java.lang.UNIXProcess: java.io.FileDescriptor access$200(java.lang.UNIXProcess)>
<java.lang.UNIXProcess: java.io.FileDescriptor access$300(java.lang.UNIXProcess)>
<java.lang.UNIXProcess: java.io.FileDescriptor access$400(java.lang.UNIXProcess)>
<java.lang.UNIXProcess: java.io.InputStream getErrorStream()>
<java.lang.UNIXProcess: java.io.InputStream getInputStream()>
<java.lang.ref.Reference: java.lang.Object get()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
<java.math.BigDecimal: java.math.BigInteger inflate()>
<java.math.MutableBigInteger: int[] getMagnitudeArray()>
<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>
<java.net.URLClassLoader$3: java.net.URL nextElement()>
<java.net.URLClassLoader: java.security.AccessControlContext access$100(java.net.URLClassLoader)>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.CharBuffer: char[] array()>
<java.nio.charset.Charset$1: java.lang.Object next()>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>
<java.security.CodeSource: java.net.URL getLocation()>
<java.security.KeyFactory: java.security.KeyFactorySpi nextSpi(java.security.KeyFactorySpi)>
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.security.ProtectionDomain: java.security.PermissionCollection mergePermissions()>
<java.security.Provider$Service: java.security.Provider getProvider()>
<java.security.Provider: java.util.Set entrySet()>
<java.security.Provider: java.util.Set getServices()>
<java.security.SecureRandom: java.security.Provider getProvider()>
<java.security.SecureRandom: java.security.SecureRandomSpi getSecureRandomSpi()>
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>
<java.text.AttributeEntry: java.lang.Object getKey()>
<java.text.AttributeEntry: java.lang.Object getValue()>
<java.text.AttributedString$AttributedStringIterator: java.text.AttributedString getString()>
<java.text.BreakIterator$BreakIteratorCache: java.util.Locale getLocale()>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>
<java.text.DecimalFormat: java.math.BigDecimal getBigDecimalMultiplier()>
<java.text.DecimalFormat: java.math.BigInteger getBigIntegerMultiplier()>
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativePrefixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativeSuffixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getPositivePrefixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getPositiveSuffixFieldPositions()>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<java.text.DigitList: char[] getDataChars(int)>
<java.text.DontCareFieldPosition: java.text.Format$FieldDelegate getFieldDelegate()>
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>
<java.text.RuleBasedBreakIterator: byte[] getAdditionalData()>
<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<java.util.Calendar: java.util.TimeZone getZone()>
<java.util.Collections$SingletonSet: java.lang.Object access$400(java.util.Collections$SingletonSet)>
<java.util.Collections$SynchronizedMap: java.util.Collection values()>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<java.util.Date: sun.util.calendar.BaseCalendar$Date normalize()>
<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags flags(java.lang.String)>
<java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>
<java.util.Formatter: java.lang.Appendable out()>
<java.util.Formatter: java.util.Locale locale()>
<java.util.HashMap$HashIterator: java.util.HashMap$Entry nextEntry()>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>
<java.util.Hashtable: java.util.Set entrySet()>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.IdentityHashMap: java.lang.Object[] access$100(java.util.IdentityHashMap)>
<java.util.IdentityHashMap: java.util.Set keySet()>
<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry()>
<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>
<java.util.LinkedList: java.lang.Object remove(java.util.LinkedList$Entry)>
<java.util.LinkedList: java.util.LinkedList$Entry access$000(java.util.LinkedList)>
<java.util.ResourceBundle$BundleReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.util.ResourceBundle$CacheKey: java.lang.Throwable getCause()>
<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>
<java.util.ResourceBundle$LoaderReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.util.ResourceBundle: java.util.Locale getLocale()>
<java.util.ServiceLoader: java.util.LinkedHashMap access$400(java.util.ServiceLoader)>
<java.util.ServiceLoader: java.util.ServiceLoader$LazyIterator access$500(java.util.ServiceLoader)>
<java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry nextEntry()>
<java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.WeakHashMap$Entry: java.lang.Object access$200(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$100(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry()>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] access$500(java.util.WeakHashMap)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] getTable()>
<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry()>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object readValueUnderLock(java.util.concurrent.ConcurrentHashMap$HashEntry)>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>
<java.util.concurrent.FutureTask$Sync: java.lang.Object innerGet()>
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.jar.JarFile: java.util.jar.JarEntry getManEntry()>
<java.util.jar.JarFile: java.util.jar.JarVerifier access$100(java.util.jar.JarFile)>
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()>
<java.util.jar.Manifest: java.util.Map getEntries()>
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>
<java.util.logging.LogManager: java.lang.ref.ReferenceQueue access$1100(java.util.logging.LogManager)>
<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext access$400(java.util.logging.LogManager)>
<java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String)>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node atom()>
<java.util.zip.ZipEntry: byte[] getExtra()>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<javax.crypto.SunJCE_c: javax.crypto.SunJCE_d b()>
<javax.crypto.SunJCE_f: java.security.spec.AlgorithmParameterSpec e()>
<polyglot.ast.Binary$Operator: polyglot.ast.Precedence precedence()>
<polyglot.ext.jl.ast.AbstractBlock_c: java.util.List statements()>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ast.Prefix prefix()>
<polyglot.ext.jl.ast.AmbReceiver_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ast.QualifierNode qual()>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Expr array()>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Expr index()>
<polyglot.ext.jl.ast.ArrayInit_c: java.util.List elements()>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Expr errorMessage()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Assign$Operator operator()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Expr left()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Expr right()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Binary$Operator operator()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Expr left()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Expr right()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Precedence precedence()>
<polyglot.ext.jl.ast.Branch_c: polyglot.ast.Branch$Kind kind()>
<polyglot.ext.jl.ast.Call_c: java.util.List arguments()>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Receiver target()>
<polyglot.ext.jl.ast.Call_c: polyglot.types.MethodInstance methodInstance()>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Cast_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Formal formal()>
<polyglot.ext.jl.ast.ClassBody_c: java.util.List members()>
<polyglot.ext.jl.ast.ClassDecl_c: java.util.List interfaces()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.ClassBody body()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.TypeNode superClass()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.ParsedClassType type()>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.TypeNode typeNode()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr alternative()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr consequent()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.ConstructorCall$Kind kind()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Expr qualifier()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.ast.Eval_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Expr_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Expr init()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.FieldInstance fieldInstance()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Receiver target()>
<polyglot.ext.jl.ast.Field_c: polyglot.types.FieldInstance fieldInstance()>
<polyglot.ext.jl.ast.FloatLit_c: polyglot.ast.FloatLit$Kind kind()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.Formal_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Formal_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Stmt alternative()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Stmt consequent()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.InitializerInstance initializerInstance()>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.TypeNode compareType()>
<polyglot.ext.jl.ast.IntLit_c: polyglot.ast.IntLit$Kind kind()>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ast.Stmt statement()>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.ClassDecl decl()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Expr init()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.Local_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.TypeNode returnType()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.MethodInstance methodInstance()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ast.ArrayInit init()>
<polyglot.ext.jl.ast.NewArray_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.New_c: java.util.List arguments()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.ClassBody body()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Expr qualifier()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.TypeNode objectType()>
<polyglot.ext.jl.ast.New_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.New_c: polyglot.types.ParsedClassType anonType()>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.DelFactory delFactory()>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ExtFactory extFactory()>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Ext ext()>
<polyglot.ext.jl.ast.Node_c: polyglot.util.Position position()>
<polyglot.ext.jl.ast.PackageNode_c: polyglot.types.Package package_()>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.PackageNode package_()>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.frontend.Source source()>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Special$Kind kind()>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.TypeNode qualifier()>
<polyglot.ext.jl.ast.StringLit_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Block finallyBlock()>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Block tryBlock()>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Unary$Operator operator()>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.parse.Grm: polyglot.util.Position pos(polyglot.ext.jl.parse.Name)>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.Type base()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ClassType currentClass()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ClassType findFieldScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.CodeInstance currentCode()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ImportTable importTable()>
<polyglot.ext.jl.types.Context_c: polyglot.types.Named findInThisScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.ParsedClassType currentClassScope()>
<polyglot.ext.jl.types.Context_c: polyglot.types.Resolver outerResolver()>
<polyglot.ext.jl.types.Context_c: polyglot.types.TypeSystem typeSystem()>
<polyglot.ext.jl.types.FieldInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.InitializerInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.InitializerInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.MethodInstance_c: polyglot.types.Type returnType()>
<polyglot.ext.jl.types.Package_c: polyglot.types.Package prefix()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List constructors()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List fields()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List interfaces()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List memberClasses()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List methods()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.frontend.Source fromSource()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.ClassType outer()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.ClassType$Kind kind()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Package package_()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Type superType()>
<polyglot.ext.jl.types.PrimitiveType_c: polyglot.types.PrimitiveType$Kind kind()>
<polyglot.ext.jl.types.ProcedureInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.ProcedureInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.TypeObject_c: polyglot.types.TypeSystem typeSystem()>
<polyglot.ext.jl.types.TypeObject_c: polyglot.util.Position position()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Class()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Object()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType String()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Throwable()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.LazyClassInitializer defaultClassInitializer()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.NullType Null()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Boolean()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Byte()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Char()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Double()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Float()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Int()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Long()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Short()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Void()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.TableResolver parsedResolver()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.TopLevelResolver systemResolver()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.UnknownQualifier unknownQualifier(polyglot.util.Position)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.UnknownType unknownType(polyglot.util.Position)>
<polyglot.ext.jl.types.VarInstance_c: java.lang.Object constantValue()>
<polyglot.ext.jl.types.VarInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.VarInstance_c: polyglot.types.Type type()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.frontend.Compiler compiler()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.frontend.SourceLoader sourceLoader()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.frontend.Stats getStats()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.frontend.TargetFactory targetFactory()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.main.Options getOptions()>
<polyglot.frontend.AbstractExtensionInfo: polyglot.types.TypeSystem typeSystem()>
<polyglot.frontend.AbstractPass: polyglot.frontend.Pass$ID id()>
<polyglot.frontend.Compiler: java.util.Collection outputFiles()>
<polyglot.frontend.Compiler: polyglot.frontend.ExtensionInfo sourceExtension()>
<polyglot.frontend.Compiler: polyglot.types.reflect.ClassFileLoader loader()>
<polyglot.frontend.Compiler: polyglot.util.ErrorQueue errorQueue()>
<polyglot.frontend.FileSource: java.io.Reader open()>
<polyglot.frontend.InnerJob: polyglot.types.Context context()>
<polyglot.frontend.Job: java.util.List passes()>
<polyglot.frontend.Job: java.util.Map passMap()>
<polyglot.frontend.Job: polyglot.ast.Node ast()>
<polyglot.frontend.Job: polyglot.frontend.ExtensionInfo extensionInfo()>
<polyglot.frontend.Job: polyglot.frontend.Pass runningPass()>
<polyglot.frontend.Source: java.util.Date lastModified()>
<polyglot.frontend.SourceJob: java.util.Set dependencies()>
<polyglot.frontend.SourceJob: polyglot.frontend.Source source()>
<polyglot.lex.BooleanLiteral: java.lang.Boolean getValue()>
<polyglot.lex.CharacterLiteral: java.lang.Character getValue()>
<polyglot.lex.NumericLiteral: java.lang.Number getValue()>
<polyglot.lex.Token: polyglot.util.Position getPosition()>
<polyglot.parse.BaseParser: polyglot.util.Position pos(polyglot.parse.VarDeclarator)>
<polyglot.parse.BaseParser: polyglot.util.Position position()>
<polyglot.types.ImportTable: polyglot.types.Package package_()>
<polyglot.types.SemanticException: polyglot.util.Position position()>
<polyglot.types.reflect.ClassFile: polyglot.types.reflect.Attribute createAttribute(java.io.DataInputStream,java.lang.String,int,int)>
<polyglot.types.reflect.Constant: java.lang.Object value()>
<polyglot.util.ErrorInfo: polyglot.util.Position getPosition()>
<polyglot.util.IdentityKey: java.lang.Object object()>
<polyglot.util.InternalCompilerError: polyglot.util.Position position()>
<polyglot.visit.AmbiguityRemover: polyglot.visit.AmbiguityRemover$Kind kind()>
<polyglot.visit.AscriptionVisitor: polyglot.types.Type toType()>
<polyglot.visit.CFGBuilder: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.ContextVisitor: polyglot.types.Context context()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.frontend.Job job()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.ExceptionChecker: polyglot.util.SubtypeSet throwsSet()>
<polyglot.visit.ExceptionChecker: polyglot.visit.ExceptionChecker pop()>
<polyglot.visit.FlowGraph$Edge: polyglot.visit.FlowGraph$EdgeKey getKey()>
<polyglot.visit.FlowGraph$Edge: polyglot.visit.FlowGraph$Peer getTarget()>
<polyglot.visit.FlowGraph$ExceptionEdgeKey: polyglot.types.Type type()>
<polyglot.visit.FlowGraph$Peer: java.util.List preds()>
<polyglot.visit.FlowGraph$Peer: java.util.List succs()>
<polyglot.visit.FlowGraph$Peer: java.util.Set succEdgeKeys()>
<polyglot.visit.FlowGraph$Peer: polyglot.visit.DataFlow$Item inItem()>
<polyglot.visit.FlowGraph: polyglot.ast.Term exitNode()>
<polyglot.visit.FlowGraph: polyglot.ast.Term root()>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$InitCount getMax()>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$InitCount getMin()>
<polyglot.visit.Translator: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.Translator: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.TypeBuilder: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.TypeBuilder: polyglot.frontend.Job job()>
<polyglot.visit.TypeBuilder: polyglot.types.ImportTable importTable()>
<polyglot.visit.TypeBuilder: polyglot.types.ParsedClassType currentClass()>
<polyglot.visit.TypeBuilder: polyglot.types.TypeSystem typeSystem()>
<soot.AbstractSootFieldRef: soot.SootClass access$000(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: soot.SootClass declaringClass()>
<soot.AbstractSootFieldRef: soot.Type access$200(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: soot.Type type()>
<soot.AbstractSootMethodRef: java.util.List access$200(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: java.util.List parameterTypes()>
<soot.AbstractSootMethodRef: soot.SootClass access$000(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: soot.SootClass declaringClass()>
<soot.AbstractSootMethodRef: soot.Type access$300(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: soot.Type returnType()>
<soot.AbstractSootMethodRef: soot.util.NumberedString getSubSignature()>
<soot.AbstractTrap: java.util.List getUnitBoxes()>
<soot.AbstractTrap: soot.SootClass getException()>
<soot.AbstractUnit: java.util.List getUseAndDefBoxes()>
<soot.AbstractUnitAllMapTo: java.lang.Object get(java.lang.Object)>
<soot.AbstractUnitBox: soot.Unit getUnit()>
<soot.AbstractUnitPrinter: java.lang.StringBuffer output()>
<soot.AbstractUnitPrinter: soot.AttributesUnitPrinter getPositionTagger()>
<soot.AbstractValueBox: soot.Value getValue()>
<soot.AnySubType: soot.RefType getBase()>
<soot.ArrayType: soot.Type getElementType()>
<soot.Body: soot.PatchingChain getUnits()>
<soot.Body: soot.SootMethod getMethod()>
<soot.Body: soot.util.Chain getLocals()>
<soot.Body: soot.util.Chain getTraps()>
<soot.EquivalentValue: soot.Value getValue()>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode getParent()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AbstractWildcardType: soot.SootClass getSootClassDecl()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr prevExpr()>
<soot.JastAddJ.Access: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AdditiveExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AndLogicalExpr: soot.jimple.Stmt next_test_label()>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayDecl: soot.JastAddJ.TypeDecl elementType()>
<soot.JastAddJ.ArrayDecl: soot.JastAddJ.TypeDecl erasure()>
<soot.JastAddJ.ArrayDecl: soot.SootClass getSootClassDecl()>
<soot.JastAddJ.ArrayDecl: soot.Type getSootType()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl declType()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Attributes$FieldAttributes: soot.JastAddJ.CONSTANT_Info constantValue()>
<soot.JastAddJ.Attributes$MethodAttributes: soot.JastAddJ.ElementValue elementValue()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.BitwiseExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Body: soot.Local emitThis(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Body: soot.tagkit.LineNumberTag currentSourceRangeTag()>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.BooleanType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.BooleanType: soot.Type getSootType()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.FieldDeclaration getFieldDeclaration()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.Variable decl()>
<soot.JastAddJ.BoundMethodAccess: soot.JastAddJ.MethodDecl decl()>
<soot.JastAddJ.BoundMethodAccess: soot.JastAddJ.MethodDecl decl_compute()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.TypeDecl getTypeDecl()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection branches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection escapedBranches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBranches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBreaks()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetContinues()>
<soot.JastAddJ.BreakStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.Stmt targetStmt()>
<soot.JastAddJ.ByteType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.ByteType: soot.JastAddJ.TypeDecl unaryNumericPromotion()>
<soot.JastAddJ.ByteType: soot.Type getSootType()>
<soot.JastAddJ.Case: soot.jimple.Stmt label()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.CatchClause: soot.jimple.Stmt label()>
<soot.JastAddJ.CharType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.CharType: soot.JastAddJ.TypeDecl unaryNumericPromotion()>
<soot.JastAddJ.CharType: soot.Type getSootType()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ClassDecl$2: java.lang.Object next()>
<soot.JastAddJ.ClassDecl: java.util.Collection unimplementedMethods()>
<soot.JastAddJ.ClassDecl: java.util.HashMap interfacesMethodsSignatureMap()>
<soot.JastAddJ.ClassDecl: java.util.HashMap methodsSignatureMap()>
<soot.JastAddJ.ClassDecl: java.util.HashSet implementedInterfaces()>
<soot.JastAddJ.ClassDecl: soot.SootClass sootClass()>
<soot.JastAddJ.ClassDeclSubstituted: java.util.Collection constructors()>
<soot.JastAddJ.ClassDeclSubstituted: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.ClassDeclSubstituted: soot.JastAddJ.TypeDecl getOriginal()>
<soot.JastAddJ.ClassInstanceExpr: soot.JastAddJ.ConstructorDecl decl()>
<soot.JastAddJ.ClassInstanceExpr: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.ClassInstanceExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ConditionalExpr: soot.jimple.Stmt else_branch_label()>
<soot.JastAddJ.ConditionalExpr: soot.jimple.Stmt then_branch_label()>
<soot.JastAddJ.ConstructorAccess: soot.JastAddJ.ConstructorDecl decl()>
<soot.JastAddJ.ConstructorAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.ConstructorAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ConstructorDecl: soot.SootMethod sootMethod()>
<soot.JastAddJ.ConstructorDecl: soot.SootMethodRef sootRef()>
<soot.JastAddJ.ConstructorDeclSubstituted: soot.JastAddJ.ConstructorDecl getOriginal()>
<soot.JastAddJ.ContinueStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.Stmt targetStmt()>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt begin_label()>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt cond_label()>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.DoubleType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.DoubleType: soot.Type getSootType()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.EnhancedForStmt: soot.jimple.Stmt cond_label()>
<soot.JastAddJ.EnhancedForStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.EnhancedForStmt: soot.jimple.Stmt update_label()>
<soot.JastAddJ.EnumDecl: java.util.ArrayList enumConstants()>
<soot.JastAddJ.Expr: soot.jimple.Stmt false_label()>
<soot.JastAddJ.Expr: soot.jimple.Stmt true_label()>
<soot.JastAddJ.FieldDeclaration: java.lang.Object next()>
<soot.JastAddJ.FieldDeclaration: java.util.Collection exceptions()>
<soot.JastAddJ.FieldDeclaration: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.FieldDeclaration: soot.SootFieldRef sootRef()>
<soot.JastAddJ.FieldDeclarationSubstituted: soot.JastAddJ.FieldDeclaration getOriginal()>
<soot.JastAddJ.FloatType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.FloatType: soot.Type getSootType()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt begin_label()>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt cond_label()>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt update_label()>
<soot.JastAddJ.GLBType: soot.SootClass getSootClassDecl()>
<soot.JastAddJ.GenericClassDecl: soot.JastAddJ.TypeDecl rawType()>
<soot.JastAddJ.GenericClassDeclSubstituted: java.util.Collection constructors()>
<soot.JastAddJ.GenericClassDeclSubstituted: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.GenericClassDeclSubstituted: soot.JastAddJ.TypeDecl getOriginal()>
<soot.JastAddJ.GenericInterfaceDecl: soot.JastAddJ.TypeDecl rawType()>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: java.util.Collection constructors()>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.GenericInterfaceDeclSubstituted: soot.JastAddJ.TypeDecl getOriginal()>
<soot.JastAddJ.IfStmt: soot.jimple.Stmt else_branch_label()>
<soot.JastAddJ.IfStmt: soot.jimple.Stmt then_branch_label()>
<soot.JastAddJ.InstanceInitializer: java.util.Collection exceptions()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.IntType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.IntType: soot.Type getSootType()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.InterfaceDecl$1: java.lang.Object next()>
<soot.JastAddJ.InterfaceDecl: java.util.HashMap methodsSignatureMap()>
<soot.JastAddJ.InterfaceDecl: java.util.HashSet implementedInterfaces()>
<soot.JastAddJ.InterfaceDecl: soot.JastAddJ.TypeDecl methodHolder()>
<soot.JastAddJ.InterfaceDecl: soot.SootClass sootClass()>
<soot.JastAddJ.InterfaceDeclSubstituted: java.util.Collection constructors()>
<soot.JastAddJ.InterfaceDeclSubstituted: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.InterfaceDeclSubstituted: soot.JastAddJ.TypeDecl getOriginal()>
<soot.JastAddJ.LUBType: soot.JastAddJ.TypeDecl lub()>
<soot.JastAddJ.LUBType: soot.SootClass getSootClassDecl()>
<soot.JastAddJ.LabeledStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.LabeledStmt: soot.jimple.Stmt label()>
<soot.JastAddJ.Literal: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LogicalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LongType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.LongType: soot.Type getSootType()>
<soot.JastAddJ.MethodAccess: java.util.Collection exceptionCollection()>
<soot.JastAddJ.MethodAccess: soot.JastAddJ.MethodDecl decl()>
<soot.JastAddJ.MethodAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.MethodAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.MethodDecl: java.lang.Object next()>
<soot.JastAddJ.MethodDecl: soot.JastAddJ.MethodDecl sourceMethodDecl()>
<soot.JastAddJ.MethodDecl: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.MethodDecl: soot.SootMethod sootMethod()>
<soot.JastAddJ.MethodDecl: soot.SootMethodRef sootRef()>
<soot.JastAddJ.MethodDeclSubstituted: soot.JastAddJ.MethodDecl getOriginal()>
<soot.JastAddJ.MethodDeclSubstituted: soot.JastAddJ.MethodDecl sourceMethodDecl()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.MultiplicativeExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.NumericType: soot.JastAddJ.TypeDecl unaryNumericPromotion()>
<soot.JastAddJ.OrLogicalExpr: soot.jimple.Stmt next_test_label()>
<soot.JastAddJ.ParClassDecl: java.util.Collection constructors()>
<soot.JastAddJ.ParClassDecl: java.util.Collection unimplementedMethods()>
<soot.JastAddJ.ParClassDecl: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.ParClassDecl: soot.JastAddJ.TypeDecl erasure()>
<soot.JastAddJ.ParClassDecl: soot.JastAddJ.TypeDecl genericDecl()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ParInterfaceDecl: java.util.Collection constructors()>
<soot.JastAddJ.ParInterfaceDecl: java.util.Collection unimplementedMethods()>
<soot.JastAddJ.ParInterfaceDecl: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.ParInterfaceDecl: soot.JastAddJ.TypeDecl erasure()>
<soot.JastAddJ.ParInterfaceDecl: soot.JastAddJ.TypeDecl genericDecl()>
<soot.JastAddJ.ParMethodDecl: soot.JastAddJ.GenericMethodDecl genericMethodDecl()>
<soot.JastAddJ.ParMethodDecl: soot.JastAddJ.MethodDecl sourceMethodDecl()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ParameterDeclaration: java.lang.Object next()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.Program: soot.JastAddJ.ConstructorDecl unknownConstructor()>
<soot.JastAddJ.Program: soot.JastAddJ.FileNamesPart access$000(soot.JastAddJ.Program)>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeBoolean()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeByte()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeChar()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeCloneable()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeDouble()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeFloat()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeInt()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeLong()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeNull()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeObject()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeSerializable()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeShort()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeString()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl typeVoid()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.Program: soot.JastAddJ.WildcardsCompilationUnit wildcards()>
<soot.JastAddJ.ReferenceType: soot.JastAddJ.TypeDecl unboxed()>
<soot.JastAddJ.RelationalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ReturnStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.ShiftExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ShortType: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.ShortType: soot.JastAddJ.TypeDecl unaryNumericPromotion()>
<soot.JastAddJ.ShortType: soot.Type getSootType()>
<soot.JastAddJ.Signatures$ClassSignature: soot.JastAddJ.Access superclassSignature()>
<soot.JastAddJ.Signatures$ClassSignature: soot.JastAddJ.List superinterfaceSignature()>
<soot.JastAddJ.Signatures$ClassSignature: soot.JastAddJ.List typeParameters()>
<soot.JastAddJ.Signatures$FieldSignature: soot.JastAddJ.Access fieldTypeAccess()>
<soot.JastAddJ.Signatures$MethodSignature: java.util.Collection parameterTypes()>
<soot.JastAddJ.Signatures$MethodSignature: soot.JastAddJ.Access returnType()>
<soot.JastAddJ.Signatures$MethodSignature: soot.JastAddJ.List exceptionList()>
<soot.JastAddJ.Signatures$MethodSignature: soot.JastAddJ.List typeParameters()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.SuperConstructorAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.SwitchStmt: soot.JastAddJ.DefaultCase defaultCase()>
<soot.JastAddJ.SwitchStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.SynchronizedStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.SynchronizedStmt: soot.jimple.Stmt label_begin()>
<soot.JastAddJ.SynchronizedStmt: soot.jimple.Stmt label_end()>
<soot.JastAddJ.SynchronizedStmt: soot.jimple.Stmt label_exception_handler()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeNull()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeNullPointerException()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.TryStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.TryStmt: java.util.Collection branches()>
<soot.JastAddJ.TryStmt: java.util.Collection branchesFromFinally()>
<soot.JastAddJ.TryStmt: java.util.Collection escapedBranches()>
<soot.JastAddJ.TryStmt: java.util.Collection targetBranches()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TypeDecl typeError()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TypeDecl typeRuntimeException()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt label_begin()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt label_block_end()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt label_end()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt label_exception_handler()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt label_finally()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.TypeDecl: java.lang.Object next()>
<soot.JastAddJ.TypeDecl: java.util.Collection constructors()>
<soot.JastAddJ.TypeDecl: java.util.Collection enclosingVariables()>
<soot.JastAddJ.TypeDecl: java.util.Collection unimplementedMethods()>
<soot.JastAddJ.TypeDecl: java.util.HashMap localFieldsMap()>
<soot.JastAddJ.TypeDecl: java.util.HashMap localMethodsSignatureMap()>
<soot.JastAddJ.TypeDecl: java.util.HashMap methodsNameMap()>
<soot.JastAddJ.TypeDecl: java.util.HashMap methodsSignatureMap()>
<soot.JastAddJ.TypeDecl: java.util.HashSet implementedInterfaces()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.FieldDeclaration createAssertionsDisabled()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.MethodDecl createStaticClassMethod()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl arrayType()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl boxed()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl componentType()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl elementType()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl erasure()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl typeError()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl typeException()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl typeObject()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl typeRuntimeException()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl unboxed()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.TypeDecl: soot.SootClass getSootClassDecl()>
<soot.JastAddJ.TypeDecl: soot.SootClass sootClass()>
<soot.JastAddJ.TypeDecl: soot.Type getSootType()>
<soot.JastAddJ.TypeVariable: soot.JastAddJ.TypeDecl erasure()>
<soot.JastAddJ.TypeVariable: soot.JastAddJ.TypeDecl lubType()>
<soot.JastAddJ.TypeVariable: soot.JastAddJ.TypeDecl toInterface()>
<soot.JastAddJ.Unary: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Variable decl()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VariableDeclaration: java.lang.Object next()>
<soot.JastAddJ.VoidType: soot.Type getSootType()>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt cond_label()>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt end_label()>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt stmt_label()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.WildcardsCompilationUnit: soot.JastAddJ.TypeDecl typeWildcard()>
<soot.LabeledUnitPrinter: java.util.Map labels()>
<soot.LabeledUnitPrinter: java.util.Map references()>
<soot.MethodContext: soot.Context context()>
<soot.MethodContext: soot.SootMethod method()>
<soot.PatchingChain$PatchingIterator: java.lang.Object next()>
<soot.PatchingChain: soot.util.Chain getNonPatchingChain()>
<soot.PhaseOptions: soot.PackManager getPM()>
<soot.RefType: soot.AnySubType getAnySubType()>
<soot.RefType: soot.SootClass getSootClass()>
<soot.Scene: java.util.Collection dynamicClasses()>
<soot.Scene: java.util.List getEntryPoints()>
<soot.Scene: java.util.Set getReservedNames()>
<soot.Scene: soot.FastHierarchy getFastHierarchy()>
<soot.Scene: soot.Hierarchy getActiveHierarchy()>
<soot.Scene: soot.PointsToAnalysis getPointsToAnalysis()>
<soot.Scene: soot.RefType getObjectType()>
<soot.Scene: soot.SootClass getMainClass()>
<soot.Scene: soot.jimple.toolkits.callgraph.CallGraph getCallGraph()>
<soot.Scene: soot.jimple.toolkits.callgraph.ReachableMethods getReachableMethods()>
<soot.Scene: soot.jimple.toolkits.pointer.SideEffectAnalysis getSideEffectAnalysis()>
<soot.Scene: soot.toolkits.exceptions.ThrowAnalysis getDefaultThrowAnalysis()>
<soot.Scene: soot.util.ArrayNumberer getFieldNumberer()>
<soot.Scene: soot.util.ArrayNumberer getLocalNumberer()>
<soot.Scene: soot.util.ArrayNumberer getMethodNumberer()>
<soot.Scene: soot.util.ArrayNumberer getTypeNumberer()>
<soot.Scene: soot.util.Chain getApplicationClasses()>
<soot.Scene: soot.util.Chain getClasses()>
<soot.Scene: soot.util.Chain getLibraryClasses()>
<soot.Scene: soot.util.Chain getPhantomClasses()>
<soot.Scene: soot.util.StringNumberer getSubSigNumberer()>
<soot.Singletons: soot.BooleanType soot_BooleanType()>
<soot.Singletons: soot.ByteType soot_ByteType()>
<soot.Singletons: soot.CharType soot_CharType()>
<soot.Singletons: soot.DoubleType soot_DoubleType()>
<soot.Singletons: soot.EntryPoints soot_EntryPoints()>
<soot.Singletons: soot.ErroneousType soot_ErroneousType()>
<soot.Singletons: soot.FloatType soot_FloatType()>
<soot.Singletons: soot.IntType soot_IntType()>
<soot.Singletons: soot.JastAddInitialResolver soot_JastAddInitialResolver()>
<soot.Singletons: soot.LongType soot_LongType()>
<soot.Singletons: soot.Main soot_Main()>
<soot.Singletons: soot.NullType soot_NullType()>
<soot.Singletons: soot.PackManager soot_PackManager()>
<soot.Singletons: soot.PhaseOptions soot_PhaseOptions()>
<soot.Singletons: soot.Printer soot_Printer()>
<soot.Singletons: soot.RefType soot_RefType()>
<soot.Singletons: soot.Scene soot_Scene()>
<soot.Singletons: soot.ShortType soot_ShortType()>
<soot.Singletons: soot.SootResolver soot_SootResolver()>
<soot.Singletons: soot.SourceLocator soot_SourceLocator()>
<soot.Singletons: soot.StmtAddressType soot_StmtAddressType()>
<soot.Singletons: soot.Timers soot_Timers()>
<soot.Singletons: soot.UnknownType soot_UnknownType()>
<soot.Singletons: soot.VoidType soot_VoidType()>
<soot.Singletons: soot.baf.Baf soot_baf_Baf()>
<soot.Singletons: soot.baf.DoubleWordType soot_baf_DoubleWordType()>
<soot.Singletons: soot.baf.WordType soot_baf_WordType()>
<soot.Singletons: soot.baf.toolkits.base.LoadStoreOptimizer soot_baf_toolkits_base_LoadStoreOptimizer()>
<soot.Singletons: soot.baf.toolkits.base.PeepholeOptimizer soot_baf_toolkits_base_PeepholeOptimizer()>
<soot.Singletons: soot.coffi.CONSTANT_Utf8_collector soot_coffi_CONSTANT_Utf8_collector()>
<soot.Singletons: soot.coffi.Double2ndHalfType soot_coffi_Double2ndHalfType()>
<soot.Singletons: soot.coffi.Long2ndHalfType soot_coffi_Long2ndHalfType()>
<soot.Singletons: soot.coffi.Util soot_coffi_Util()>
<soot.Singletons: soot.dava.Dava soot_dava_Dava()>
<soot.Singletons: soot.dava.DavaPrinter soot_dava_DavaPrinter()>
<soot.Singletons: soot.dava.DavaStaticBlockCleaner soot_dava_DavaStaticBlockCleaner()>
<soot.Singletons: soot.dava.toolkits.base.AST.ASTWalker soot_dava_toolkits_base_AST_ASTWalker()>
<soot.Singletons: soot.dava.toolkits.base.AST.TryContentsFinder soot_dava_toolkits_base_AST_TryContentsFinder()>
<soot.Singletons: soot.dava.toolkits.base.AST.UselessTryRemover soot_dava_toolkits_base_AST_UselessTryRemover()>
<soot.Singletons: soot.dava.toolkits.base.AST.transformations.UselessLabelFinder soot_dava_toolkits_base_AST_transformations_UselessLabelFinder()>
<soot.Singletons: soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder soot_dava_toolkits_base_AST_traversals_ClosestAbruptTargetFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.AbruptEdgeFinder soot_dava_toolkits_base_finders_AbruptEdgeFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.CycleFinder soot_dava_toolkits_base_finders_CycleFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.ExceptionFinder soot_dava_toolkits_base_finders_ExceptionFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.IfFinder soot_dava_toolkits_base_finders_IfFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.LabeledBlockFinder soot_dava_toolkits_base_finders_LabeledBlockFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.SequenceFinder soot_dava_toolkits_base_finders_SequenceFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.SwitchFinder soot_dava_toolkits_base_finders_SwitchFinder()>
<soot.Singletons: soot.dava.toolkits.base.finders.SynchronizedBlockFinder soot_dava_toolkits_base_finders_SynchronizedBlockFinder()>
<soot.Singletons: soot.dava.toolkits.base.misc.MonitorConverter soot_dava_toolkits_base_misc_MonitorConverter()>
<soot.Singletons: soot.dava.toolkits.base.misc.PackageNamer soot_dava_toolkits_base_misc_PackageNamer()>
<soot.Singletons: soot.dava.toolkits.base.misc.ThrowFinder soot_dava_toolkits_base_misc_ThrowFinder()>
<soot.Singletons: soot.dava.toolkits.base.misc.ThrowNullConverter soot_dava_toolkits_base_misc_ThrowNullConverter()>
<soot.Singletons: soot.grimp.Grimp soot_grimp_Grimp()>
<soot.Singletons: soot.grimp.toolkits.base.ConstructorFolder soot_grimp_toolkits_base_ConstructorFolder()>
<soot.Singletons: soot.javaToJimple.InitialResolver soot_javaToJimple_InitialResolver()>
<soot.Singletons: soot.jimple.Jimple soot_jimple_Jimple()>
<soot.Singletons: soot.jimple.NullConstant soot_jimple_NullConstant()>
<soot.Singletons: soot.jimple.paddle.PaddleHook soot_jimple_paddle_PaddleHook()>
<soot.Singletons: soot.jimple.spark.SparkTransformer soot_jimple_spark_SparkTransformer()>
<soot.Singletons: soot.jimple.spark.fieldrw.FieldReadTagAggregator soot_jimple_spark_fieldrw_FieldReadTagAggregator()>
<soot.Singletons: soot.jimple.spark.fieldrw.FieldTagAggregator soot_jimple_spark_fieldrw_FieldTagAggregator()>
<soot.Singletons: soot.jimple.spark.fieldrw.FieldTagger soot_jimple_spark_fieldrw_FieldTagger()>
<soot.Singletons: soot.jimple.spark.fieldrw.FieldWriteTagAggregator soot_jimple_spark_fieldrw_FieldWriteTagAggregator()>
<soot.Singletons: soot.jimple.spark.pag.ArrayElement soot_jimple_spark_pag_ArrayElement()>
<soot.Singletons: soot.jimple.spark.sets.AllSharedHybridNodes soot_jimple_spark_sets_AllSharedHybridNodes()>
<soot.Singletons: soot.jimple.spark.sets.AllSharedListNodes soot_jimple_spark_sets_AllSharedListNodes()>
<soot.Singletons: soot.jimple.spark.sets.EmptyPointsToSet soot_jimple_spark_sets_EmptyPointsToSet()>
<soot.Singletons: soot.jimple.toolkits.annotation.AvailExprTagger soot_jimple_toolkits_annotation_AvailExprTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.DominatorsTagger soot_jimple_toolkits_annotation_DominatorsTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.LineNumberAdder soot_jimple_toolkits_annotation_LineNumberAdder()>
<soot.Singletons: soot.jimple.toolkits.annotation.arraycheck.ArrayBoundsChecker soot_jimple_toolkits_annotation_arraycheck_ArrayBoundsChecker()>
<soot.Singletons: soot.jimple.toolkits.annotation.arraycheck.ClassFieldAnalysis soot_jimple_toolkits_annotation_arraycheck_ClassFieldAnalysis()>
<soot.Singletons: soot.jimple.toolkits.annotation.arraycheck.RectangularArrayFinder soot_jimple_toolkits_annotation_arraycheck_RectangularArrayFinder()>
<soot.Singletons: soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher soot_jimple_toolkits_annotation_callgraph_CallGraphGrapher()>
<soot.Singletons: soot.jimple.toolkits.annotation.callgraph.CallGraphTagger soot_jimple_toolkits_annotation_callgraph_CallGraphTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.defs.ReachingDefsTagger soot_jimple_toolkits_annotation_defs_ReachingDefsTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.fields.UnreachableFieldsTagger soot_jimple_toolkits_annotation_fields_UnreachableFieldsTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.liveness.LiveVarsTagger soot_jimple_toolkits_annotation_liveness_LiveVarsTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.logic.LoopInvariantFinder soot_jimple_toolkits_annotation_logic_LoopInvariantFinder()>
<soot.Singletons: soot.jimple.toolkits.annotation.methods.UnreachableMethodsTagger soot_jimple_toolkits_annotation_methods_UnreachableMethodsTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.nullcheck.NullPointerChecker soot_jimple_toolkits_annotation_nullcheck_NullPointerChecker()>
<soot.Singletons: soot.jimple.toolkits.annotation.nullcheck.NullPointerColorer soot_jimple_toolkits_annotation_nullcheck_NullPointerColorer()>
<soot.Singletons: soot.jimple.toolkits.annotation.parity.ParityTagger soot_jimple_toolkits_annotation_parity_ParityTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.profiling.ProfilingGenerator soot_jimple_toolkits_annotation_profiling_ProfilingGenerator()>
<soot.Singletons: soot.jimple.toolkits.annotation.purity.PurityAnalysis soot_jimple_toolkits_annotation_purity_PurityAnalysis()>
<soot.Singletons: soot.jimple.toolkits.annotation.qualifiers.TightestQualifiersTagger soot_jimple_toolkits_annotation_qualifiers_TightestQualifiersTagger()>
<soot.Singletons: soot.jimple.toolkits.annotation.tags.ArrayNullTagAggregator soot_jimple_toolkits_annotation_tags_ArrayNullTagAggregator()>
<soot.Singletons: soot.jimple.toolkits.base.Aggregator soot_jimple_toolkits_base_Aggregator()>
<soot.Singletons: soot.jimple.toolkits.callgraph.CHATransformer soot_jimple_toolkits_callgraph_CHATransformer()>
<soot.Singletons: soot.jimple.toolkits.callgraph.VirtualCalls soot_jimple_toolkits_callgraph_VirtualCalls()>
<soot.Singletons: soot.jimple.toolkits.graph.CriticalEdgeRemover soot_jimple_toolkits_graph_CriticalEdgeRemover()>
<soot.Singletons: soot.jimple.toolkits.invoke.StaticInliner soot_jimple_toolkits_invoke_StaticInliner()>
<soot.Singletons: soot.jimple.toolkits.invoke.StaticMethodBinder soot_jimple_toolkits_invoke_StaticMethodBinder()>
<soot.Singletons: soot.jimple.toolkits.invoke.SynchronizerManager soot_jimple_toolkits_invoke_SynchronizerManager()>
<soot.Singletons: soot.jimple.toolkits.pointer.CastCheckEliminatorDumper soot_jimple_toolkits_pointer_CastCheckEliminatorDumper()>
<soot.Singletons: soot.jimple.toolkits.pointer.DependenceTagAggregator soot_jimple_toolkits_pointer_DependenceTagAggregator()>
<soot.Singletons: soot.jimple.toolkits.pointer.DumbPointerAnalysis soot_jimple_toolkits_pointer_DumbPointerAnalysis()>
<soot.Singletons: soot.jimple.toolkits.pointer.FullObjectSet soot_jimple_toolkits_pointer_FullObjectSet()>
<soot.Singletons: soot.jimple.toolkits.pointer.ParameterAliasTagger soot_jimple_toolkits_pointer_ParameterAliasTagger()>
<soot.Singletons: soot.jimple.toolkits.pointer.SideEffectTagger soot_jimple_toolkits_pointer_SideEffectTagger()>
<soot.Singletons: soot.jimple.toolkits.pointer.representations.Environment soot_jimple_toolkits_pointer_representations_Environment()>
<soot.Singletons: soot.jimple.toolkits.pointer.representations.TypeConstants soot_jimple_toolkits_pointer_representations_TypeConstants()>
<soot.Singletons: soot.jimple.toolkits.scalar.CommonSubexpressionEliminator soot_jimple_toolkits_scalar_CommonSubexpressionEliminator()>
<soot.Singletons: soot.jimple.toolkits.scalar.ConditionalBranchFolder soot_jimple_toolkits_scalar_ConditionalBranchFolder()>
<soot.Singletons: soot.jimple.toolkits.scalar.ConstantPropagatorAndFolder soot_jimple_toolkits_scalar_ConstantPropagatorAndFolder()>
<soot.Singletons: soot.jimple.toolkits.scalar.CopyPropagator soot_jimple_toolkits_scalar_CopyPropagator()>
<soot.Singletons: soot.jimple.toolkits.scalar.DeadAssignmentEliminator soot_jimple_toolkits_scalar_DeadAssignmentEliminator()>
<soot.Singletons: soot.jimple.toolkits.scalar.LocalNameStandardizer soot_jimple_toolkits_scalar_LocalNameStandardizer()>
<soot.Singletons: soot.jimple.toolkits.scalar.NopEliminator soot_jimple_toolkits_scalar_NopEliminator()>
<soot.Singletons: soot.jimple.toolkits.scalar.UnconditionalBranchFolder soot_jimple_toolkits_scalar_UnconditionalBranchFolder()>
<soot.Singletons: soot.jimple.toolkits.scalar.UnreachableCodeEliminator soot_jimple_toolkits_scalar_UnreachableCodeEliminator()>
<soot.Singletons: soot.jimple.toolkits.scalar.pre.BusyCodeMotion soot_jimple_toolkits_scalar_pre_BusyCodeMotion()>
<soot.Singletons: soot.jimple.toolkits.scalar.pre.LazyCodeMotion soot_jimple_toolkits_scalar_pre_LazyCodeMotion()>
<soot.Singletons: soot.jimple.toolkits.thread.synchronization.LockAllocator soot_jimple_toolkits_thread_synchronization_LockAllocator()>
<soot.Singletons: soot.jimple.toolkits.typing.TypeAssigner soot_jimple_toolkits_typing_TypeAssigner()>
<soot.Singletons: soot.jimple.toolkits.typing.integer.ClassHierarchy soot_jimple_toolkits_typing_integer_ClassHierarchy()>
<soot.Singletons: soot.options.Options soot_options_Options()>
<soot.Singletons: soot.shimple.Shimple soot_shimple_Shimple()>
<soot.Singletons: soot.shimple.ShimpleTransformer soot_shimple_ShimpleTransformer()>
<soot.Singletons: soot.shimple.toolkits.scalar.SConstantPropagatorAndFolder soot_shimple_toolkits_scalar_SConstantPropagatorAndFolder()>
<soot.Singletons: soot.tagkit.InnerClassTagAggregator soot_tagkit_InnerClassTagAggregator()>
<soot.Singletons: soot.tagkit.LineNumberTagAggregator soot_tagkit_LineNumberTagAggregator()>
<soot.Singletons: soot.toolkits.exceptions.PedanticThrowAnalysis soot_toolkits_exceptions_PedanticThrowAnalysis()>
<soot.Singletons: soot.toolkits.exceptions.ThrowableSet$Manager soot_toolkits_exceptions_ThrowableSet_Manager()>
<soot.Singletons: soot.toolkits.exceptions.TrapTightener soot_toolkits_exceptions_TrapTightener()>
<soot.Singletons: soot.toolkits.exceptions.UnitThrowAnalysis soot_toolkits_exceptions_UnitThrowAnalysis()>
<soot.Singletons: soot.toolkits.graph.SlowPseudoTopologicalOrderer soot_toolkits_graph_SlowPseudoTopologicalOrderer()>
<soot.Singletons: soot.toolkits.graph.interaction.InteractionHandler soot_toolkits_graph_interaction_InteractionHandler()>
<soot.Singletons: soot.toolkits.scalar.LocalPacker soot_toolkits_scalar_LocalPacker()>
<soot.Singletons: soot.toolkits.scalar.LocalSplitter soot_toolkits_scalar_LocalSplitter()>
<soot.Singletons: soot.toolkits.scalar.UnusedLocalEliminator soot_toolkits_scalar_UnusedLocalEliminator()>
<soot.Singletons: soot.util.PhaseDumper soot_util_PhaseDumper()>
<soot.Singletons: soot.xml.XMLPrinter soot_xml_XMLPrinter()>
<soot.SootClass: soot.RefType getType()>
<soot.SootClass: soot.SootClass getOuterClass()>
<soot.SootClass: soot.SootClass getSuperclass()>
<soot.SootClass: soot.util.Chain getFields()>
<soot.SootClass: soot.util.Chain getInterfaces()>
<soot.SootField: soot.SootClass getDeclaringClass()>
<soot.SootField: soot.Type getType()>
<soot.SootMethod: java.util.List getExceptions()>
<soot.SootMethod: java.util.List getParameterTypes()>
<soot.SootMethod: soot.Body getActiveBody()>
<soot.SootMethod: soot.MethodSource getSource()>
<soot.SootMethod: soot.SootClass getDeclaringClass()>
<soot.SootMethod: soot.Type getReturnType()>
<soot.SootMethod: soot.util.NumberedString getNumberedSubSignature()>
<soot.SootResolver: soot.JastAddJ.Program getProgram()>
<soot.SourceLocator: java.util.List sourcePath()>
<soot.Type: soot.ArrayType getArrayType()>
<soot.TypeSwitch: java.lang.Object getResult()>
<soot.baf.JasminClass: java.util.Map access$11100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$1700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$30100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$30900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$3900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$4200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$6700(soot.baf.JasminClass)>
<soot.baf.PlaceholderInst: soot.Unit getSource()>
<soot.baf.internal.AbstractBranchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.AbstractInvokeInst: soot.SootMethodRef getMethodRef()>
<soot.baf.internal.AbstractOpTypeBranchInst: soot.Type getOpType()>
<soot.baf.internal.AbstractOpTypeInst: soot.Type getOpType()>
<soot.baf.internal.AbstractRefTypeInst: soot.RefType getBaseType()>
<soot.baf.internal.BDup1Inst: soot.Type getOp1Type()>
<soot.baf.internal.BFieldGetInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BFieldPutInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BIdentityInst: java.util.List getDefBoxes()>
<soot.baf.internal.BIncInst: java.util.List getDefBoxes()>
<soot.baf.internal.BIncInst: java.util.List getUseBoxes()>
<soot.baf.internal.BIncInst: soot.jimple.Constant getConstant()>
<soot.baf.internal.BInstanceCastInst: soot.Type getCastType()>
<soot.baf.internal.BInstanceOfInst: soot.Type getCheckType()>
<soot.baf.internal.BLoadInst: java.util.List getUseBoxes()>
<soot.baf.internal.BLookupSwitchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.BNewArrayInst: soot.Type getBaseType()>
<soot.baf.internal.BNewMultiArrayInst: soot.ArrayType getBaseType()>
<soot.baf.internal.BPrimitiveCastInst: soot.Type getFromType()>
<soot.baf.internal.BPushInst: soot.jimple.Constant getConstant()>
<soot.baf.internal.BStaticGetInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BStaticPutInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BStoreInst: java.util.List getDefBoxes()>
<soot.baf.internal.BTableSwitchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.BafLocal: soot.Type getType()>
<soot.baf.toolkits.base.LoadStoreOptimizer: java.util.Map access$200(soot.baf.toolkits.base.LoadStoreOptimizer)>
<soot.coffi.CFG: soot.coffi.Instruction makeCopyOf(soot.coffi.Instruction,soot.coffi.Instruction,soot.coffi.Instruction)>
<soot.coffi.FutureStmt: java.util.List getDefBoxes()>
<soot.coffi.FutureStmt: java.util.List getUnitBoxes()>
<soot.coffi.FutureStmt: java.util.List getUseBoxes()>
<soot.dava.Dava: soot.util.IterableSet get_CurrentPackageContext()>
<soot.dava.DavaBody: java.util.HashSet get_ThisLocals()>
<soot.dava.DavaBody: java.util.List get_CaughtRefs()>
<soot.dava.DavaBody: java.util.Map get_ParamMap()>
<soot.dava.DavaBody: java.util.Set get_ConsumedConditions()>
<soot.dava.DavaBody: soot.Local get_ControlLocal()>
<soot.dava.DavaBody: soot.Unit get_ConstructorUnit()>
<soot.dava.DavaBody: soot.jimple.InstanceInvokeExpr get_ConstructorExpr()>
<soot.dava.DavaBody: soot.util.IterableSet getImportList()>
<soot.dava.DavaBody: soot.util.IterableSet get_ExceptionFacts()>
<soot.dava.DavaBody: soot.util.IterableSet get_MonitorFacts()>
<soot.dava.DavaBody: soot.util.IterableSet get_SynchronizedBlockFacts()>
<soot.dava.internal.AST.ASTAggregatedCondition: soot.dava.internal.AST.ASTCondition getLeftOp()>
<soot.dava.internal.AST.ASTAggregatedCondition: soot.dava.internal.AST.ASTCondition getRightOp()>
<soot.dava.internal.AST.ASTBinaryCondition: soot.jimple.ConditionExpr getConditionExpr()>
<soot.dava.internal.AST.ASTControlFlowNode: soot.dava.internal.AST.ASTCondition get_Condition()>
<soot.dava.internal.AST.ASTForLoopNode: java.util.List getInit()>
<soot.dava.internal.AST.ASTForLoopNode: java.util.List getUpdate()>
<soot.dava.internal.AST.ASTIfElseNode: java.util.List getElseBody()>
<soot.dava.internal.AST.ASTIfElseNode: java.util.List getIfBody()>
<soot.dava.internal.AST.ASTIfNode: java.util.List getIfBody()>
<soot.dava.internal.AST.ASTLabeledNode: soot.dava.internal.SET.SETNodeLabel get_Label()>
<soot.dava.internal.AST.ASTMethodNode: soot.dava.DavaBody getDavaBody()>
<soot.dava.internal.AST.ASTMethodNode: soot.dava.internal.AST.ASTStatementSequenceNode getDeclarations()>
<soot.dava.internal.AST.ASTNode: java.util.List get_SubBodies()>
<soot.dava.internal.AST.ASTStatementSequenceNode: java.util.List getStatements()>
<soot.dava.internal.AST.ASTSwitchNode: java.util.List getIndexList()>
<soot.dava.internal.AST.ASTSwitchNode: java.util.Map getIndex2BodyList()>
<soot.dava.internal.AST.ASTSwitchNode: soot.ValueBox getKeyBox()>
<soot.dava.internal.AST.ASTTryNode: java.util.List get_CatchList()>
<soot.dava.internal.AST.ASTTryNode: java.util.List get_TryBody()>
<soot.dava.internal.AST.ASTTryNode: java.util.Map get_ExceptionMap()>
<soot.dava.internal.AST.ASTTryNode: java.util.Map get_ParamMap()>
<soot.dava.internal.AST.ASTTryNode: soot.dava.internal.AST.ASTTryNode$container get_TryBodyContainer()>
<soot.dava.internal.AST.ASTUnaryCondition: soot.Value getValue()>
<soot.dava.internal.SET.SETBasicBlock: soot.dava.internal.SET.SETNode get_EntryNode()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Body()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Predecessors()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Successors()>
<soot.dava.internal.SET.SETControlFlowNode: soot.dava.internal.asg.AugmentedStmt get_CharacterizingStmt()>
<soot.dava.internal.SET.SETDoWhileNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETNode: java.util.List get_SubBodies()>
<soot.dava.internal.SET.SETNode: java.util.Map get_Body2ChildChain()>
<soot.dava.internal.SET.SETNode: soot.dava.internal.SET.SETNode get_Parent()>
<soot.dava.internal.SET.SETNode: soot.dava.internal.SET.SETNodeLabel get_Label()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Body()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Predecessors()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Successors()>
<soot.dava.internal.SET.SETTryNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.asg.AugmentedStmt: soot.jimple.Stmt get_Stmt()>
<soot.dava.internal.asg.AugmentedStmt: soot.util.IterableSet get_Dominators()>
<soot.dava.internal.asg.AugmentedStmt: soot.util.IterableSet get_Reachers()>
<soot.dava.internal.javaRep.DAbruptStmt: soot.dava.internal.SET.SETNodeLabel getLabel()>
<soot.dava.internal.javaRep.DArrayInitExpr: soot.Type getType()>
<soot.dava.internal.javaRep.DShortcutIf: soot.Type getType()>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: java.util.List getDeclarations()>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: soot.Type getType()>
<soot.dava.toolkits.base.AST.TryContentsFinder: soot.util.IterableSet remove_CurExceptionSet()>
<soot.dava.toolkits.base.AST.interProcedural.ConstantFieldValueFinder: java.util.HashMap getClassNameFieldNameToSootFieldMapping()>
<soot.dava.toolkits.base.AST.interProcedural.ConstantFieldValueFinder: java.util.HashMap getFieldsWithConstantValues()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: java.lang.Object getValue()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable getVariable()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: soot.Local getLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: soot.SootField getSootField()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getBreakList()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getContinueList()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getImplicitBreaks()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getImplicitContinues()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: soot.Local getLeftLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: soot.Local getRightLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processAbruptStatements(soot.jimple.Stmt,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: java.util.HashMap getDUHashMap()>
<soot.dava.toolkits.base.AST.traversals.AllDefinitionsFinder: java.util.List getAllDefs()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.SootClass get_Exception()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.SootClass get_Exception(soot.util.IterableSet)>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_Body()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_CatchBody()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_TryBody()>
<soot.dava.toolkits.base.finders.SwitchNode: java.util.List get_Preds()>
<soot.dava.toolkits.base.finders.SwitchNode: java.util.List get_Succs()>
<soot.dava.toolkits.base.finders.SwitchNode: soot.dava.internal.asg.AugmentedStmt get_AugStmt()>
<soot.dava.toolkits.base.finders.SwitchNode: soot.util.IterableSet get_Body()>
<soot.dava.toolkits.base.finders.SwitchNodeGraph: java.util.List getHeads()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.util.ArrayList get_Children()>
<soot.dava.toolkits.base.misc.PackageNamer: java.util.ArrayList access$100(soot.dava.toolkits.base.misc.PackageNamer)>
<soot.dava.toolkits.base.misc.PackageNamer: java.util.HashSet access$000(soot.dava.toolkits.base.misc.PackageNamer)>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getCastStrings()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getFieldName()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getMethodName()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getObjectClassName()>
<soot.dava.toolkits.base.renamer.infoGatheringAnalysis: soot.dava.toolkits.base.renamer.heuristicSet getHeuristicSet()>
<soot.grimp.internal.GNewInvokeExpr: soot.RefType getBaseType()>
<soot.grimp.internal.GNewInvokeExpr: soot.Type getType()>
<soot.javaToJimple.AbstractJimpleBodyBuilder: soot.javaToJimple.AbstractJimpleBodyBuilder base()>
<soot.javaToJimple.AnonClassInitMethodSource: polyglot.types.ClassType anonType()>
<soot.javaToJimple.AnonClassInitMethodSource: polyglot.types.ClassType polyglotType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type outerClassType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type superOuterType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type thisOuterType()>
<soot.javaToJimple.AnonInitBodyBuilder: soot.jimple.JimpleBody createBody(soot.SootMethod)>
<soot.javaToJimple.AnonLocalClassInfo: java.util.ArrayList finalLocalsAvail()>
<soot.javaToJimple.AnonLocalClassInfo: java.util.ArrayList finalLocalsUsed()>
<soot.javaToJimple.ClassDeclFinder: java.util.ArrayList declsFound()>
<soot.javaToJimple.ClassLiteralChecker: java.util.ArrayList getList()>
<soot.javaToJimple.InitialResolver: java.util.ArrayList getHasOuterRefInInit()>
<soot.javaToJimple.InitialResolver: java.util.ArrayList getInterfacesList()>
<soot.javaToJimple.InitialResolver: java.util.HashMap classToSourceMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap finalLocalInfo()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getAnonTypeMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getInnerClassInfoMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getLocalTypeMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getPrivateFieldGetAccessMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getPrivateFieldSetAccessMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap getPrivateMethodGetAccessMap()>
<soot.javaToJimple.InitialResolver: java.util.HashMap specialAnonMap()>
<soot.javaToJimple.InitialResolver: polyglot.ast.Node getAst()>
<soot.javaToJimple.InitialResolver: soot.FastHierarchy hierarchy()>
<soot.javaToJimple.InitialResolver: soot.javaToJimple.AbstractJBBFactory getJBBFactory()>
<soot.javaToJimple.InitialResolver: soot.javaToJimple.BiMap getAnonClassMap()>
<soot.javaToJimple.InitialResolver: soot.javaToJimple.BiMap getLocalClassMap()>
<soot.javaToJimple.InnerClassInfo: soot.SootClass getOuterClass()>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList anonBodyList()>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList localClassDeclList()>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList memberList()>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getSpecialLocal(polyglot.ast.Special)>
<soot.javaToJimple.JimpleBodyBuilder: soot.jimple.JimpleBody createJimpleBody(polyglot.ast.Block,java.util.List,soot.SootMethod)>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getLocalDecls()>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getLocals()>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getNews()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList ccallList()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList finalLocals()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList inners()>
<soot.javaToJimple.MethodFinalsChecker: java.util.HashMap typeToLocalsUsed()>
<soot.javaToJimple.NestedClassListBuilder: java.util.ArrayList getClassDeclsList()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getFieldInits()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getFinalsList()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getInitializerBlocks()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getStaticFieldInits()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getStaticInitializerBlocks()>
<soot.javaToJimple.TypeListBuilder: java.util.HashSet getList()>
<soot.javaToJimple.jj.ExtensionInfo: java.util.HashMap sourceJobMap()>
<soot.jimple.AbstractJimpleValueSwitch: java.lang.Object getResult()>
<soot.jimple.JasminClass: java.util.List access$2200(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.List access$2400(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.List access$2600(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.List access$2800(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$000(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1000(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1200(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1400(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1600(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1700(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$1900(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$300(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$500(soot.jimple.JasminClass)>
<soot.jimple.JasminClass: java.util.Map access$900(soot.jimple.JasminClass)>
<soot.jimple.JimpleToBafContext: soot.Unit getCurrentUnit()>
<soot.jimple.ParameterRef: soot.Type getType()>
<soot.jimple.StaticFieldRef: soot.SootFieldRef getFieldRef()>
<soot.jimple.ThisRef: soot.Type getType()>
<soot.jimple.internal.AbstractBinopExpr: soot.ValueBox getOp1Box()>
<soot.jimple.internal.AbstractBinopExpr: soot.ValueBox getOp2Box()>
<soot.jimple.internal.AbstractCastExpr: soot.Type getCastType()>
<soot.jimple.internal.AbstractCastExpr: soot.Type getType()>
<soot.jimple.internal.AbstractCastExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.AbstractDefinitionStmt: java.util.List getDefBoxes()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.ValueBox getLeftOpBox()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.ValueBox getRightOpBox()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.SootFieldRef getFieldRef()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.ValueBox getBaseBox()>
<soot.jimple.internal.AbstractInstanceInvokeExpr: soot.ValueBox getBaseBox()>
<soot.jimple.internal.AbstractInstanceOfExpr: soot.Type getCheckType()>
<soot.jimple.internal.AbstractInstanceOfExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.AbstractInvokeExpr: soot.SootMethodRef getMethodRef()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.Type getBaseType()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.ValueBox getSizeBox()>
<soot.jimple.internal.AbstractNewExpr: soot.RefType getBaseType()>
<soot.jimple.internal.AbstractNewExpr: soot.Type getType()>
<soot.jimple.internal.AbstractNewMultiArrayExpr: soot.ArrayType getBaseType()>
<soot.jimple.internal.AbstractNewMultiArrayExpr: soot.Type getType()>
<soot.jimple.internal.AbstractUnopExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.JArrayRef: soot.ValueBox getBaseBox()>
<soot.jimple.internal.JArrayRef: soot.ValueBox getIndexBox()>
<soot.jimple.internal.JAssignStmt: soot.ValueBox getInvokeExprBox()>
<soot.jimple.internal.JEnterMonitorStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JExitMonitorStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JGotoStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JIfStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JIfStmt: soot.UnitBox getTargetBox()>
<soot.jimple.internal.JIfStmt: soot.ValueBox getConditionBox()>
<soot.jimple.internal.JInvokeStmt: soot.ValueBox getInvokeExprBox()>
<soot.jimple.internal.JLookupSwitchStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JLookupSwitchStmt: soot.UnitBox getDefaultTargetBox()>
<soot.jimple.internal.JLookupSwitchStmt: soot.ValueBox getKeyBox()>
<soot.jimple.internal.JReturnStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JTableSwitchStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JTableSwitchStmt: soot.UnitBox getDefaultTargetBox()>
<soot.jimple.internal.JTableSwitchStmt: soot.ValueBox getKeyBox()>
<soot.jimple.internal.JThrowStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JimpleLocal: soot.Type getType()>
<soot.jimple.paddle.PaddleHook: soot.jimple.paddle.IPaddleTransformer paddleTransformer()>
<soot.jimple.parser.CstPoolExtractor: java.util.Set access$000(soot.jimple.parser.CstPoolExtractor)>
<soot.jimple.parser.CstPoolExtractor: java.util.Set getCstPool()>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token next()>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token peek()>
<soot.jimple.parser.node.AAbstractModifier: soot.jimple.parser.node.TAbstract getAbstract()>
<soot.jimple.parser.node.AAndBinop: soot.jimple.parser.node.TAnd getAnd()>
<soot.jimple.parser.node.AAnnotationModifier: soot.jimple.parser.node.TAnnotation getAnnotation()>
<soot.jimple.parser.node.AArrayBrackets: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AArrayBrackets: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.PFixedArrayDescriptor getFixedArrayDescriptor()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TNewarray getNewarray()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AArrayRef: soot.jimple.parser.node.PFixedArrayDescriptor getFixedArrayDescriptor()>
<soot.jimple.parser.node.AArrayRef: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AArrayReference: soot.jimple.parser.node.PArrayRef getArrayRef()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.PExpression getExpression()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.PVariable getVariable()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.TEquals getEquals()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ABaseNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.ABaseNonvoidType: soot.jimple.parser.node.PBaseTypeNoName getBaseTypeNoName()>
<soot.jimple.parser.node.ABinopBoolExpr: soot.jimple.parser.node.PBinopExpr getBinopExpr()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PBinop getBinop()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PImmediate getLeft()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PImmediate getRight()>
<soot.jimple.parser.node.ABinopExpression: soot.jimple.parser.node.PBinopExpr getBinopExpr()>
<soot.jimple.parser.node.ABooleanBaseType: soot.jimple.parser.node.TBoolean getBoolean()>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: soot.jimple.parser.node.TBoolean getBoolean()>
<soot.jimple.parser.node.ABreakpointStatement: soot.jimple.parser.node.TBreakpoint getBreakpoint()>
<soot.jimple.parser.node.ABreakpointStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AByteBaseType: soot.jimple.parser.node.TByte getByte()>
<soot.jimple.parser.node.AByteBaseTypeNoName: soot.jimple.parser.node.TByte getByte()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.PCaseLabel getCaseLabel()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.TColon getColon()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PClassName getName()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getFromLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getToLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getWithLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TCatch getCatch()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TFrom getFrom()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TTo getTo()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TWith getWith()>
<soot.jimple.parser.node.ACharBaseType: soot.jimple.parser.node.TChar getChar()>
<soot.jimple.parser.node.ACharBaseTypeNoName: soot.jimple.parser.node.TChar getChar()>
<soot.jimple.parser.node.AClassFileType: soot.jimple.parser.node.TClass getTheclass()>
<soot.jimple.parser.node.AClassNameBaseType: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AClassNameSingleClassNameList: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClzzConstant: soot.jimple.parser.node.TClass getId()>
<soot.jimple.parser.node.AClzzConstant: soot.jimple.parser.node.TStringConstant getStringConstant()>
<soot.jimple.parser.node.ACmpBinop: soot.jimple.parser.node.TCmp getCmp()>
<soot.jimple.parser.node.ACmpeqBinop: soot.jimple.parser.node.TCmpeq getCmpeq()>
<soot.jimple.parser.node.ACmpgBinop: soot.jimple.parser.node.TCmpg getCmpg()>
<soot.jimple.parser.node.ACmpgeBinop: soot.jimple.parser.node.TCmpge getCmpge()>
<soot.jimple.parser.node.ACmpgtBinop: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.ACmplBinop: soot.jimple.parser.node.TCmpl getCmpl()>
<soot.jimple.parser.node.ACmpleBinop: soot.jimple.parser.node.TCmple getCmple()>
<soot.jimple.parser.node.ACmpltBinop: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.ACmpneBinop: soot.jimple.parser.node.TCmpne getCmpne()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TCase getCase()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TIntegerConstant getIntegerConstant()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AConstantImmediate: soot.jimple.parser.node.PConstant getConstant()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.PJimpleType getJimpleType()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.PLocalNameList getLocalNameList()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ADefaultCaseLabel: soot.jimple.parser.node.TDefault getDefault()>
<soot.jimple.parser.node.ADivBinop: soot.jimple.parser.node.TDiv getDiv()>
<soot.jimple.parser.node.ADoubleBaseType: soot.jimple.parser.node.TDouble getDouble()>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: soot.jimple.parser.node.TDouble getDouble()>
<soot.jimple.parser.node.AEmptyMethodBody: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.TEntermonitor getEntermonitor()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AEnumModifier: soot.jimple.parser.node.TEnum getEnum()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.TExitmonitor getExitmonitor()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AExtendsClause: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AExtendsClause: soot.jimple.parser.node.TExtends getExtends()>
<soot.jimple.parser.node.AFieldMember: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AFieldReference: soot.jimple.parser.node.PFieldRef getFieldRef()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PName getFieldName()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TColon getFirst()>
<soot.jimple.parser.node.AFile: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PExtendsClause getExtendsClause()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PFileBody getFileBody()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PFileType getFileType()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PImplementsClause getImplementsClause()>
<soot.jimple.parser.node.AFileBody: java.util.LinkedList getMember()>
<soot.jimple.parser.node.AFileBody: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.AFileBody: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.AFinalModifier: soot.jimple.parser.node.TFinal getFinal()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AFloatBaseType: soot.jimple.parser.node.TFloat getFloat()>
<soot.jimple.parser.node.AFloatBaseTypeNoName: soot.jimple.parser.node.TFloat getFloat()>
<soot.jimple.parser.node.AFloatConstant: soot.jimple.parser.node.TFloatConstant getFloatConstant()>
<soot.jimple.parser.node.AFloatConstant: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AFullIdentClassName: soot.jimple.parser.node.TFullIdentifier getFullIdentifier()>
<soot.jimple.parser.node.AFullIdentNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AFullIdentNonvoidType: soot.jimple.parser.node.TFullIdentifier getFullIdentifier()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getCatchClause()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getDeclaration()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getStatement()>
<soot.jimple.parser.node.AFullMethodBody: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.AFullMethodBody: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.AGotoStatement: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.PLabelName getLabelName()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.TGoto getGoto()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AIdentClassName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AIdentNonvoidType: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TAtIdentifier getAtIdentifier()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TColonEquals getColonEquals()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TAtIdentifier getAtIdentifier()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TColonEquals getColonEquals()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.PBoolExpr getBoolExpr()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.TIf getIf()>
<soot.jimple.parser.node.AImmediateExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AImplementsClause: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AImplementsClause: soot.jimple.parser.node.TImplements getImplements()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.TInstanceof getInstanceof()>
<soot.jimple.parser.node.AIntBaseType: soot.jimple.parser.node.TInt getInt()>
<soot.jimple.parser.node.AIntBaseTypeNoName: soot.jimple.parser.node.TInt getInt()>
<soot.jimple.parser.node.AIntegerConstant: soot.jimple.parser.node.TIntegerConstant getIntegerConstant()>
<soot.jimple.parser.node.AIntegerConstant: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AInterfaceFileType: soot.jimple.parser.node.TInterface getInterface()>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: soot.jimple.parser.node.TInterfaceinvoke getInterfaceinvoke()>
<soot.jimple.parser.node.AInvokeExpression: soot.jimple.parser.node.PInvokeExpr getInvokeExpr()>
<soot.jimple.parser.node.AInvokeStatement: soot.jimple.parser.node.PInvokeExpr getInvokeExpr()>
<soot.jimple.parser.node.AInvokeStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ALabelName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.ALabelStatement: soot.jimple.parser.node.PLabelName getLabelName()>
<soot.jimple.parser.node.ALabelStatement: soot.jimple.parser.node.TColon getColon()>
<soot.jimple.parser.node.ALengthofUnop: soot.jimple.parser.node.TLengthof getLengthof()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.PFieldSignature getFieldSignature()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.TDot getDot()>
<soot.jimple.parser.node.ALocalImmediate: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALocalName: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.ALocalVariable: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALongBaseType: soot.jimple.parser.node.TLong getLong()>
<soot.jimple.parser.node.ALongBaseTypeNoName: soot.jimple.parser.node.TLong getLong()>
<soot.jimple.parser.node.ALookupswitchStatement: java.util.LinkedList getCaseStmt()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLookupswitch getLookupswitch()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AMethodMember: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PMethodBody getMethodBody()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PThrowsClause getThrowsClause()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PName getMethodName()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TColon getFirst()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMinusBinop: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AModBinop: soot.jimple.parser.node.TMod getMod()>
<soot.jimple.parser.node.AMultBinop: soot.jimple.parser.node.TMult getMult()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.PLocalNameList getLocalNameList()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AMultiNewExpr: java.util.LinkedList getArrayDescriptor()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.PBaseType getBaseType()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TNewmultiarray getNewmultiarray()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.PParameter getParameter()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.ANativeModifier: soot.jimple.parser.node.TNative getNative()>
<soot.jimple.parser.node.ANegUnop: soot.jimple.parser.node.TNeg getNeg()>
<soot.jimple.parser.node.ANewExpression: soot.jimple.parser.node.PNewExpr getNewExpr()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PMethodSignature getMethodSignature()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PNonstaticInvoke getNonstaticInvoke()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TDot getDot()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ANonvoidJimpleType: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ANopStatement: soot.jimple.parser.node.TNop getNop()>
<soot.jimple.parser.node.ANopStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ANovoidType: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ANullBaseType: soot.jimple.parser.node.TNullType getNullType()>
<soot.jimple.parser.node.ANullBaseTypeNoName: soot.jimple.parser.node.TNullType getNullType()>
<soot.jimple.parser.node.ANullConstant: soot.jimple.parser.node.TNull getNull()>
<soot.jimple.parser.node.AOrBinop: soot.jimple.parser.node.TOr getOr()>
<soot.jimple.parser.node.AParameter: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.APlusBinop: soot.jimple.parser.node.TPlus getPlus()>
<soot.jimple.parser.node.APrivateModifier: soot.jimple.parser.node.TPrivate getPrivate()>
<soot.jimple.parser.node.AProtectedModifier: soot.jimple.parser.node.TProtected getProtected()>
<soot.jimple.parser.node.APublicModifier: soot.jimple.parser.node.TPublic getPublic()>
<soot.jimple.parser.node.AQuotedClassName: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AQuotedName: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AQuotedNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AQuotedNonvoidType: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AReferenceExpression: soot.jimple.parser.node.PReference getReference()>
<soot.jimple.parser.node.AReferenceVariable: soot.jimple.parser.node.PReference getReference()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.TRet getRet()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.TReturn getReturn()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AShlBinop: soot.jimple.parser.node.TShl getShl()>
<soot.jimple.parser.node.AShortBaseType: soot.jimple.parser.node.TShort getShort()>
<soot.jimple.parser.node.AShortBaseTypeNoName: soot.jimple.parser.node.TShort getShort()>
<soot.jimple.parser.node.AShrBinop: soot.jimple.parser.node.TShr getShr()>
<soot.jimple.parser.node.ASigFieldRef: soot.jimple.parser.node.PFieldSignature getFieldSignature()>
<soot.jimple.parser.node.ASimpleNewExpr: soot.jimple.parser.node.PBaseType getBaseType()>
<soot.jimple.parser.node.ASimpleNewExpr: soot.jimple.parser.node.TNew getNew()>
<soot.jimple.parser.node.ASingleArgList: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ASingleLocalNameList: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ASingleParameterList: soot.jimple.parser.node.PParameter getParameter()>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: soot.jimple.parser.node.TSpecialinvoke getSpecialinvoke()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.PMethodSignature getMethodSignature()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TStaticinvoke getStaticinvoke()>
<soot.jimple.parser.node.AStaticModifier: soot.jimple.parser.node.TStatic getStatic()>
<soot.jimple.parser.node.AStrictfpModifier: soot.jimple.parser.node.TStrictfp getStrictfp()>
<soot.jimple.parser.node.AStringConstant: soot.jimple.parser.node.TStringConstant getStringConstant()>
<soot.jimple.parser.node.ASynchronizedModifier: soot.jimple.parser.node.TSynchronized getSynchronized()>
<soot.jimple.parser.node.ATableswitchStatement: java.util.LinkedList getCaseStmt()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TTableswitch getTableswitch()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.TThrow getThrow()>
<soot.jimple.parser.node.AThrowsClause: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AThrowsClause: soot.jimple.parser.node.TThrows getThrows()>
<soot.jimple.parser.node.ATransientModifier: soot.jimple.parser.node.TTransient getTransient()>
<soot.jimple.parser.node.AUnknownJimpleType: soot.jimple.parser.node.TUnknown getUnknown()>
<soot.jimple.parser.node.AUnopBoolExpr: soot.jimple.parser.node.PUnopExpr getUnopExpr()>
<soot.jimple.parser.node.AUnopExpr: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AUnopExpr: soot.jimple.parser.node.PUnop getUnop()>
<soot.jimple.parser.node.AUnopExpression: soot.jimple.parser.node.PUnopExpr getUnopExpr()>
<soot.jimple.parser.node.AUshrBinop: soot.jimple.parser.node.TUshr getUshr()>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: soot.jimple.parser.node.TVirtualinvoke getVirtualinvoke()>
<soot.jimple.parser.node.AVoidType: soot.jimple.parser.node.TVoid getVoid()>
<soot.jimple.parser.node.AVolatileModifier: soot.jimple.parser.node.TVolatile getVolatile()>
<soot.jimple.parser.node.AXorBinop: soot.jimple.parser.node.TXor getXor()>
<soot.jimple.parser.node.Node: soot.jimple.parser.node.Node parent()>
<soot.jimple.parser.node.Start: soot.jimple.parser.node.EOF getEOF()>
<soot.jimple.parser.node.Start: soot.jimple.parser.node.PFile getPFile()>
<soot.jimple.parser.node.X1PArrayBrackets: soot.jimple.parser.node.PArrayBrackets getPArrayBrackets()>
<soot.jimple.parser.node.X1PArrayBrackets: soot.jimple.parser.node.XPArrayBrackets getXPArrayBrackets()>
<soot.jimple.parser.node.X1PArrayDescriptor: soot.jimple.parser.node.PArrayDescriptor getPArrayDescriptor()>
<soot.jimple.parser.node.X1PArrayDescriptor: soot.jimple.parser.node.XPArrayDescriptor getXPArrayDescriptor()>
<soot.jimple.parser.node.X1PCaseStmt: soot.jimple.parser.node.PCaseStmt getPCaseStmt()>
<soot.jimple.parser.node.X1PCaseStmt: soot.jimple.parser.node.XPCaseStmt getXPCaseStmt()>
<soot.jimple.parser.node.X1PCatchClause: soot.jimple.parser.node.PCatchClause getPCatchClause()>
<soot.jimple.parser.node.X1PCatchClause: soot.jimple.parser.node.XPCatchClause getXPCatchClause()>
<soot.jimple.parser.node.X1PDeclaration: soot.jimple.parser.node.PDeclaration getPDeclaration()>
<soot.jimple.parser.node.X1PDeclaration: soot.jimple.parser.node.XPDeclaration getXPDeclaration()>
<soot.jimple.parser.node.X1PMember: soot.jimple.parser.node.PMember getPMember()>
<soot.jimple.parser.node.X1PMember: soot.jimple.parser.node.XPMember getXPMember()>
<soot.jimple.parser.node.X1PModifier: soot.jimple.parser.node.PModifier getPModifier()>
<soot.jimple.parser.node.X1PModifier: soot.jimple.parser.node.XPModifier getXPModifier()>
<soot.jimple.parser.node.X1PStatement: soot.jimple.parser.node.PStatement getPStatement()>
<soot.jimple.parser.node.X1PStatement: soot.jimple.parser.node.XPStatement getXPStatement()>
<soot.jimple.parser.node.X2PArrayBrackets: soot.jimple.parser.node.PArrayBrackets getPArrayBrackets()>
<soot.jimple.parser.node.X2PArrayDescriptor: soot.jimple.parser.node.PArrayDescriptor getPArrayDescriptor()>
<soot.jimple.parser.node.X2PCaseStmt: soot.jimple.parser.node.PCaseStmt getPCaseStmt()>
<soot.jimple.parser.node.X2PCatchClause: soot.jimple.parser.node.PCatchClause getPCatchClause()>
<soot.jimple.parser.node.X2PDeclaration: soot.jimple.parser.node.PDeclaration getPDeclaration()>
<soot.jimple.parser.node.X2PMember: soot.jimple.parser.node.PMember getPMember()>
<soot.jimple.parser.node.X2PModifier: soot.jimple.parser.node.PModifier getPModifier()>
<soot.jimple.parser.node.X2PStatement: soot.jimple.parser.node.PStatement getPStatement()>
<soot.jimple.spark.builder.ContextInsensitiveBuilder: soot.jimple.spark.pag.PAG setup(soot.options.SparkOptions)>
<soot.jimple.spark.internal.TypeManager: soot.FastHierarchy getFastHierarchy()>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.pag.PAG getPAG()>
<soot.jimple.spark.ondemand.WrappedPointsToSet: soot.jimple.spark.sets.PointsToSetInternal getWrapped()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: java.lang.Integer getCallSite()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: soot.jimple.spark.pag.VarNode getDst()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: soot.jimple.spark.pag.VarNode getSrc()>
<soot.jimple.spark.pag.ContextVarNode: soot.Context context()>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.SparkField getField()>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.VarNode getBase()>
<soot.jimple.spark.pag.LocalVarNode: soot.SootMethod getMethod()>
<soot.jimple.spark.pag.MethodPAG: soot.SootMethod getMethod()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.builder.MethodNodeFactory nodeFactory()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.PAG pag()>
<soot.jimple.spark.pag.Node: soot.Type getType()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.pag.Node getReplacement()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.sets.PointsToSetInternal getP2Set()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.sets.PointsToSetInternal makeP2Set()>
<soot.jimple.spark.pag.PAG: java.util.List getDereferences()>
<soot.jimple.spark.pag.PAG: java.util.Map getNodeTags()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.builder.GlobalNodeFactory nodeFactory()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.internal.TypeManager getTypeManager()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.sets.P2SetFactory getSetFactory()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.solver.OnFlyCallGraph getOnFlyCallGraph()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.solver.OnFlyCallGraph ofcg()>
<soot.jimple.spark.pag.PAG: soot.options.SparkOptions getOpts()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getAllocDotFieldNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getAllocNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getFieldRefNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getVarNodeNumberer()>
<soot.jimple.spark.pag.VarNode: java.lang.Object getVariable()>
<soot.jimple.spark.sets.DoublePointsToSet: soot.jimple.spark.sets.PointsToSetInternal getNewSet()>
<soot.jimple.spark.sets.DoublePointsToSet: soot.jimple.spark.sets.PointsToSetInternal getOldSet()>
<soot.jimple.spark.sets.PointsToSetInternal: soot.Type getType()>
<soot.jimple.spark.sets.SharedHybridSet: soot.jimple.spark.pag.PAG access$000(soot.jimple.spark.sets.SharedHybridSet)>
<soot.jimple.spark.sets.SharedListSet$ListNode: soot.jimple.spark.pag.Node access$100(soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet$ListNode: soot.jimple.spark.sets.SharedListSet$ListNode access$000(soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.solver.OnFlyCallGraph: soot.jimple.toolkits.callgraph.CallGraph callGraph()>
<soot.jimple.spark.solver.OnFlyCallGraph: soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder access$000(soot.jimple.spark.solver.OnFlyCallGraph)>
<soot.jimple.spark.solver.OnFlyCallGraph: soot.jimple.toolkits.callgraph.ReachableMethods reachableMethods()>
<soot.jimple.spark.solver.PropCycle: soot.jimple.spark.pag.PAG access$000(soot.jimple.spark.solver.PropCycle)>
<soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol: java.lang.Object getVar()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getFieldToFieldRef()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getLocalToExpr()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getLocalToFieldRef()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashSet getMultiArrayLocals()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: soot.Local getLocal()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: java.lang.Object getStartUnit()>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: java.lang.Object getTargetUnit()>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: soot.Local getLocal()>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.MethodParameter: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.MethodReturn: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: java.util.HashSet getVertexes()>
<soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher: soot.SootMethod getNextMethod()>
<soot.jimple.toolkits.annotation.logic.Loop: java.util.List getLoopStatements()>
<soot.jimple.toolkits.annotation.logic.Loop: soot.jimple.Stmt getHead()>
<soot.jimple.toolkits.annotation.purity.PurityEdge: soot.jimple.toolkits.annotation.purity.PurityNode getSource()>
<soot.jimple.toolkits.annotation.purity.PurityEdge: soot.jimple.toolkits.annotation.purity.PurityNode getTarget()>
<soot.jimple.toolkits.callgraph.CallGraph$CallersOfMethodIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfMethodIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfUnitIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: soot.jimple.toolkits.callgraph.CallGraph getCallGraph()>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: soot.jimple.toolkits.callgraph.ReachableMethods reachables()>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: soot.jimple.toolkits.callgraph.CallGraph callGraph()>
<soot.jimple.toolkits.callgraph.Edge: soot.Kind kind()>
<soot.jimple.toolkits.callgraph.Edge: soot.MethodOrMethodContext getSrc()>
<soot.jimple.toolkits.callgraph.Edge: soot.MethodOrMethodContext getTgt()>
<soot.jimple.toolkits.callgraph.Edge: soot.Unit srcUnit()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.Stmt srcStmt()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextBySrc()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextByTgt()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextByUnit()>
<soot.jimple.toolkits.callgraph.Filter: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: soot.util.LargeNumberedMap methodToReceivers()>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: soot.util.LargeNumberedMap methodToStringConstants()>
<soot.jimple.toolkits.callgraph.TopologicalOrderer: java.util.List order()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.Kind kind()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.SootMethod container()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.jimple.InstanceInvokeExpr iie()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.jimple.Stmt stmt()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.util.NumberedString subSig()>
<soot.jimple.toolkits.graph.LoopConditionUnroller: java.util.Map getTraps()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getInnerSharedFields()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: java.lang.Object getInfo()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: soot.Local getRealLocal()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: soot.Value getThisLocal()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodAbbreviatedInfoFlowGraph()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodInfoFlowSummary()>
<soot.jimple.toolkits.pointer.FullObjectSet: java.util.Set possibleTypes()>
<soot.jimple.toolkits.pointer.MethodRWSet: java.util.Set getGlobals()>
<soot.jimple.toolkits.pointer.StmtRWSet: soot.PointsToSet getBaseForField(java.lang.Object)>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getClassLoaderObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getClassObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getConstructorObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getFieldObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getFileSystemObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getLeastArrayObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getLeastObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getMethodObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getPrivilegedActionExceptionObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getProcessObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getStringObject()>
<soot.jimple.toolkits.pointer.representations.Environment: soot.jimple.toolkits.pointer.representations.ConstantObject getThreadObject()>
<soot.jimple.toolkits.pointer.representations.GeneralConstObject: soot.Type getType()>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: java.util.List getRunMethods()>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: soot.SootMethod getStartStmtMethod()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToAllocNodes()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToJoin()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToRunMethods()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Set getJoinStatements()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Set getStartStatements()>
<soot.jimple.toolkits.thread.mhp.StartJoinFinder: java.util.Map getStartToAllocNodes()>
<soot.jimple.toolkits.thread.mhp.StartJoinFinder: java.util.Map getStartToContainingMethod()>
<soot.jimple.toolkits.thread.mhp.StartJoinFinder: java.util.Map getStartToJoin()>
<soot.jimple.toolkits.thread.mhp.StartJoinFinder: java.util.Map getStartToRunMethods()>
<soot.jimple.toolkits.thread.mhp.findobject.AllocNodesFinder: java.util.Set getMultiCalledMethods()>
<soot.jimple.toolkits.thread.mhp.findobject.AllocNodesFinder: java.util.Set getMultiRunAllocNodes()>
<soot.jimple.toolkits.thread.mhp.findobject.MultiCalledMethods: java.util.Set getMultiCalledMethods()>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: java.util.Set getClinitMethods()>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionInterferenceGraph: java.util.List groups()>
<soot.jimple.toolkits.thread.synchronization.NewStaticLock: soot.SootClass getLockClass()>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: soot.jimple.toolkits.typing.TypeNode typeNode(int,soot.Type,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.ClassHierarchy$ToInt: soot.Type toInt(soot.Type)>
<soot.jimple.toolkits.typing.TypeNode: java.util.List parents()>
<soot.jimple.toolkits.typing.TypeNode: soot.Type type()>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode array()>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode element()>
<soot.jimple.toolkits.typing.TypeResolver: soot.jimple.toolkits.typing.ClassHierarchy hierarchy()>
<soot.jimple.toolkits.typing.TypeVariable: java.util.List children()>
<soot.jimple.toolkits.typing.TypeVariable: java.util.List parents()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeNode approx()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeNode type()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable ecr()>
<soot.jimple.toolkits.typing.fast.SingletonList: java.lang.Object get(int)>
<soot.jimple.toolkits.typing.integer.TypeNode: soot.Type type()>
<soot.jimple.toolkits.typing.integer.TypeVariable: java.util.List children()>
<soot.jimple.toolkits.typing.integer.TypeVariable: java.util.List parents()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode approx()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode inv_approx()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode type()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeVariable ecr()>
<soot.options.Options: java.util.List dump_body()>
<soot.options.Options: java.util.List dump_cfg()>
<soot.options.Options: java.util.List dynamic_class()>
<soot.options.Options: java.util.List dynamic_dir()>
<soot.options.Options: java.util.List dynamic_package()>
<soot.options.Options: java.util.List exclude()>
<soot.options.Options: java.util.List include()>
<soot.options.Options: java.util.List phase_help()>
<soot.options.Options: java.util.List process_dir()>
<soot.options.OptionsBase: java.util.LinkedList classes()>
<soot.shimple.DefaultShimpleFactory: soot.Body getBody()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.BlockGraph getBlockGraph()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominanceFrontier getDominanceFrontier()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominanceFrontier getReverseDominanceFrontier()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominatorTree getDominatorTree()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominatorTree getReverseDominatorTree()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominatorsFinder getDominatorsFinder()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.DominatorsFinder getReverseDominatorsFinder()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.ReversibleGraph getReverseBlockGraph()>
<soot.shimple.DefaultShimpleFactory: soot.toolkits.graph.UnitGraph getUnitGraph()>
<soot.shimple.ShimpleBody: soot.options.ShimpleOptions getOptions()>
<soot.shimple.internal.SPhiExpr: java.util.List getUnitBoxes()>
<soot.shimple.internal.SPhiExpr: soot.Type getType()>
<soot.shimple.internal.SPiExpr: java.lang.Object getTargetKey()>
<soot.shimple.internal.SPiExpr: soot.toolkits.scalar.ValueUnitPair getArgBox()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.List getDeadStmts()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.Map getResults()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.Map getStmtsToReplace()>
<soot.tagkit.AbstractHost: java.util.List getTags()>
<soot.tagkit.AnnotationAnnotationElem: soot.tagkit.AnnotationTag getValue()>
<soot.tagkit.AnnotationDefaultTag: soot.tagkit.AnnotationElem getDefaultVal()>
<soot.tagkit.CodeAttribute: byte[] getValue()>
<soot.tagkit.ConstantValueTag: byte[] getValue()>
<soot.tagkit.InnerClassAttribute: java.util.ArrayList getSpecs()>
<soot.tagkit.LinkTag: soot.tagkit.Host getLink()>
<soot.tagkit.VisibilityAnnotationTag: java.util.ArrayList getAnnotations()>
<soot.tagkit.VisibilityParameterAnnotationTag: java.util.ArrayList getVisibilityAnnotations()>
<soot.toolkits.exceptions.ThrowableSet$Pair: soot.toolkits.exceptions.ThrowableSet getCaught()>
<soot.toolkits.exceptions.ThrowableSet$Pair: soot.toolkits.exceptions.ThrowableSet getUncaught()>
<soot.toolkits.exceptions.ThrowableSet: java.util.Set access$000(soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.exceptions.ThrowableSet: java.util.Set access$100(soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.exceptions.UnitThrowAnalysis$UnitSwitch: soot.toolkits.exceptions.ThrowableSet getResult()>
<soot.toolkits.exceptions.UnitThrowAnalysis$ValueSwitch: soot.toolkits.exceptions.ThrowableSet getResult()>
<soot.toolkits.exceptions.UnitThrowAnalysis: soot.toolkits.exceptions.ThrowableSet mightThrowImplicitly(soot.baf.ThrowInst)>
<soot.toolkits.exceptions.UnitThrowAnalysis: soot.toolkits.exceptions.ThrowableSet mightThrowImplicitly(soot.jimple.ThrowStmt)>
<soot.toolkits.graph.Block: java.util.List getPreds()>
<soot.toolkits.graph.Block: java.util.List getSuccs()>
<soot.toolkits.graph.Block: soot.Body getBody()>
<soot.toolkits.graph.Block: soot.Unit getHead()>
<soot.toolkits.graph.Block: soot.Unit getTail()>
<soot.toolkits.graph.BlockGraph: java.util.List getBlocks()>
<soot.toolkits.graph.BlockGraph: java.util.List getHeads()>
<soot.toolkits.graph.BlockGraph: java.util.List getTails()>
<soot.toolkits.graph.BlockGraph: soot.Body getBody()>
<soot.toolkits.graph.DGEdge: java.lang.Object from()>
<soot.toolkits.graph.DGEdge: java.lang.Object to()>
<soot.toolkits.graph.DominatorNode: java.lang.Object getGode()>
<soot.toolkits.graph.DominatorNode: java.util.List getChildren()>
<soot.toolkits.graph.DominatorNode: soot.toolkits.graph.DominatorNode getParent()>
<soot.toolkits.graph.DominatorTree: soot.toolkits.graph.DominatorNode getHead()>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: soot.toolkits.exceptions.ThrowableSet getThrowables()>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: soot.toolkits.graph.Block getHandlerNode()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: soot.Trap getTrap()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: soot.toolkits.exceptions.ThrowableSet getThrowables()>
<soot.toolkits.graph.ExceptionalUnitGraph: soot.toolkits.exceptions.ThrowAnalysis getThrowAnalysis()>
<soot.toolkits.graph.PseudoTopologicalOrderer: java.util.List computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SimpleDominatorsFinder: soot.toolkits.graph.DirectedGraph getGraph()>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer$PseudoTopologicalReverseOrderer: java.util.LinkedList computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SlowPseudoTopologicalOrderer: java.util.LinkedList computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.StronglyConnectedComponents: java.util.List getComponents()>
<soot.toolkits.graph.UnitGraph: java.util.List getHeads()>
<soot.toolkits.graph.UnitGraph: java.util.List getTails()>
<soot.toolkits.graph.UnitGraph: soot.Body getBody()>
<soot.toolkits.graph.interaction.InteractionHandler: java.util.ArrayList getStopUnitList()>
<soot.toolkits.graph.interaction.InteractionHandler: soot.SootMethod getNextMethod()>
<soot.toolkits.graph.interaction.InteractionHandler: soot.jimple.toolkits.annotation.callgraph.CallGraphGrapher getGrapher()>
<soot.toolkits.graph.interaction.InteractionHandler: soot.toolkits.graph.interaction.IInteractionListener getInteractionListener()>
<soot.toolkits.scalar.FastColorer$UnitInterferenceGraph: java.util.List getLocals()>
<soot.toolkits.scalar.Pair: java.lang.Object getO1()>
<soot.toolkits.scalar.Pair: java.lang.Object getO2()>
<soot.toolkits.scalar.SmartLocalDefs: java.util.Map access$000(soot.toolkits.scalar.SmartLocalDefs)>
<soot.toolkits.scalar.UnitValueBoxPair: soot.Unit getUnit()>
<soot.toolkits.scalar.UnitValueBoxPair: soot.ValueBox getValueBox()>
<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>
<soot.util.ArraySet: java.lang.Object[] access$100(soot.util.ArraySet)>
<soot.util.DeterministicHashMap: java.util.Set keySet()>
<soot.util.HashChain$Link: java.lang.Object getItem()>
<soot.util.HashChain$Link: soot.util.HashChain$Link getNext()>
<soot.util.HashChain$Link: soot.util.HashChain$Link getPrevious()>
<soot.util.HashChain: java.lang.Object getFirst()>
<soot.util.HashChain: java.lang.Object getLast()>
<soot.util.HashChain: java.util.HashMap access$200(soot.util.HashChain)>
<soot.util.SingletonList: java.lang.Object get(int)>
<soot.util.TrustingMonotonicArraySet: java.lang.Object[] access$100(soot.util.TrustingMonotonicArraySet)>
<sun.jkernel.Bundle: java.io.File getJarPath()>
<sun.jkernel.Bundle: java.io.File getLocalPath()>
<sun.misc.JarIndex: java.lang.String[] getJarFiles()>
<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>
<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool access$400(sun.misc.ProxyGenerator)>
<sun.misc.Resource: java.io.InputStream cachedInputStream()>
<sun.misc.SoftCache$ValueCell: java.lang.Object access$100(sun.misc.SoftCache$ValueCell)>
<sun.misc.URLClassPath$1: java.lang.Object nextElement()>
<sun.misc.URLClassPath$2: java.lang.Object nextElement()>
<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>
<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.net.URLStreamHandler access$1000(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>
<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$Loader: java.net.URL access$200(sun.misc.URLClassPath$Loader)>
<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>
<sun.misc.URLClassPath: java.net.URLStreamHandler access$100(sun.misc.URLClassPath)>
<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error()>
<sun.reflect.ByteVectorImpl: byte[] getData()>
<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>
<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service tryGet(int)>
<sun.security.jca.ProviderList: java.util.List providers()>
<sun.security.jca.ProviderList: sun.security.jca.ProviderConfig[] access$100(sun.security.jca.ProviderList)>
<sun.security.pkcs.ContentInfo: sun.security.util.DerValue getContent()>
<sun.security.pkcs.PKCS7: sun.security.pkcs.ContentInfo getContentInfo()>
<sun.security.pkcs.PKCS9Attribute: java.lang.Object getValue()>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.PKCS9Attributes getUnauthenticatedAttributes()>
<sun.security.pkcs.SignerInfo: sun.security.x509.AlgorithmId getDigestAlgorithmId()>
<sun.security.pkcs.SignerInfo: sun.security.x509.AlgorithmId getDigestEncryptionAlgorithmId()>
<sun.security.provider.PolicyFile$PolicyEntry: java.security.CodeSource getCodeSource()>
<sun.security.provider.PolicyFile$PolicyEntry: java.util.List getPrincipals()>
<sun.security.provider.PolicyFile$SelfPermission: java.security.cert.Certificate[] getCerts()>
<sun.security.timestamp.TimestampToken: java.util.Date getDate()>
<sun.security.util.DerIndefLenConverter: byte[] convert(byte[])>
<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>
<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>
<sun.security.util.ManifestEntryVerifier: java.util.jar.JarEntry getEntry()>
<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>
<sun.security.x509.CertificateAlgorithmId: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>
<sun.security.x509.CertificateIssuerName: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateIssuerUniqueIdentity: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSerialNumber: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSubjectName: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSubjectUniqueIdentity: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateX509Key: java.lang.Object get(java.lang.String)>
<sun.security.x509.Extension: byte[] getExtensionValue()>
<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>
<sun.security.x509.SerialNumber: java.math.BigInteger getNumber()>
<sun.security.x509.URIName: java.lang.Object getHostObject()>
<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>
<sun.security.x509.X509CRLEntryImpl: byte[] getEncoded0()>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: java.math.BigInteger getSerial()>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: javax.security.auth.x500.X500Principal getIssuer()>
<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>
<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>
<sun.security.x509.X509CertImpl: java.util.List getExtendedKeyUsage()>
<sun.text.normalizer.CharTrie: char[] access$000(sun.text.normalizer.CharTrie)>
<sun.text.normalizer.NormalizerDataReader: byte[] getUnicodeVersion()>
<sun.text.normalizer.UnicodeSet: int[] range(int,int)>
<sun.util.LocaleServiceProviderPool: java.util.Set access$000(sun.util.LocaleServiceProviderPool)>
<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>
<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>
<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>
<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>
<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRule()>
<sun.util.resources.OpenListResourceBundle: sun.util.resources.OpenListResourceBundle getParent()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String put(java.lang.String,java.lang.String)>
<java.lang.ProcessEnvironment$StringEnvironment: java.util.Collection values()>
<java.lang.ProcessEnvironment$StringEnvironment: java.util.Set entrySet()>
<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>
<java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean add(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.AbstractList$ListItr: java.lang.Object previous()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.AbstractList$ListItr: void set(java.lang.Object)>
<java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>
<java.util.AbstractList: java.lang.Object remove(int)>
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: java.util.List subList(int,int)>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.AbstractList: void add(int,java.lang.Object)>
<java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.AbstractMap$2: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: java.lang.Object clone()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: void add(int,java.lang.Object)>
<java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Collections$1: java.lang.Object nextElement()>
<java.util.Collections$EmptyList: java.lang.Object get(int)>
<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$EmptyMap: java.util.Collection values()>
<java.util.Collections$EmptyMap: java.util.Set entrySet()>
<java.util.Collections$EmptySet$1: java.lang.Object next()>
<java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.Collections$SingletonSet$1: java.lang.Object next()>
<java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.util.Collection values()>
<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableList: boolean addAll(int,java.util.Collection)>
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>
<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>
<java.util.Collections$UnmodifiableList: java.util.ListIterator listIterator()>
<java.util.Collections$UnmodifiableList: java.util.ListIterator listIterator(int)>
<java.util.Collections$UnmodifiableList: void add(int,java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection,java.lang.Object)>
<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>
<java.util.Collections: java.util.List emptyList()>
<java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Collections: java.util.List synchronizedList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Map emptyMap()>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.Set emptySet()>
<java.util.Collections: java.util.Set singleton(java.lang.Object)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set,java.lang.Object)>
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.HashMap$Entry: java.lang.Object getKey()>
<java.util.HashMap$Entry: java.lang.Object getValue()>
<java.util.HashMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object clone()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: java.lang.Object clone()>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Hashtable$EmptyEnumerator: java.lang.Object nextElement()>
<java.util.Hashtable$EmptyIterator: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: java.util.Set entrySet()>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.IdentityHashMap: java.util.Set keySet()>
<java.util.LinkedHashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>
<java.util.LinkedHashMap$ValueIterator: java.lang.Object next()>
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.LinkedList$ListItr: java.lang.Object previous()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.util.LinkedList$ListItr: void set(java.lang.Object)>
<java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>
<java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.util.LinkedList: java.lang.Object element()>
<java.util.LinkedList: java.lang.Object get(int)>
<java.util.LinkedList: java.lang.Object getFirst()>
<java.util.LinkedList: java.lang.Object getLast()>
<java.util.LinkedList: java.lang.Object remove()>
<java.util.LinkedList: java.lang.Object remove(int)>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.LinkedList: java.lang.Object removeLast()>
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<java.util.LinkedList: java.util.ListIterator listIterator(int)>
<java.util.LinkedList: void <init>(java.util.Collection)>
<java.util.LinkedList: void add(int,java.lang.Object)>
<java.util.LinkedList: void addFirst(java.lang.Object)>
<java.util.LinkedList: void addLast(java.lang.Object)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.util.Properties: void <init>(java.util.Properties)>
<java.util.Stack: java.lang.Object peek()>
<java.util.Stack: java.lang.Object pop()>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<java.util.SubList$1: java.lang.Object next()>
<java.util.SubList$1: java.lang.Object previous()>
<java.util.SubList$1: void add(java.lang.Object)>
<java.util.SubList$1: void set(java.lang.Object)>
<java.util.SubList: java.lang.Object get(int)>
<java.util.SubList: java.util.Iterator iterator()>
<java.util.SubList: java.util.ListIterator listIterator(int)>
<java.util.TreeMap$Entry: java.lang.Object getKey()>
<java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.TreeMap$Values: java.util.Iterator iterator()>
<java.util.TreeMap: java.lang.Object firstKey()>
<java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap: java.lang.Object lastKey()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap: java.util.Collection values()>
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>
<java.util.TreeMap: java.util.Set entrySet()>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.TreeSet: boolean add(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>
<java.util.TreeSet: java.lang.Object clone()>
<java.util.TreeSet: java.lang.Object first()>
<java.util.TreeSet: java.lang.Object last()>
<java.util.TreeSet: java.util.Iterator iterator()>
<java.util.TreeSet: void <init>(java.util.Collection)>
<java.util.TreeSet: void <init>(java.util.SortedSet)>
<java.util.Vector$1: java.lang.Object nextElement()>
<java.util.Vector: boolean add(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.Vector: java.lang.Object firstElement()>
<java.util.Vector: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object remove(int)>
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<java.util.Vector: java.util.Enumeration elements()>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: void add(int,java.lang.Object)>
<java.util.Vector: void addElement(java.lang.Object)>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
<java.util.Vector: void setElementAt(java.lang.Object,int)>
<java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: java.util.Collection values()>
<java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int,java.util.Set)>
<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<jasmin.ClassFile: java.util.ArrayList mergeNewAnnotAttr(java.lang.Object,java.lang.Object)>
<jasmin.ClassFile: java.util.ArrayList mergeNewAnnotation(java.lang.Object,java.lang.Object)>
<jasmin.ClassFile: java.util.ArrayList mergeNewElemValPair(java.lang.Object,java.lang.Object)>
<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>
<java.io.ObjectStreamClass: java.io.InvalidClassException access$1002(java.io.ObjectStreamClass,java.io.InvalidClassException)>
<java.io.ObjectStreamClass: java.io.InvalidClassException access$1102(java.io.ObjectStreamClass,java.io.InvalidClassException)>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getVariantFor(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] access$602(java.io.ObjectStreamClass,java.io.ObjectStreamField[])>
<java.io.ObjectStreamClass: java.lang.Long access$502(java.io.ObjectStreamClass,java.lang.Long)>
<java.io.ObjectStreamClass: java.lang.reflect.Constructor access$1302(java.io.ObjectStreamClass,java.lang.reflect.Constructor)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1602(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1802(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$1902(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$2102(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.io.ObjectStreamClass: java.lang.reflect.Method access$2302(java.io.ObjectStreamClass,java.lang.reflect.Method)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(boolean)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[])>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(double)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(float)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.StringBuffer)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder appendCodePoint(int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder delete(int,int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.String)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder replace(int,int,java.lang.String)>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<java.lang.InheritableThreadLocal: java.lang.Object childValue(java.lang.Object)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<java.lang.Object: java.lang.Object clone()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder environment(java.lang.String[])>
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuilder)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>
<java.lang.StringCoding: byte[] safeTrim(byte[],int,java.nio.charset.Charset)>
<java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset)>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.UNIXProcess: java.io.InputStream access$702(java.lang.UNIXProcess,java.io.InputStream)>
<java.lang.UNIXProcess: java.io.InputStream access$802(java.lang.UNIXProcess,java.io.InputStream)>
<java.lang.UNIXProcess: java.io.OutputStream access$602(java.lang.UNIXProcess,java.io.OutputStream)>
<java.lang.ref.Reference: java.lang.ref.Reference access$202(java.lang.ref.Reference)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
<java.math.BigDecimal: java.math.BigDecimal stripZerosToMatchScale(long)>
<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.lang.Object)>
<java.net.InetAddress: sun.net.spi.nameservice.NameService access$002(sun.net.spi.nameservice.NameService)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer compact()>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<java.nio.charset.Charset: java.nio.charset.spi.CharsetProvider access$102(java.nio.charset.spi.CharsetProvider)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.security.AccessControlContext: java.security.AccessControlContext goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)>
<java.security.AccessControlContext: java.security.AccessControlContext optimize()>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Arrays$ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Date: java.lang.StringBuilder convertToAbbr(java.lang.StringBuilder,java.lang.String)>
<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>
<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>
<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>
<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder leadingSign(java.lang.StringBuilder,boolean)>
<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder trailingSign(java.lang.StringBuilder,boolean)>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.WeakHashMap$Entry: java.lang.Object access$202(java.util.WeakHashMap$Entry,java.lang.Object)>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$102(java.util.WeakHashMap$Entry,java.util.WeakHashMap$Entry)>
<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>
<java.util.logging.LogManager: java.util.logging.LogManager access$102(java.util.logging.LogManager)>
<java.util.logging.LogManager: java.util.logging.Logger access$202(java.util.logging.LogManager,java.util.logging.Logger)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Pattern$BitClass: java.util.regex.Pattern$BitClass add(int,int)>
<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node optimize(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node closure(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>
<javax.crypto.SunJCE_b: java.security.cert.CertificateFactory a(java.security.cert.CertificateFactory)>
<javax.crypto.SunJCE_b: java.security.cert.X509Certificate a(java.security.cert.X509Certificate)>
<javax.crypto.SunJCE_b: java.security.cert.X509Certificate b(java.security.cert.X509Certificate)>
<javax.crypto.SunJCE_b: sun.security.validator.Validator a(sun.security.validator.Validator)>
<javax.crypto.SunJCE_b: sun.security.validator.Validator b(sun.security.validator.Validator)>
<javax.crypto.SunJCE_d: javax.crypto.SunJCE_d a(javax.crypto.SunJCE_d)>
<polyglot.ext.jl.ast.AbstractBlock_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.AbstractBlock_c: polyglot.ext.jl.ast.AbstractBlock_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.AbstractDelFactory_c: polyglot.ast.JL composeDels(polyglot.ast.JL,polyglot.ast.JL)>
<polyglot.ext.jl.ast.AbstractDelFactory_c: polyglot.ast.JL postDelNode(polyglot.ast.JL)>
<polyglot.ext.jl.ast.AbstractExtFactory_c: polyglot.ast.Ext composeExts(polyglot.ast.Ext,polyglot.ast.Ext)>
<polyglot.ext.jl.ast.AbstractExtFactory_c: polyglot.ast.Ext postExtNode(polyglot.ast.Ext)>
<polyglot.ext.jl.ast.AmbExpr_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.AmbExpr_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ext.jl.ast.AmbPrefix_c reconstruct(polyglot.ast.Prefix)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ext.jl.ast.AmbQualifierNode_c reconstruct(polyglot.ast.QualifierNode)>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ext.jl.ast.AmbTypeNode_c reconstruct(polyglot.ast.QualifierNode)>
<polyglot.ext.jl.ast.ArrayAccess_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ext.jl.ast.ArrayAccess_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayInit_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ArrayInit_c: polyglot.ext.jl.ast.ArrayInit_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: polyglot.ext.jl.ast.ArrayTypeNode_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Assert_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Assert_c: polyglot.ext.jl.ast.Assert_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assign_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Assign_c: polyglot.ext.jl.ast.Assign_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Binary_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Binary_c: polyglot.ext.jl.ast.Binary_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Branch_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Call_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Call targetImplicit(boolean)>
<polyglot.ext.jl.ast.Call_c: polyglot.ext.jl.ast.Call_c reconstruct(polyglot.ast.Receiver,java.util.List)>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Case_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Case_c: polyglot.ext.jl.ast.Case_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Cast_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Cast_c: polyglot.ext.jl.ast.Cast_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Catch_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Catch_c: polyglot.ext.jl.ast.Catch_c reconstruct(polyglot.ast.Formal,polyglot.ast.Block)>
<polyglot.ext.jl.ast.ClassBody_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ext.jl.ast.ClassBody_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node addDefaultConstructorIfNeeded(polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ext.jl.ast.ClassDecl_c reconstruct(polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.ClassLit typeNode(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Conditional_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ext.jl.ast.Conditional_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ConstructorCall_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ext.jl.ast.ConstructorCall_c reconstruct(polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.ConstructorDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ext.jl.ast.ConstructorDecl_c reconstruct(java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Do_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Do_c: polyglot.ext.jl.ast.Do_c reconstruct(polyglot.ast.Stmt,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Empty_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Empty_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Eval_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Eval_c: polyglot.ext.jl.ast.Eval_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Expr_c: polyglot.ast.Expr type(polyglot.types.Type)>
<polyglot.ext.jl.ast.FieldDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ext.jl.ast.FieldDecl_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Field_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Field_c: polyglot.ext.jl.ast.Field_c reconstruct(polyglot.ast.Receiver)>
<polyglot.ext.jl.ast.For_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.For_c: polyglot.ext.jl.ast.For_c reconstruct(java.util.List,polyglot.ast.Expr,java.util.List,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Formal_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Formal_c: polyglot.ext.jl.ast.Formal_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.If_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.If_c: polyglot.ext.jl.ast.If_c reconstruct(polyglot.ast.Expr,polyglot.ast.Stmt,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Import_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Import_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Initializer_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ext.jl.ast.Initializer_c reconstruct(polyglot.ast.Block)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Instanceof_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ext.jl.ast.Instanceof_c reconstruct(polyglot.ast.Expr,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Labeled_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ext.jl.ast.Labeled_c reconstruct(polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Lit_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Lit_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.LocalClassDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ext.jl.ast.LocalClassDecl_c reconstruct(polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.LocalDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.LocalDecl localInstance(polyglot.types.LocalInstance)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ext.jl.ast.LocalDecl_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Local_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Local_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.MethodDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ext.jl.ast.MethodDecl_c reconstruct(polyglot.ast.TypeNode,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.NewArray_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ext.jl.ast.NewArray_c reconstruct(polyglot.ast.TypeNode,java.util.List,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.New_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.TypeNode partialDisambTypeNode(polyglot.ast.TypeNode,polyglot.visit.TypeChecker,polyglot.types.ClassType)>
<polyglot.ext.jl.ast.New_c: polyglot.ext.jl.ast.New_c reconstruct(polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.New_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node addMembers(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node del(polyglot.ast.JL)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node ext(polyglot.ast.Ext)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor typeCheckEnter(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Return_c: polyglot.ext.jl.ast.Return_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ext.jl.ast.SourceFile_c reconstruct(polyglot.ast.PackageNode,java.util.List,java.util.List)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Special_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Special_c: polyglot.ext.jl.ast.Special_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.SwitchBlock_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Switch_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Switch_c: polyglot.ext.jl.ast.Switch_c reconstruct(polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.Synchronized_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ext.jl.ast.Synchronized_c reconstruct(polyglot.ast.Expr,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Term listEntry(java.util.List,polyglot.ast.Term)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Term reachable(boolean)>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Throw_c: polyglot.ext.jl.ast.Throw_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Try_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Try_c: polyglot.ext.jl.ast.Try_c reconstruct(polyglot.ast.Block,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Unary_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Unary_c: polyglot.ext.jl.ast.Unary_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.While_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.While_c: polyglot.ext.jl.ast.While_c reconstruct(polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.ArrayType toArray()>
<polyglot.ext.jl.types.ClassType_c: polyglot.types.ClassType toClass()>
<polyglot.ext.jl.types.FieldInstance_c: polyglot.types.FieldInstance constantValue(java.lang.Object)>
<polyglot.ext.jl.types.LocalInstance_c: polyglot.types.LocalInstance constantValue(java.lang.Object)>
<polyglot.ext.jl.types.Package_c: polyglot.types.Package toPackage()>
<polyglot.ext.jl.types.PrimitiveType_c: polyglot.types.PrimitiveType toPrimitive()>
<polyglot.ext.jl.types.ReferenceType_c: polyglot.types.ReferenceType toReference()>
<polyglot.ext.jl.types.TypeSystem_c: java.lang.Object placeHolder(polyglot.types.TypeObject,java.util.Set)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Type leastCommonAncestor(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Type staticTarget(polyglot.types.Type)>
<polyglot.ext.jl.types.Type_c: polyglot.types.Type toType()>
<polyglot.frontend.SourceJob: polyglot.frontend.SourceJob sourceJob()>
<polyglot.parse.BaseParser: polyglot.ast.TypeNode array(polyglot.ast.TypeNode,int)>
<polyglot.types.reflect.ClassFile: polyglot.types.Type arrayOf(polyglot.types.Type,int)>
<polyglot.util.Base64: byte[] encode3to4(byte[],byte[],int)>
<polyglot.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int)>
<polyglot.util.CollectionUtil: java.lang.Object firstOrElse(java.util.Collection,java.lang.Object)>
<polyglot.util.Enum: polyglot.util.Enum intern()>
<polyglot.util.TypeInputStream: java.lang.Object resolveObject(java.lang.Object)>
<polyglot.util.TypeOutputStream: java.lang.Object replaceObject(java.lang.Object)>
<polyglot.visit.AscriptionVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ClassSerializer: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ClassSerializer: polyglot.ast.Node override(polyglot.ast.Node)>
<polyglot.visit.ConstructorCallChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.DataFlow: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.DataFlow: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.DumpAst: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.DumpAst: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.visit.NodeVisitor enterError(polyglot.ast.Node)>
<polyglot.visit.FwdReferenceChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.HaltingVisitor: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.HaltingVisitor: polyglot.visit.HaltingVisitor bypass(polyglot.ast.Node)>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$MinMaxInitCount join(polyglot.visit.InitChecker$MinMaxInitCount,polyglot.visit.InitChecker$MinMaxInitCount)>
<polyglot.visit.InitChecker: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.NodeVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.NodeVisitor: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.NodeVisitor: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<polyglot.visit.TypeBuilder: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.TypeBuilder: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.TypeBuilder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<soot.AbstractSootFieldRef: soot.SootField checkStatic(soot.SootField)>
<soot.AbstractSootMethodRef: soot.SootMethod checkStatic(soot.SootMethod)>
<soot.JastAddInitialResolver: soot.JastAddJ.TypeDecl findNestedTypeDecl(soot.JastAddJ.TypeDecl,soot.SootClass)>
<soot.JastAddJ.ASTNode: soot.Immediate asImmediate(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode setEnd(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode setStart(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode with(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.Local asLocal(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.ASTNode: soot.Local asLocal(soot.JastAddJ.Body,soot.Value,soot.Type)>
<soot.JastAddJ.ASTNode: soot.Value asRValue(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.Access: soot.JastAddJ.Access lastAccess_compute()>
<soot.JastAddJ.AnonymousDecl: soot.JastAddJ.AnonymousDecl rewriteRule0()>
<soot.JastAddJ.Block: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Body: soot.JastAddJ.Body add(soot.jimple.Stmt)>
<soot.JastAddJ.Body: soot.JastAddJ.Body addLabel(soot.jimple.Stmt)>
<soot.JastAddJ.Body: soot.JastAddJ.Body addTrap(soot.JastAddJ.TypeDecl,soot.jimple.Stmt,soot.jimple.Stmt,soot.jimple.Stmt)>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.BodyDecl Define_BodyDecl_enclosingBodyDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.BooleanType: soot.Value emitCastTo(soot.JastAddJ.Body,soot.Value,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.BranchTargetStmt: soot.JastAddJ.Stmt branchTarget(soot.JastAddJ.Stmt)>
<soot.JastAddJ.BytecodeParser: soot.JastAddJ.List parseInterfaces(soot.JastAddJ.List)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ClassDecl: soot.JastAddJ.TypeDecl makeGeneric(soot.JastAddJ.Signatures$ClassSignature)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.CompilationUnit Define_CompilationUnit_compilationUnit(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ConstructorDecl: soot.JastAddJ.ASTNode Define_ASTNode_enclosingBlock(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ConstructorDecl: soot.JastAddJ.ConstructorDecl erasedConstructor_compute()>
<soot.JastAddJ.ConstructorDecl: soot.JastAddJ.ConstructorDecl rewriteRule0()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access qualifyTailWith(soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: soot.JastAddJ.Dot qualifiesAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.DoubleType: soot.JastAddJ.Constant plus_compute(soot.JastAddJ.Constant)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementValue definesElementTypeValue_compute(java.lang.String)>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValuePair rewriteRule0()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.EnumDecl: soot.JastAddJ.EnumDecl rewriteRule0()>
<soot.JastAddJ.Expr: soot.Value emitStore(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.FieldDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.FieldDeclaration: soot.JastAddJ.FieldDeclaration erasedField_compute()>
<soot.JastAddJ.FloatType: soot.JastAddJ.Constant plus_compute(soot.JastAddJ.Constant)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ForStmt rewriteRule0()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.GenericClassDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.GenericClassDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_genericDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.GenericClassDecl: soot.JastAddJ.TypeDecl makeGeneric(soot.JastAddJ.Signatures$ClassSignature)>
<soot.JastAddJ.GenericInterfaceDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.GenericInterfaceDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_genericDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.GenericInterfaceDecl: soot.JastAddJ.TypeDecl makeGeneric(soot.JastAddJ.Signatures$ClassSignature)>
<soot.JastAddJ.GenericMethodDecl: soot.JastAddJ.GenericMethodDecl Define_GenericMethodDecl_genericMethodDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.ASTNode Define_ASTNode_enclosingBlock(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.IntegralType: soot.JastAddJ.Constant plus_compute(soot.JastAddJ.Constant)>
<soot.JastAddJ.InterfaceDecl: soot.JastAddJ.TypeDecl makeGeneric(soot.JastAddJ.Signatures$ClassSignature)>
<soot.JastAddJ.List: soot.JastAddJ.List add(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.LongType: soot.JastAddJ.Constant plus_compute(soot.JastAddJ.Constant)>
<soot.JastAddJ.MethodDecl: java.util.Iterator iterator()>
<soot.JastAddJ.MethodDecl: soot.JastAddJ.ASTNode Define_ASTNode_enclosingBlock(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.MethodDecl: soot.JastAddJ.MethodDecl erasedMethod_compute()>
<soot.JastAddJ.MethodDecl: soot.JastAddJ.MethodDecl sourceMethodDecl_compute()>
<soot.JastAddJ.NullType: soot.Value emitCastTo(soot.JastAddJ.Body,soot.Value,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.NumericType: soot.JastAddJ.TypeDecl unaryNumericPromotion_compute()>
<soot.JastAddJ.NumericType: soot.Value emitCastTo(soot.JastAddJ.Body,soot.Value,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ParameterDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.Program: soot.JastAddJ.TypeDecl generatePrimitiveType(soot.JastAddJ.PrimitiveType,java.lang.String,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ReferenceType: soot.Value emitCastTo(soot.JastAddJ.Body,soot.Value,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.SimpleSet$1: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Stmt branchTarget(soot.JastAddJ.Stmt)>
<soot.JastAddJ.TypeDecl: java.util.Iterator iterator()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_componentType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingInstance(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl elementType_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl erasure_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl hostType_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl makeGeneric(soot.JastAddJ.Signatures$ClassSignature)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl original_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl stringPromotion_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl subclassWithinBody(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl substitute(soot.JastAddJ.TypeVariable)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl topLevelType_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl unaryNumericPromotion_compute()>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.TypeDecl withinBodyThatSubclasses_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeDecl: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TypeDecl: soot.Value emitCastTo(soot.JastAddJ.Body,soot.Value,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TypeVariable: soot.JastAddJ.TypeVariable rewriteRule0()>
<soot.JastAddJ.UnknownType: soot.JastAddJ.TypeDecl binaryNumericPromotion_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.UnknownType: soot.JastAddJ.TypeDecl unaryNumericPromotion_compute()>
<soot.JastAddJ.VariableDeclaration: java.util.Iterator iterator()>
<soot.MethodContext: soot.MethodOrMethodContext v(soot.SootMethod,soot.Context)>
<soot.SootMethod: soot.SootMethod method()>
<soot.Type: soot.Type toMachineType(soot.Type)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: soot.Body access$002(soot.baf.toolkits.base.LoadStoreOptimizer$Instance,soot.Body)>
<soot.baf.toolkits.base.LoadStoreOptimizer$Instance: soot.util.Chain access$102(soot.baf.toolkits.base.LoadStoreOptimizer$Instance,soot.util.Chain)>
<soot.coffi.CFG: soot.Type byteCodeTypeOf(soot.Type)>
<soot.coffi.CFG: soot.coffi.Instruction buildBasicBlock(soot.coffi.Instruction)>
<soot.coffi.CONSTANT_Utf8_collector: soot.coffi.CONSTANT_Utf8_info add(soot.coffi.CONSTANT_Utf8_info)>
<soot.dava.internal.javaRep.DArrayInitExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DShortcutIf: java.lang.Object clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CP: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CP: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CP: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CP: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List addIfNotDuplicate(java.util.List,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List copyDavaFlowSetList(java.util.List,java.util.List)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object ifNotReachableReturnInputElseProcessBodyAndReturnTrue(soot.dava.internal.AST.ASTNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTStatementSequenceNode(soot.dava.internal.AST.ASTStatementSequenceNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTTryNode(soot.dava.internal.AST.ASTTryNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.transformations.BooleanConditionSimplification: soot.Value decideCondition(soot.Value,java.lang.String,soot.jimple.ConditionExpr)>
<soot.dava.toolkits.base.AST.transformations.CPApplication: soot.dava.internal.AST.ASTCondition changedCondition(soot.dava.internal.AST.ASTCondition,soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet)>
<soot.dava.toolkits.base.AST.transformations.SimplifyConditions: soot.dava.internal.AST.ASTCondition simplifyIfAtleastOneConstant(soot.dava.internal.AST.ASTAggregatedCondition)>
<soot.dava.toolkits.base.AST.transformations.SimplifyConditions: soot.dava.internal.AST.ASTCondition simplifyTheCondition(soot.dava.internal.AST.ASTCondition)>
<soot.dava.toolkits.base.finders.CycleFinder: soot.dava.internal.asg.AugmentedStmt find_CharacterizingStmt(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet,soot.dava.internal.asg.AugmentedStmtGraph)>
<soot.dava.toolkits.base.finders.SwitchNode: soot.dava.toolkits.base.finders.SwitchNode reset()>
<soot.grimp.Grimp: soot.Value cloneIfNecessary(soot.Value)>
<soot.grimp.Grimp: soot.Value newExpr(soot.Value)>
<soot.javaToJimple.AnonConstructorFinder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.AssertStmtChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.CastInsertionVisitor: polyglot.ast.Expr ascribe(polyglot.ast.Expr,polyglot.types.Type)>
<soot.javaToJimple.ClassLiteralChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.JimpleBodyBuilder: java.lang.Number createConstantCast(polyglot.types.Type,java.lang.Number)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value handleDFLCond(soot.jimple.ConditionExpr)>
<soot.javaToJimple.LocalUsesChecker: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.MethodFinalsChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.StrictFPPropagator: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.StrictFPPropagator: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.TypeListBuilder: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.jimple.Jimple: soot.Value cloneIfNecessary(soot.Value)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFile$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFileBody$Member_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.NodeCast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable cloneObjectImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: java.util.Set getCallTargetsForType(soot.Type,soot.util.NumberedString,soot.Type,java.util.Set)>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.Node getReplacement()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.Node parameterize(soot.jimple.spark.pag.Node,soot.Context)>
<soot.jimple.spark.sets.PointsToSetInternal: soot.jimple.spark.sets.PointsToSetInternal getNewSet()>
<soot.jimple.spark.sets.SharedListSet: soot.jimple.spark.sets.SharedListSet$ListNode union(soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.util.BitVector,boolean)>
<soot.jimple.toolkits.annotation.logic.LoopFinder: java.util.List union(java.util.List,java.util.List)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: java.util.HashMap updateFilter(java.util.HashMap,java.util.HashMap)>
<soot.jimple.toolkits.callgraph.Filter: java.util.Iterator wrap(java.util.Iterator)>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: soot.jimple.toolkits.pointer.RWSet getUnique(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SideEffectTagger: java.lang.Object keyFor(soot.jimple.Stmt)>
<soot.jimple.toolkits.scalar.Evaluator: soot.Value getConstantValueOf(soot.Value)>
<soot.jimple.toolkits.scalar.UnconditionalBranchFolder: soot.jimple.Stmt getFinalTarget(soot.jimple.Stmt)>
<soot.jimple.toolkits.scalar.pre.SootFilter: soot.Value binop(soot.Value)>
<soot.jimple.toolkits.scalar.pre.SootFilter: soot.Value concreteRef(soot.Value)>
<soot.jimple.toolkits.scalar.pre.SootFilter: soot.Value noExceptionThrowing(soot.Value)>
<soot.jimple.toolkits.scalar.pre.SootFilter: soot.Value noInvoke(soot.Value)>
<soot.jimple.toolkits.thread.synchronization.LockAllocationBodyTransformer: soot.jimple.InstanceFieldRef reconstruct(soot.Body,soot.PatchingChain,soot.jimple.InstanceFieldRef,soot.jimple.Stmt,boolean)>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode lca(soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode lcaIfUnique(soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable union(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.fast.TypeResolver$CastInsertionUseVisitor: soot.Value visit(soot.Value,soot.Type,soot.jimple.Stmt)>
<soot.jimple.toolkits.typing.fast.TypeResolver$TypePromotionUseVisitor: soot.Type promote(soot.Type,soot.Type)>
<soot.jimple.toolkits.typing.fast.TypeResolver$TypePromotionUseVisitor: soot.Value visit(soot.Value,soot.Type,soot.jimple.Stmt)>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeVariable union(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.shimple.internal.SPatchingChain: soot.shimple.internal.SUnitBox getSBox(soot.UnitBox)>
<soot.shimple.toolkits.scalar.SEvaluator: soot.jimple.Constant getFuzzyConstantValueOf(soot.Value)>
<soot.shimple.toolkits.scalar.SEvaluator: soot.jimple.Constant getFuzzyConstantValueOf(soot.Value,java.util.Map)>
<soot.toolkits.astmetrics.ASTMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth$1: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.toolkits.exceptions.ThrowableSet$ThrowableComparator: soot.RefType baseType(java.lang.Object)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(soot.AnySubType)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(soot.RefType)>
<soot.toolkits.graph.HashReversibleGraph: soot.toolkits.graph.ReversibleGraph reverse()>
<soot.util.HashChain: java.lang.Object access$002(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain: java.lang.Object access$102(soot.util.HashChain,java.lang.Object)>
<soot.xml.XMLNode: soot.xml.XMLNode addAttribute(java.lang.String,java.lang.String)>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(soot.xml.XMLNode)>
<soot.xml.XMLPrinter: soot.xml.XMLNode setXMLNode(soot.xml.XMLNode)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex)>
<sun.misc.URLClassPath: java.net.URL checkURL(java.net.URL)>
<sun.reflect.Reflection: java.lang.reflect.Field[] filterFields(java.lang.Class,java.lang.reflect.Field[])>
<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor newConstructorForSerialization(java.lang.Class,java.lang.reflect.Constructor)>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>
<sun.security.util.DerValue: byte[] append(byte[],byte[])>
<sun.security.validator.SimpleValidator: java.security.cert.X509Certificate getTrustedCertificate(java.security.cert.X509Certificate)>
<sun.security.x509.GeneralNames: sun.security.x509.GeneralNames add(sun.security.x509.GeneralName)>
<sun.security.x509.X500Name: sun.security.util.ObjectIdentifier intern(sun.security.util.ObjectIdentifier)>
<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getCertIssuer(sun.security.x509.X509CRLEntryImpl,javax.security.auth.x500.X500Principal)>
<sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>
<sun.text.normalizer.UnicodeSet: java.lang.StringBuffer _toPattern(java.lang.StringBuffer,boolean)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int[],int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(java.lang.String)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyFilter(sun.text.normalizer.UnicodeSet$Filter)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet clear()>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement()>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retain(int[],int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet xor(int[],int,int)>
<sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>
<sun.util.PreHashedMap: java.lang.Object toV(java.lang.Object)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate,int)>
<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>
<sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>
<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date addYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setYear(int)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date adjustYear(sun.util.calendar.LocalGregorianCalendar$Date,long,int)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>
