<beaver.Parser$Exception: void <init>(java.lang.String)>
<beaver.Parser$TokenStream: beaver.Symbol nextToken()>
<beaver.Parser$TokenStream: beaver.Symbol remove(int)>
<beaver.Parser$TokenStream: void insert(beaver.Symbol,beaver.Symbol)>
<beaver.Parser$TokenStream: void mark(int)>
<beaver.Scanner$Exception: void <init>(int,int,java.lang.String)>
<beaver.Symbol: void <init>()>
<jas.CodeAttr: int getPc(jas.Insn)>
<jas.CodeAttr: int processSootAttributes()>
<jas.CodeAttr: jas.Label getLabel(java.lang.String)>
<jas.CodeAttr: void <init>()>
<jas.CodeAttr: void addGenericAttr(jas.GenericAttr)>
<jas.CodeAttr: void addInsn(jas.Insn)>
<jas.CodeAttr: void addSootCodeAttr(java.lang.String,java.lang.String)>
<jas.CodeAttr: void write(jas.ClassEnv,java.io.DataOutputStream)>
<jas.CodeAttributeDecoder: byte[] decode(java.lang.String,java.util.Hashtable)>
<jas.VisibilityAnnotationAttr: java.lang.String getKind()>
<jas.VisibilityAnnotationAttr: java.util.ArrayList getList()>
<jas.VisibilityAnnotationAttr: void <init>(java.lang.String,java.util.ArrayList)>
<jas.jasError: void <init>(java.lang.String)>
<jasmin.parser: java_cup.runtime.Symbol scan()>
<jasmin.parser: void <init>(jasmin.ClassFile,jasmin.Scanner)>
<java.awt.AWTPermission: void <init>(java.lang.String)>
<java.awt.AWTPermission: void <init>(java.lang.String,java.lang.String)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<java.io.BufferedReader: java.lang.String readLine(boolean)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.io.DataInputStream: java.lang.String readLine()>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.io.EOFException: void <init>()>
<java.io.EOFException: void <init>(java.lang.String)>
<java.io.ExpiringCache$1: void <init>(java.io.ExpiringCache)>
<java.io.ExpiringCache$Entry: java.lang.String val()>
<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>
<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>
<java.io.ExpiringCache: java.io.ExpiringCache$Entry entryFor(java.lang.String)>
<java.io.ExpiringCache: java.lang.String get(java.lang.String)>
<java.io.ExpiringCache: void <init>()>
<java.io.ExpiringCache: void <init>(long)>
<java.io.ExpiringCache: void cleanup()>
<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>
<java.io.File: boolean delete()>
<java.io.File: boolean exists()>
<java.io.File: boolean isDirectory()>
<java.io.File: boolean mkdir()>
<java.io.File: boolean mkdirs()>
<java.io.File: java.io.File getAbsoluteFile()>
<java.io.File: java.io.File getCanonicalFile()>
<java.io.File: java.io.File getParentFile()>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.File: java.lang.String getName()>
<java.io.File: java.lang.String getParent()>
<java.io.File: java.lang.String getPath()>
<java.io.File: java.lang.String slashify(java.lang.String,boolean)>
<java.io.File: java.lang.String toString()>
<java.io.File: java.lang.String[] list()>
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>
<java.io.File: java.net.URI toURI()>
<java.io.File: java.net.URL toURL()>
<java.io.File: long lastModified()>
<java.io.File: long length()>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.File: void <init>(java.lang.String)>
<java.io.File: void <init>(java.lang.String,int)>
<java.io.File: void <init>(java.lang.String,java.lang.String)>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.io.FileInputStream: void <init>(java.lang.String)>
<java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.io.FilePermission$1: java.lang.Object run()>
<java.io.FilePermission$1: java.lang.String run()>
<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>
<java.io.FilePermission: java.security.PermissionCollection newPermissionCollection()>
<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>
<java.io.FilePermission: void init(int)>
<java.io.FilePermissionCollection: java.util.Enumeration elements()>
<java.io.FilePermissionCollection: void <init>()>
<java.io.FilePermissionCollection: void add(java.security.Permission)>
<java.io.FileReader: void <init>(java.io.File)>
<java.io.FileReader: void <init>(java.lang.String)>
<java.io.FileWriter: void <init>(java.io.File)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.FilterWriter: void <init>(java.io.Writer)>
<java.io.IOException: void <init>()>
<java.io.IOException: void <init>(java.lang.String)>
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.InvalidClassException: java.lang.String getMessage()>
<java.io.InvalidClassException: void <init>(java.lang.String)>
<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>
<java.io.InvalidObjectException: void <init>(java.lang.String)>
<java.io.LineNumberReader: void <init>(java.io.Reader)>
<java.io.NotSerializableException: void <init>(java.lang.String)>
<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readLongUTF()>
<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readUTF()>
<java.io.ObjectInputStream$BlockDataInputStream: void <init>(java.io.ObjectInputStream,java.io.InputStream)>
<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>
<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>
<java.io.ObjectInputStream$HandleTable: java.lang.Object lookupObject(int)>
<java.io.ObjectInputStream$HandleTable: void <init>(int)>
<java.io.ObjectInputStream$HandleTable: void grow()>
<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>
<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>
<java.io.ObjectInputStream$HandleTable: void setObject(int,java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readNonProxyDesc(boolean)>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readProxyDesc(boolean)>
<java.io.ObjectInputStream: java.lang.Class readClass(boolean)>
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>
<java.io.ObjectInputStream: java.lang.Enum readEnum(boolean)>
<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>
<java.io.ObjectInputStream: java.lang.Object readHandle(boolean)>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>
<java.io.ObjectInputStream: java.lang.Object readOrdinaryObject(boolean)>
<java.io.ObjectInputStream: java.lang.String readTypeString()>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: void readExternalData(java.io.Externalizable,java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: void readSerialData(java.lang.Object,java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: void verifySubclass()>
<java.io.ObjectOutputStream$DebugTraceInfoStack: void <init>()>
<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object lookup(java.lang.Object)>
<java.io.ObjectOutputStream$ReplaceTable: void <init>(int,float)>
<java.io.ObjectOutputStream$ReplaceTable: void assign(java.lang.Object,java.lang.Object)>
<java.io.ObjectOutputStream$ReplaceTable: void grow()>
<java.io.ObjectOutputStream: void verifySubclass()>
<java.io.ObjectOutputStream: void writeArray(java.lang.Object,java.io.ObjectStreamClass,boolean)>
<java.io.ObjectOutputStream: void writeClass(java.lang.Class,boolean)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>
<java.io.ObjectOutputStream: void writeSerialData(java.lang.Object,java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass$1: java.lang.Object run()>
<java.io.ObjectStreamClass$2: java.lang.Object run()>
<java.io.ObjectStreamClass$2: void <init>(java.io.ObjectStreamClass,java.lang.Class)>
<java.io.ObjectStreamClass$ClassDataSlot: void <init>(java.io.ObjectStreamClass,boolean)>
<java.io.ObjectStreamClass$EntryFuture: boolean set(java.lang.Object)>
<java.io.ObjectStreamClass$EntryFuture: java.lang.Object get()>
<java.io.ObjectStreamClass$FieldReflector: java.io.ObjectStreamField[] getFields()>
<java.io.ObjectStreamClass$FieldReflector: void <init>(java.io.ObjectStreamField[])>
<java.io.ObjectStreamClass$FieldReflectorKey: void <init>(java.lang.Class,java.io.ObjectStreamField[],java.lang.ref.ReferenceQueue)>
<java.io.ObjectStreamClass$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getVariantFor(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class,boolean)>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout0()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$FieldReflector getReflector(java.io.ObjectStreamField[],java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] access$602(java.io.ObjectStreamClass,java.io.ObjectStreamField[])>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] access$800(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDeclaredSerialFields(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getDefaultSerialFields(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields(boolean)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getSerialFields(java.lang.Class)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] matchFields(java.io.ObjectStreamField[],java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: java.lang.Class access$000(java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: java.lang.Class forClass()>
<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>
<java.io.ObjectStreamClass: long access$100(java.lang.Class)>
<java.io.ObjectStreamClass: long computeDefaultSUID(java.lang.Class)>
<java.io.ObjectStreamClass: void <init>(java.lang.Class)>
<java.io.ObjectStreamClass: void initNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: void initProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: void readNonProxy(java.io.ObjectInputStream)>
<java.io.ObjectStreamException: void <init>(java.lang.String)>
<java.io.ObjectStreamField: java.lang.Class getType()>
<java.io.ObjectStreamField: java.lang.String getName()>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.String,boolean)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintStream: void init(java.io.OutputStreamWriter)>
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void println(java.lang.Object)>
<java.io.PrintWriter: void write(java.lang.String)>
<java.io.PrintWriter: void write(java.lang.String,int,int)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>
<java.io.Reader: void <init>(java.lang.Object)>
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<java.io.SequenceInputStream: void nextStream()>
<java.io.SerialCallbackContext: void <init>(java.lang.Object,java.io.ObjectStreamClass)>
<java.io.StreamCorruptedException: void <init>(java.lang.String)>
<java.io.StreamTokenizer: int nextToken()>
<java.io.StringWriter: void write(java.lang.String,int,int)>
<java.io.UTFDataFormatException: void <init>()>
<java.io.UTFDataFormatException: void <init>(java.lang.String)>
<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>
<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>
<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>
<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>
<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>
<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>
<java.io.UnixFileSystem: void <init>()>
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<java.io.WriteAbortedException: java.lang.String getMessage()>
<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>
<java.io.Writer: void <init>(java.lang.Object)>
<java.lang.ArithmeticException: void <init>(java.lang.String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(int)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.AssertionError: void <init>(java.lang.String)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.Character$Subset: java.lang.String toString()>
<java.lang.Character$Subset: void <init>(java.lang.String)>
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.Object newInstance()>
<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.String resolveName(java.lang.String)>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>
<java.lang.Class: java.util.Map enumConstantDirectory()>
<java.lang.Class: void checkMemberAccess(int,java.lang.ClassLoader,boolean)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.lang.ClassFormatError: void <init>(java.lang.String)>
<java.lang.ClassLoader$2: java.lang.Object nextElement()>
<java.lang.ClassLoader$2: void <init>(java.util.Enumeration)>
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClassCond(java.lang.String,byte[],int,int,java.security.ProtectionDomain,boolean)>
<java.lang.ClassLoader: java.lang.Class defineClassCond(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain,boolean)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>
<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>
<java.lang.ClassLoader: java.security.ProtectionDomain getDefaultDomain()>
<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>
<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.ConditionalSpecialCasing$Entry: char[] getLowerCase()>
<java.lang.ConditionalSpecialCasing$Entry: char[] getUpperCase()>
<java.lang.ConditionalSpecialCasing$Entry: java.lang.String getLanguage()>
<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>
<java.lang.ConditionalSpecialCasing: boolean isConditionMet(java.lang.String,int,java.util.Locale,int)>
<java.lang.ConditionalSpecialCasing: boolean isFinalCased(java.lang.String,int,java.util.Locale)>
<java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>
<java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>
<java.lang.ConditionalSpecialCasing: char[] toUpperCaseCharArray(java.lang.String,int,java.util.Locale)>
<java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>
<java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>
<java.lang.Double: double parseDouble(java.lang.String)>
<java.lang.Double: java.lang.String toHexString(double)>
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.lang.Enum: java.lang.String name()>
<java.lang.Enum: java.lang.String toString()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.Error: void <init>()>
<java.lang.Error: void <init>(java.lang.String)>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.IllegalAccessError: void <init>(java.lang.String)>
<java.lang.IllegalAccessException: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.InheritableThreadLocal: java.lang.Object childValue(java.lang.Object)>
<java.lang.InheritableThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>
<java.lang.InstantiationException: void <init>()>
<java.lang.InstantiationException: void <init>(java.lang.String)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.lang.Integer: java.lang.String toUnsignedString(int,int)>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(java.lang.String)>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<java.lang.NoSuchFieldException: void <init>(java.lang.String)>
<java.lang.NoSuchMethodError: void <init>(java.lang.String)>
<java.lang.NoSuchMethodException: void <init>(java.lang.String)>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.lang.NumberFormatException: void <init>(java.lang.String)>
<java.lang.Object: java.lang.Object clone()>
<java.lang.OutOfMemoryError: void <init>(java.lang.String)>
<java.lang.Package$1: java.lang.Object run()>
<java.lang.Package$1: void <init>(java.lang.String,java.lang.String)>
<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>
<java.lang.Package: java.lang.Package getPackage(java.lang.Class)>
<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>
<java.lang.Package: java.lang.String getName()>
<java.lang.Package: java.util.jar.Manifest access$100(java.lang.String)>
<java.lang.Package: java.util.jar.Manifest loadManifest(java.lang.String)>
<java.lang.Package: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>
<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>
<java.lang.ProcessBuilder: java.lang.Process start()>
<java.lang.ProcessBuilder: void <init>(java.lang.String[])>
<java.lang.ProcessEnvironment$ExternalData: byte[] getBytes()>
<java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.lang.ProcessEnvironment$ExternalData: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>
<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>
<java.lang.ProcessEnvironment$StringEntry: void <init>(java.util.Map$Entry)>
<java.lang.ProcessEnvironment$StringEntrySet$1: void <init>(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.lang.ProcessEnvironment$StringEntrySet: java.util.Set access$500(java.lang.ProcessEnvironment$StringEntrySet)>
<java.lang.ProcessEnvironment$StringEntrySet: void <init>(java.util.Set)>
<java.lang.ProcessEnvironment$StringEnvironment: boolean containsKey(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: byte[] toEnvironmentBlock(int[])>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String put(java.lang.String,java.lang.String)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String toString(java.lang.ProcessEnvironment$Value)>
<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>
<java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>
<java.lang.ProcessEnvironment$StringValues$1: void <init>(java.lang.ProcessEnvironment$StringValues)>
<java.lang.ProcessEnvironment$StringValues: boolean contains(java.lang.Object)>
<java.lang.ProcessEnvironment$StringValues: java.util.Collection access$700(java.lang.ProcessEnvironment$StringValues)>
<java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<java.lang.ProcessEnvironment$StringValues: void <init>(java.util.Collection)>
<java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.Object)>
<java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.String)>
<java.lang.ProcessEnvironment$Value: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.Object)>
<java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.String)>
<java.lang.ProcessEnvironment$Variable: void <init>(java.lang.String,byte[])>
<java.lang.ProcessEnvironment: java.util.Map emptyEnvironment(int)>
<java.lang.ProcessImpl: java.lang.Process start(java.lang.String[],java.util.Map,java.lang.String,boolean)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>
<java.lang.RuntimeException: void <init>()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.RuntimePermission: void <init>(java.lang.String)>
<java.lang.RuntimePermission: void <init>(java.lang.String,java.lang.String)>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.SecurityManager$1: java.lang.Object run()>
<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.SecurityManager: void checkDelete(java.lang.String)>
<java.lang.SecurityManager: void checkExec(java.lang.String)>
<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
<java.lang.SecurityManager: void checkPropertiesAccess()>
<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>
<java.lang.SecurityManager: void checkRead(java.lang.String)>
<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>
<java.lang.SecurityManager: void checkWrite(java.lang.String)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: byte[] getBytes(java.lang.String)>
<java.lang.String: java.lang.CharSequence subSequence(int,int)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String toString()>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: java.lang.String trim()>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.lang.String: void <init>(byte[],java.lang.String)>
<java.lang.String: void <init>(int,int,char[])>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.String: void <init>(java.lang.StringBuffer)>
<java.lang.StringCoding$StringDecoder: char[] decode(byte[],int,int)>
<java.lang.StringCoding$StringDecoder: java.lang.String charsetName()>
<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName()>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringCoding$StringEncoder: java.lang.String charsetName()>
<java.lang.StringCoding$StringEncoder: java.lang.String requestedCharsetName()>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.lang.StringCoding: byte[] encode(char[],int,int)>
<java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>
<java.lang.StringCoding: char[] decode(byte[],int,int)>
<java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>
<java.lang.StringCoding: java.lang.Object deref(java.lang.ThreadLocal)>
<java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>
<java.lang.StringCoding: void set(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<java.lang.SystemClassLoaderAction: java.lang.Object run()>
<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.String)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<java.lang.Thread: void run()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadGroup: void <init>(java.lang.Void,java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadLocal$ThreadLocalMap$Entry: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: int expungeStaleEntry(int)>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal$ThreadLocalMap)>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: void access$100(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal$ThreadLocalMap: void replaceStaleEntry(java.lang.ThreadLocal,java.lang.Object,int)>
<java.lang.ThreadLocal$ThreadLocalMap: void resize()>
<java.lang.ThreadLocal$ThreadLocalMap: void set(java.lang.ThreadLocal,java.lang.Object)>
<java.lang.ThreadLocal: java.lang.Object get()>
<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)>
<java.lang.ThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>
<java.lang.ThreadLocal: void set(java.lang.Object)>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.String toString()>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.lang.UNIXProcess$1$1$1: java.lang.Object run()>
<java.lang.UNIXProcess$1$1: void <init>(java.lang.UNIXProcess$1,java.lang.String)>
<java.lang.UNIXProcess$1: java.lang.Object run()>
<java.lang.UNIXProcess: java.io.InputStream access$702(java.lang.UNIXProcess,java.io.InputStream)>
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.lang.UnsupportedOperationException: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.VirtualMachineError: void <init>(java.lang.String)>
<java.lang.ref.FinalReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.Finalizer$FinalizerThread: void <init>(java.lang.ThreadGroup)>
<java.lang.ref.Reference$ReferenceHandler: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ref.Reference: java.lang.Object get()>
<java.lang.ref.Reference: void <init>(java.lang.Object)>
<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.ReferenceQueue: boolean enqueue(java.lang.ref.Reference)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>
<java.lang.ref.SoftReference: java.lang.Object get()>
<java.lang.ref.SoftReference: void <init>(java.lang.Object)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>
<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>
<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>
<java.lang.reflect.Proxy: java.lang.Class getProxyClass0(java.lang.ClassLoader,java.lang.Class[])>
<java.lang.reflect.ReflectAccess: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>
<java.math.BigDecimal: java.math.BigDecimal divideAndRound(long,java.math.BigInteger,long,java.math.BigInteger,int,int,int)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>
<java.math.BigDecimal: java.math.BigDecimal stripZerosToMatchScale(long)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>
<java.math.BigDecimal: java.math.BigInteger bigMultiplyPowerTen(int)>
<java.math.BigDecimal: java.math.BigInteger inflate()>
<java.math.BigDecimal: java.math.BigInteger unscaledValue()>
<java.math.BigDecimal: void <init>(java.math.BigInteger)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,long,int,int)>
<java.math.BigDecimal: void roundThis(java.math.MathContext)>
<java.math.BigInteger: java.lang.String toString()>
<java.math.BigInteger: java.lang.String toString(int)>
<java.math.BigInteger: java.math.BigInteger abs()>
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger multiply(long)>
<java.math.BigInteger: java.math.BigInteger negate()>
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>
<java.math.BigInteger: void <init>(char[])>
<java.math.BigInteger: void <init>(int[],int)>
<java.math.BigInteger: void <init>(java.lang.String,int)>
<java.math.MutableBigInteger: int[] getMagnitudeArray()>
<java.math.MutableBigInteger: java.math.BigDecimal toBigDecimal(int,int)>
<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>
<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>
<java.math.MutableBigInteger: java.math.MutableBigInteger divideMagnitude(int[],java.math.MutableBigInteger)>
<java.math.MutableBigInteger: void <init>(int[])>
<java.math.MutableBigInteger: void setValue(int[],int)>
<java.net.Inet6Address: byte[] getAddress()>
<java.net.Inet6Address: void <init>(java.lang.String,byte[])>
<java.net.Inet6Address: void <init>(java.lang.String,byte[],int)>
<java.net.Inet6Address: void <init>(java.lang.String,byte[],java.lang.String)>
<java.net.Inet6Address: void initif(java.lang.String,byte[],java.net.NetworkInterface)>
<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>
<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.lang.Object)>
<java.net.InetAddress$Cache: java.net.InetAddress$CacheEntry get(java.lang.String)>
<java.net.InetAddress$Cache: void <init>(java.net.InetAddress$Cache$Type)>
<java.net.InetAddress$CacheEntry: void <init>(java.lang.Object,long)>
<java.net.InetAddress: java.lang.Object checkLookupTable(java.lang.String)>
<java.net.InetAddress: java.lang.Object getAddressFromNameService(java.lang.String,java.net.InetAddress)>
<java.net.InetAddress: java.lang.Object getCachedAddress(java.lang.String)>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>
<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>
<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>
<java.net.InetAddress: void cacheAddress(java.lang.String,java.lang.Object,boolean)>
<java.net.InetAddress: void cacheInitIfNeeded()>
<java.net.InetAddress: void updateLookupTable(java.lang.String)>
<java.net.MalformedURLException: void <init>(java.lang.String)>
<java.net.NetPermission: void <init>(java.lang.String)>
<java.net.NetPermission: void <init>(java.lang.String,java.lang.String)>
<java.net.Parts: java.lang.String getPath()>
<java.net.Parts: java.lang.String getQuery()>
<java.net.Parts: java.lang.String getRef()>
<java.net.Parts: void <init>(java.lang.String)>
<java.net.SocketPermission: boolean authorized(java.lang.String,byte[])>
<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>
<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>
<java.net.SocketPermission: boolean isUntrusted()>
<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>
<java.net.SocketPermission: int[] parsePort(java.lang.String)>
<java.net.SocketPermission: java.lang.String fragment(java.lang.String)>
<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>
<java.net.SocketPermission: java.security.PermissionCollection newPermissionCollection()>
<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<java.net.SocketPermission: void getCanonName()>
<java.net.SocketPermission: void getIP()>
<java.net.SocketPermission: void init(java.lang.String,int)>
<java.net.SocketPermissionCollection: java.util.Enumeration elements()>
<java.net.SocketPermissionCollection: void <init>()>
<java.net.SocketPermissionCollection: void add(java.security.Permission)>
<java.net.URI$Parser: int parseAuthority(int,int)>
<java.net.URI$Parser: int parseHierarchical(int,int)>
<java.net.URI$Parser: int parseHostname(int,int)>
<java.net.URI$Parser: int parseIPv4Address(int,int)>
<java.net.URI$Parser: int parseServer(int,int)>
<java.net.URI$Parser: java.lang.String substring(int,int)>
<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>
<java.net.URI$Parser: void parse(boolean)>
<java.net.URI: java.lang.String access$002(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$1002(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String access$702(java.net.URI,java.lang.String)>
<java.net.URI: java.lang.String decode(java.lang.String)>
<java.net.URI: java.lang.String getAuthority()>
<java.net.URI: java.lang.String getHost()>
<java.net.URI: java.lang.String getPath()>
<java.net.URI: java.lang.String getQuery()>
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.lang.String getUserInfo()>
<java.net.URI: java.lang.String quote(java.lang.String,long,long)>
<java.net.URI: java.lang.String toString()>
<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.net.URL toURL()>
<java.net.URI: void <init>(java.lang.String)>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>
<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URI: void defineSchemeSpecificPart()>
<java.net.URISyntaxException: java.lang.String getReason()>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.net.URL: java.lang.String getFile()>
<java.net.URL: java.lang.String getHost()>
<java.net.URL: java.lang.String getProtocol()>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: void <init>(java.lang.String)>
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<java.net.URLClassLoader$1: java.lang.Object run()>
<java.net.URLClassLoader$1: void <init>(java.net.URLClassLoader,java.lang.String)>
<java.net.URLClassLoader$2: java.lang.Object run()>
<java.net.URLClassLoader$2: void <init>(java.net.URLClassLoader,java.lang.String)>
<java.net.URLClassLoader$3$1: java.lang.Object run()>
<java.net.URLClassLoader$3: boolean next()>
<java.net.URLClassLoader$3: java.lang.Object nextElement()>
<java.net.URLClassLoader$3: java.net.URL nextElement()>
<java.net.URLClassLoader$3: void <init>(java.net.URLClassLoader,java.util.Enumeration)>
<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>
<java.net.URLClassLoader: java.lang.Class access$000(java.net.URLClassLoader,java.lang.String,sun.misc.Resource,boolean)>
<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource,boolean)>
<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>
<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>
<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
<java.net.URLClassLoader: java.net.URL[] getURLs()>
<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.net.URLStreamHandlerFactory)>
<java.net.URLClassLoader: void addURL(java.net.URL)>
<java.net.UnknownHostException: void <init>(java.lang.String)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.Buffer: void <init>(int,int,int,int)>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>
<java.nio.CharBuffer: char[] array()>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.nio.CharBuffer: void <init>(int,int,int,int)>
<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer compact()>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.HeapByteBuffer: void <init>(byte[],int,int)>
<java.nio.HeapByteBuffer: void <init>(int,int)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<java.nio.HeapCharBuffer: void <init>(char[],int,int)>
<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>
<java.nio.HeapCharBuffer: void <init>(int,int)>
<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int)>
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<java.nio.charset.Charset: java.lang.String name()>
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset lookup2(java.lang.String)>
<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>
<java.nio.charset.Charset: void cache(java.lang.String,java.nio.charset.Charset)>
<java.nio.charset.Charset: void checkName(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float,java.lang.String)>
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>
<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>
<java.security.AccessControlContext: java.security.AccessControlContext goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)>
<java.security.AccessControlContext: java.security.AccessControlContext optimize()>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>
<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>
<java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.security.BasicPermission: int hashCode()>
<java.security.BasicPermission: java.lang.String getCanonicalName()>
<java.security.BasicPermission: java.security.PermissionCollection newPermissionCollection()>
<java.security.BasicPermission: void <init>(java.lang.String)>
<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>
<java.security.BasicPermission: void init(java.lang.String)>
<java.security.BasicPermissionCollection: java.util.Enumeration elements()>
<java.security.BasicPermissionCollection: void <init>()>
<java.security.BasicPermissionCollection: void add(java.security.Permission)>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>
<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>
<java.security.CodeSource: java.net.URL getLocation()>
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>
<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>
<java.security.DigestException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String)>
<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String)>
<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>
<java.security.InvalidParameterException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String)>
<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.KeyException: void <init>(java.lang.Throwable)>
<java.security.KeyFactory: void <init>(java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String)>
<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>
<java.security.MessageDigest: java.lang.String getAlgorithm()>
<java.security.MessageDigest: java.lang.String toString()>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>
<java.security.MessageDigest: void <init>(java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>
<java.security.NoSuchProviderException: void <init>(java.lang.String)>
<java.security.Permission: java.lang.String getName()>
<java.security.Permission: void <init>(java.lang.String)>
<java.security.PermissionCollection: java.lang.String toString()>
<java.security.Permissions: java.security.PermissionCollection getPermissionCollection(java.security.Permission,boolean)>
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.Permission)>
<java.security.Permissions: java.util.Enumeration elements()>
<java.security.Permissions: void <init>()>
<java.security.Permissions: void add(java.security.Permission)>
<java.security.PermissionsEnumerator: boolean hasMoreElements()>
<java.security.PermissionsEnumerator: java.lang.Object nextElement()>
<java.security.PermissionsEnumerator: java.security.Permission nextElement()>
<java.security.PermissionsEnumerator: java.util.Enumeration getNextEnumWithMore()>
<java.security.PermissionsEnumerator: void <init>(java.util.Iterator)>
<java.security.PermissionsHash: boolean implies(java.security.Permission)>
<java.security.PermissionsHash: java.util.Enumeration elements()>
<java.security.PermissionsHash: void <init>()>
<java.security.PermissionsHash: void add(java.security.Permission)>
<java.security.ProtectionDomain$1: java.lang.Object run()>
<java.security.ProtectionDomain$Key: void <init>(java.security.ProtectionDomain)>
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.security.ProtectionDomain: java.security.PermissionCollection mergePermissions()>
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<java.security.Provider$Service: boolean hasKeyAttributes()>
<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>
<java.security.Provider$Service: java.lang.Class getImplClass()>
<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<java.security.Provider$Service: java.lang.String access$302(java.security.Provider$Service,java.lang.String)>
<java.security.Provider$Service: java.lang.String access$402(java.security.Provider$Service,java.lang.String)>
<java.security.Provider$Service: java.lang.String access$602(java.security.Provider$Service,java.lang.String)>
<java.security.Provider$Service: java.lang.String getAlgorithm()>
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>
<java.security.Provider$Service: java.lang.String getClassName()>
<java.security.Provider$Service: java.lang.String getType()>
<java.security.Provider$Service: java.lang.String toString()>
<java.security.Provider$Service: java.security.Provider getProvider()>
<java.security.Provider$Service: void <init>(java.security.Provider)>
<java.security.Provider$Service: void <init>(java.security.Provider,java.security.Provider$1)>
<java.security.Provider$Service: void addAlias(java.lang.String)>
<java.security.Provider$Service: void addAttribute(java.lang.String,java.lang.String)>
<java.security.Provider$ServiceKey: void <init>(java.lang.String,java.lang.String,boolean)>
<java.security.Provider$ServiceKey: void <init>(java.lang.String,java.lang.String,boolean,java.security.Provider$1)>
<java.security.Provider$UString: java.lang.String toString()>
<java.security.Provider$UString: void <init>(java.lang.String)>
<java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.security.Provider: java.lang.Object implPut(java.lang.Object,java.lang.Object)>
<java.security.Provider: java.lang.Object implRemove(java.lang.Object)>
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.security.Provider: java.lang.Object remove(java.lang.Object)>
<java.security.Provider: java.lang.String getEngineName(java.lang.String)>
<java.security.Provider: java.lang.String getName()>
<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<java.security.Provider: java.util.Collection values()>
<java.security.Provider: java.util.Set entrySet()>
<java.security.Provider: java.util.Set getServices()>
<java.security.Provider: java.util.Set keySet()>
<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>
<java.security.Provider: void ensureLegacyParsed()>
<java.security.Provider: void implPutAll(java.util.Map)>
<java.security.Provider: void parseLegacyPut(java.lang.String,java.lang.String)>
<java.security.Provider: void putAll(java.util.Map)>
<java.security.Provider: void putId()>
<java.security.Provider: void removeInvalidServices(java.util.Map)>
<java.security.ProviderException: void <init>(java.lang.String)>
<java.security.ProviderException: void <init>(java.lang.Throwable)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>
<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>
<java.security.SecureClassLoader: void <init>(java.lang.ClassLoader)>
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)>
<java.security.Security: java.lang.String getProperty(java.lang.String)>
<java.security.SecurityPermission: void <init>(java.lang.String)>
<java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>
<java.security.Signature: boolean isSpi(java.security.Provider$Service)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String)>
<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.Timestamp: java.util.Date getTimestamp()>
<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>
<java.security.UnresolvedPermission: java.security.PermissionCollection newPermissionCollection()>
<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>
<java.security.UnresolvedPermissionCollection: java.util.Enumeration elements()>
<java.security.UnresolvedPermissionCollection: java.util.List getUnresolvedPermissions(java.security.Permission)>
<java.security.UnresolvedPermissionCollection: void <init>()>
<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>
<java.security.cert.CRLException: void <init>(java.lang.String)>
<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>
<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>
<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>
<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>
<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()>
<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>
<java.security.cert.PKIXParameters: java.lang.Object clone()>
<java.security.cert.PKIXParameters: void <init>(java.util.Set)>
<java.security.cert.PKIXParameters: void addCertStore(java.security.cert.CertStore)>
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)>
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set)>
<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>
<java.security.cert.TrustAnchor: void setNameConstraints(byte[])>
<java.security.cert.X509CertSelector: java.lang.Object clone()>
<java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>
<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>
<java.text.AttributeEntry: java.lang.Object getKey()>
<java.text.AttributeEntry: java.lang.Object getValue()>
<java.text.AttributeEntry: java.lang.String toString()>
<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>
<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>
<java.text.AttributedString$AttributeMap: void <init>(java.text.AttributedString,int,int,int)>
<java.text.AttributedString$AttributedStringIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>
<java.text.AttributedString$AttributedStringIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>
<java.text.AttributedString$AttributedStringIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>
<java.text.AttributedString$AttributedStringIterator: java.util.Map getAttributes()>
<java.text.AttributedString$AttributedStringIterator: java.util.Set getAllAttributeKeys()>
<java.text.AttributedString$AttributedStringIterator: void <init>(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute[],int,int)>
<java.text.AttributedString: boolean access$200(java.lang.Object,java.lang.Object)>
<java.text.AttributedString: boolean mapsDiffer(java.util.Map,java.util.Map)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>
<java.text.AttributedString: int ensureRunBreak(int,boolean)>
<java.text.AttributedString: java.lang.Object access$100(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int)>
<java.text.AttributedString: java.lang.Object access$400(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int,int,int)>
<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>
<java.text.AttributedString: java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute,int,int,int)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)>
<java.text.AttributedString: void <init>(java.lang.String)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator[])>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.text.AttributedString: void createRunAttributeDataVectors()>
<java.text.AttributedString: void setAttributes(java.util.Map,int)>
<java.text.BreakIterator$1: java.lang.Object run()>
<java.text.BreakIterator$1: void <init>(java.lang.String,java.util.Locale)>
<java.text.BreakIterator$BreakIteratorCache: java.text.BreakIterator createBreakInstance()>
<java.text.BreakIterator$BreakIteratorCache: java.util.Locale getLocale()>
<java.text.BreakIterator$BreakIteratorCache: void <init>(java.util.Locale,java.text.BreakIterator)>
<java.text.BreakIterator: java.lang.Object clone()>
<java.text.BreakIterator: java.text.BreakIterator createBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>
<java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>
<java.text.BreakIterator: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.text.BreakIterator: void setText(java.lang.String)>
<java.text.CharacterIteratorFieldDelegate: java.text.AttributedCharacterIterator getIterator(java.lang.String)>
<java.text.CharacterIteratorFieldDelegate: void <init>()>
<java.text.CharacterIteratorFieldDelegate: void formatted(int,java.text.Format$Field,java.lang.Object,int,int,java.lang.StringBuffer)>
<java.text.CharacterIteratorFieldDelegate: void formatted(java.text.Format$Field,java.lang.Object,int,int,java.lang.StringBuffer)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<java.text.DateFormatSymbols: java.lang.Object clone()>
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] toOneBasedArray(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getCachedInstance(java.util.Locale)>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstanceRef(java.util.Locale)>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getProviderInstance(java.util.Locale)>
<java.text.DateFormatSymbols: void <init>(java.util.Locale)>
<java.text.DateFormatSymbols: void copyMembers(java.text.DateFormatSymbols,java.text.DateFormatSymbols)>
<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>
<java.text.DecimalFormat: java.lang.Object clone()>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>
<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>
<java.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<java.text.DecimalFormat: java.text.FieldPosition[] expandAffix(java.lang.String)>
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativePrefixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getNegativeSuffixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getPositivePrefixFieldPositions()>
<java.text.DecimalFormat: java.text.FieldPosition[] getPositiveSuffixFieldPositions()>
<java.text.DecimalFormat: void <init>(java.lang.String)>
<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>
<java.text.DecimalFormatSymbols: java.lang.Object clone()>
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<java.text.DecimalFormatSymbols: java.lang.String getNaN()>
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>
<java.text.DictionaryBasedBreakIterator: void divideUpDictionaryRange(int,int)>
<java.text.DictionaryBasedBreakIterator: void setText(java.text.CharacterIterator)>
<java.text.DigitList: java.lang.Object clone()>
<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition)>
<java.text.FieldPosition$Delegate: void <init>(java.text.FieldPosition,java.text.FieldPosition$1)>
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>
<java.text.FieldPosition: java.text.Format$FieldDelegate getFieldDelegate()>
<java.text.FieldPosition: void <init>(java.text.Format$Field)>
<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>
<java.text.Format: java.lang.Object clone()>
<java.text.Format: java.lang.String format(java.lang.Object)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.text.AttributedCharacterIterator[])>
<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>
<java.text.MessageFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuffer[])>
<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>
<java.text.NumberFormat: java.lang.Object clone()>
<java.text.NumberFormat: java.lang.String format(double)>
<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>
<java.text.RuleBasedBreakIterator$1: java.lang.Object run()>
<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>
<java.text.RuleBasedBreakIterator$SafeCharIterator: void <init>(java.text.CharacterIterator)>
<java.text.RuleBasedBreakIterator: java.lang.Object clone()>
<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)>
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
<java.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.SimpleDateFormat: void <init>(int,int,java.util.Locale)>
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<java.text.SimpleDateFormat: void initialize(java.util.Locale)>
<java.text.SimpleDateFormat: void initializeCalendar(java.util.Locale)>
<java.text.SimpleDateFormat: void initializeDefaultCentury()>
<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>
<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>
<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>
<java.text.StringCharacterIterator: java.lang.Object clone()>
<java.text.StringCharacterIterator: void <init>(java.lang.String)>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int)>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int,int,int)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.AbstractCollection: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>
<java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>
<java.util.AbstractList$ListItr: java.lang.Object previous()>
<java.util.AbstractList$ListItr: void <init>(java.util.AbstractList,int)>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.AbstractList$ListItr: void set(java.lang.Object)>
<java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>
<java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>
<java.util.AbstractList: int indexOf(java.lang.Object)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: java.util.List subList(int,int)>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.AbstractList: void clear()>
<java.util.AbstractList: void removeRange(int,int)>
<java.util.AbstractMap$2$1: void <init>(java.util.AbstractMap$2)>
<java.util.AbstractMap$2: java.util.Iterator iterator()>
<java.util.AbstractMap$2: void <init>(java.util.AbstractMap)>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.AbstractMap: int hashCode()>
<java.util.AbstractMap: java.lang.Object clone()>
<java.util.AbstractMap: java.lang.String toString()>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.AbstractSet: boolean removeAll(java.util.Collection)>
<java.util.AbstractSet: int hashCode()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: java.lang.Object clone()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: java.lang.Object[] toArray()>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: void add(int,java.lang.Object)>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: void fastRemove(int)>
<java.util.ArrayList: void removeRange(int,int)>
<java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>
<java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<java.util.Arrays$ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
<java.util.Arrays: void sort(java.lang.Object[])>
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<java.util.Arrays: void swap(java.lang.Object[],int,int)>
<java.util.BitSet: java.lang.Object clone()>
<java.util.Calendar: int get(int)>
<java.util.Calendar: java.lang.Object clone()>
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: java.util.Date getTime()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<java.util.Calendar: java.util.TimeZone getZone()>
<java.util.Calendar: long getTimeInMillis()>
<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: void complete()>
<java.util.Calendar: void setTimeZone(java.util.TimeZone)>
<java.util.Calendar: void setWeekCountData(java.util.Locale)>
<java.util.Calendar: void updateTime()>
<java.util.Collections$1: java.lang.Object nextElement()>
<java.util.Collections$1: void <init>(java.util.Collection)>
<java.util.Collections$EmptySet$1: void <init>(java.util.Collections$EmptySet)>
<java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.Collections$SingletonList: void <init>(java.lang.Object)>
<java.util.Collections$SingletonSet$1: java.lang.Object next()>
<java.util.Collections$SingletonSet$1: void <init>(java.util.Collections$SingletonSet)>
<java.util.Collections$SingletonSet: java.lang.Object access$400(java.util.Collections$SingletonSet)>
<java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean containsAll(java.util.Collection)>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>
<java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedList: int hashCode()>
<java.util.Collections$SynchronizedList: int indexOf(java.lang.Object)>
<java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<java.util.Collections$SynchronizedList: java.util.List subList(int,int)>
<java.util.Collections$SynchronizedList: java.util.ListIterator listIterator(int)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List,java.lang.Object)>
<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.util.Collection values()>
<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.Collections$SynchronizedRandomAccessList: java.util.List subList(int,int)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>
<java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>
<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: boolean containsAll(java.util.Collection)>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableList$1: void <init>(java.util.Collections$UnmodifiableList,int)>
<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableList: int hashCode()>
<java.util.Collections$UnmodifiableList: int indexOf(java.lang.Object)>
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>
<java.util.Collections$UnmodifiableList: java.util.ListIterator listIterator()>
<java.util.Collections$UnmodifiableList: java.util.ListIterator listIterator(int)>
<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: void <init>(java.util.Map$Entry)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void <init>(java.util.Set)>
<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: int hashCode()>
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>
<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>
<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>
<java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<java.util.Collections: boolean access$000(java.lang.Object,java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection,java.lang.Object)>
<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>
<java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Collections: java.util.List synchronizedList(java.util.List,java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.Set singleton(java.lang.Object)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set,java.lang.Object)>
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.Collections: void reverse(java.util.List)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Collections: void swap(java.util.List,int,int)>
<java.util.ConcurrentModificationException: void <init>()>
<java.util.ConcurrentModificationException: void <init>(java.lang.String)>
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<java.util.Currency: java.util.Currency getInstance(java.lang.String)>
<java.util.Currency: java.util.Currency getInstance(java.lang.String,int)>
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>
<java.util.Date: java.lang.String toString()>
<java.util.Date: long getMillisOf(java.util.Date)>
<java.util.Date: sun.util.calendar.BaseCalendar$Date normalize()>
<java.util.Date: sun.util.calendar.BaseCalendar$Date normalize(sun.util.calendar.BaseCalendar$Date)>
<java.util.Date: void <init>(int,int,int,int,int,int)>
<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>
<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>
<java.util.Formatter$FixedString: java.lang.String toString()>
<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>
<java.util.Formatter$FormatSpecifier: char getZero(java.util.Locale)>
<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>
<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>
<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>
<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>
<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.Formatter,java.lang.String[])>
<java.util.Formatter$FormatSpecifier: void print(byte,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(float,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(int,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>
<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>
<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void print(short,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void printDateTime(java.lang.Object,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void printFloat(java.lang.Object,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void printInteger(java.lang.Object,java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>
<java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>
<java.util.Formatter: java.lang.Appendable out()>
<java.util.Formatter: java.lang.String toString()>
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>
<java.util.Formatter: java.util.Locale locale()>
<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<java.util.Formatter: void init(java.lang.Appendable,java.util.Locale)>
<java.util.Formatter: void setZero()>
<java.util.GregorianCalendar: int actualMonthLength()>
<java.util.GregorianCalendar: int computeFields(int,int)>
<java.util.GregorianCalendar: int getActualMaximum(int)>
<java.util.GregorianCalendar: int getActualMinimum(int)>
<java.util.GregorianCalendar: int getLeastMaximum(int)>
<java.util.GregorianCalendar: int getMaximum(int)>
<java.util.GregorianCalendar: java.lang.Object clone()>
<java.util.GregorianCalendar: java.util.GregorianCalendar getNormalizedCalendar()>
<java.util.GregorianCalendar: java.util.TimeZone getTimeZone()>
<java.util.GregorianCalendar: long getCurrentFixedDate()>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.GregorianCalendar: void add(int,int)>
<java.util.GregorianCalendar: void computeTime()>
<java.util.GregorianCalendar: void pinDayOfMonth()>
<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>
<java.util.HashMap$Entry: boolean equals(java.lang.Object)>
<java.util.HashMap$Entry: int hashCode()>
<java.util.HashMap$Entry: java.lang.Object getKey()>
<java.util.HashMap$Entry: java.lang.Object getValue()>
<java.util.HashMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$HashIterator: java.util.HashMap$Entry nextEntry()>
<java.util.HashMap$HashIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$HashIterator: void remove()>
<java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$KeySet: boolean contains(java.lang.Object)>
<java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap)>
<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap$Values: boolean contains(java.lang.Object)>
<java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.HashMap$Values: void <init>(java.util.HashMap)>
<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>
<java.util.HashMap: java.lang.Object clone()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object getForNullKey()>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object putForNullKey(java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>
<java.util.HashMap: java.util.Iterator newEntryIterator()>
<java.util.HashMap: java.util.Iterator newKeyIterator()>
<java.util.HashMap: java.util.Iterator newValueIterator()>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: java.util.Set entrySet0()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int,float)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.HashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashMap: void putAllForCreate(java.util.Map)>
<java.util.HashMap: void putForCreate(java.lang.Object,java.lang.Object)>
<java.util.HashMap: void resize(int)>
<java.util.HashMap: void transfer(java.util.HashMap$Entry[])>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.HashSet: java.lang.Object clone()>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>()>
<java.util.HashSet: void <init>(int)>
<java.util.HashSet: void <init>(int,float)>
<java.util.HashSet: void <init>(int,float,boolean)>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: int hashCode()>
<java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.Hashtable$Entry: java.lang.String toString()>
<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>
<java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>
<java.util.Hashtable$KeySet: boolean contains(java.lang.Object)>
<java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable)>
<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable$ValueCollection: boolean contains(java.lang.Object)>
<java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable)>
<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable,java.util.Hashtable$1)>
<java.util.Hashtable: boolean contains(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: boolean containsValue(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>
<java.util.Hashtable: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Enumeration getEnumeration(int)>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>
<java.util.Hashtable: java.util.Iterator access$100(java.util.Hashtable,int)>
<java.util.Hashtable: java.util.Iterator getIterator(int)>
<java.util.Hashtable: java.util.Set entrySet()>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.Hashtable: void <init>(int,float)>
<java.util.Hashtable: void rehash()>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$IdentityHashMapIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap)>
<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>
<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object access$600(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object unmaskNull(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object[] access$100(java.util.IdentityHashMap)>
<java.util.IdentityHashMap: java.util.Set keySet()>
<java.util.IdentityHashMap: void closeDeletion(int)>
<java.util.IdentityHashMap: void init(int)>
<java.util.IdentityHashMap: void resize(int)>
<java.util.IllegalFormatException: void <init>()>
<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>
<java.util.JapaneseImperialCalendar: int computeFields(int,int)>
<java.util.JapaneseImperialCalendar: int getMaximum(int)>
<java.util.JapaneseImperialCalendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<java.util.JapaneseImperialCalendar: java.util.TimeZone getTimeZone()>
<java.util.JapaneseImperialCalendar: long getFixedDate(int,int,int)>
<java.util.JapaneseImperialCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long)>
<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.JapaneseImperialCalendar: void add(int,int)>
<java.util.JapaneseImperialCalendar: void pinDayOfMonth(sun.util.calendar.LocalGregorianCalendar$Date)>
<java.util.JapaneseImperialCalendar: void setTimeZone(java.util.TimeZone)>
<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.LinkedHashMap$Entry: void access$600(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$Entry: void addBefore(java.util.LinkedHashMap$Entry)>
<java.util.LinkedHashMap$Entry: void recordAccess(java.util.HashMap)>
<java.util.LinkedHashMap$Entry: void remove()>
<java.util.LinkedHashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry()>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap$LinkedHashIterator: void remove()>
<java.util.LinkedHashMap$ValueIterator: java.lang.Object next()>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap)>
<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.LinkedHashMap: java.util.Iterator newEntryIterator()>
<java.util.LinkedHashMap: java.util.Iterator newKeyIterator()>
<java.util.LinkedHashMap: java.util.Iterator newValueIterator()>
<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>
<java.util.LinkedHashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.LinkedHashMap: void clear()>
<java.util.LinkedHashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>
<java.util.LinkedHashMap: void init()>
<java.util.LinkedHashMap: void transfer(java.util.HashMap$Entry[])>
<java.util.LinkedList$Entry: void <init>(java.lang.Object,java.util.LinkedList$Entry,java.util.LinkedList$Entry)>
<java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.LinkedList$ListItr: java.lang.Object previous()>
<java.util.LinkedList$ListItr: void <init>(java.util.LinkedList,int)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.util.LinkedList$ListItr: void remove()>
<java.util.LinkedList$ListItr: void set(java.lang.Object)>
<java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>
<java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.util.LinkedList: boolean contains(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>
<java.util.LinkedList: java.lang.Object access$200(java.util.LinkedList,java.util.LinkedList$Entry)>
<java.util.LinkedList: java.lang.Object element()>
<java.util.LinkedList: java.lang.Object get(int)>
<java.util.LinkedList: java.lang.Object getFirst()>
<java.util.LinkedList: java.lang.Object getLast()>
<java.util.LinkedList: java.lang.Object remove()>
<java.util.LinkedList: java.lang.Object remove(int)>
<java.util.LinkedList: java.lang.Object remove(java.util.LinkedList$Entry)>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.LinkedList: java.lang.Object removeLast()>
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<java.util.LinkedList: java.lang.Object[] toArray()>
<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.LinkedList: java.util.LinkedList$Entry access$000(java.util.LinkedList)>
<java.util.LinkedList: java.util.LinkedList$Entry access$300(java.util.LinkedList,java.lang.Object,java.util.LinkedList$Entry)>
<java.util.LinkedList: java.util.LinkedList$Entry addBefore(java.lang.Object,java.util.LinkedList$Entry)>
<java.util.LinkedList: java.util.LinkedList$Entry entry(int)>
<java.util.LinkedList: java.util.ListIterator listIterator(int)>
<java.util.LinkedList: void <init>()>
<java.util.LinkedList: void <init>(java.util.Collection)>
<java.util.LinkedList: void add(int,java.lang.Object)>
<java.util.LinkedList: void addFirst(java.lang.Object)>
<java.util.LinkedList: void addLast(java.lang.Object)>
<java.util.LinkedList: void clear()>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String)>
<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>
<java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.MissingFormatWidthException: void <init>(java.lang.String)>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.NoSuchElementException: void <init>()>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.Properties: java.lang.String loadConvert(char[],int,int,char[])>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.util.Properties: void enumerate(java.util.Hashtable)>
<java.util.PropertyPermission: java.security.PermissionCollection newPermissionCollection()>
<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>
<java.util.PropertyPermissionCollection: java.util.Enumeration elements()>
<java.util.PropertyPermissionCollection: void <init>()>
<java.util.PropertyPermissionCollection: void add(java.security.Permission)>
<java.util.PropertyResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>
<java.util.PropertyResourceBundle: void <init>(java.io.InputStream)>
<java.util.RandomAccessSubList: java.util.List subList(int,int)>
<java.util.RandomAccessSubList: void <init>(java.util.AbstractList,int,int)>
<java.util.ResourceBundle$BundleReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.util.ResourceBundle$BundleReference: void <init>(java.util.ResourceBundle,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>
<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>
<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>
<java.util.ResourceBundle$CacheKey: java.lang.String getName()>
<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>
<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>
<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<java.util.ResourceBundle$LoaderReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.util.ResourceBundle$LoaderReference: void <init>(java.lang.ClassLoader,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>
<java.util.ResourceBundle: java.util.Locale getLocale()>
<java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>
<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>
<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>
<java.util.ResourceBundle: java.util.ResourceBundle putBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle,java.util.ResourceBundle$Control)>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String)>
<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.ServiceLoader$1: java.lang.Object next()>
<java.util.ServiceLoader$1: void <init>(java.util.ServiceLoader)>
<java.util.ServiceLoader$LazyIterator: boolean hasNext()>
<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>
<java.util.ServiceLoader$LazyIterator: void <init>(java.util.ServiceLoader,java.lang.Class,java.lang.ClassLoader)>
<java.util.ServiceLoader$LazyIterator: void <init>(java.util.ServiceLoader,java.lang.Class,java.lang.ClassLoader,java.util.ServiceLoader$1)>
<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>
<java.util.ServiceLoader: java.util.LinkedHashMap access$400(java.util.ServiceLoader)>
<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>
<java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>
<java.util.ServiceLoader: void <init>(java.lang.Class,java.lang.ClassLoader)>
<java.util.ServiceLoader: void reload()>
<java.util.SimpleTimeZone: int getOffset(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,long)>
<java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.util.SimpleTimeZone: long getEnd(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>
<java.util.SimpleTimeZone: long getStart(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>
<java.util.SimpleTimeZone: long getTransition(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>
<java.util.Stack: java.lang.Object peek()>
<java.util.Stack: java.lang.Object pop()>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<java.util.StringTokenizer: java.lang.Object nextElement()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.SubList$1: java.lang.Object next()>
<java.util.SubList$1: void <init>(java.util.SubList,int)>
<java.util.SubList$1: void set(java.lang.Object)>
<java.util.SubList: java.lang.Object get(int)>
<java.util.SubList: java.lang.Object remove(int)>
<java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<java.util.SubList: java.util.Iterator iterator()>
<java.util.SubList: java.util.List subList(int,int)>
<java.util.SubList: java.util.ListIterator listIterator(int)>
<java.util.SubList: void <init>(java.util.AbstractList,int,int)>
<java.util.SubList: void add(int,java.lang.Object)>
<java.util.SubList: void removeRange(int,int)>
<java.util.TimeZone$1: java.lang.Object run()>
<java.util.TimeZone$1: void <init>(java.lang.String)>
<java.util.TimeZone: java.lang.Object clone()>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>
<java.util.TimeZone: java.lang.String getID()>
<java.util.TimeZone: java.lang.String[] getDisplayNames(java.lang.String,java.util.Locale)>
<java.util.TimeZone: java.util.TimeZone getDefault()>
<java.util.TimeZone: java.util.TimeZone getDefaultRef()>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String,boolean)>
<java.util.TimeZone: java.util.TimeZone parseCustomTimeZone(java.lang.String)>
<java.util.TimeZone: java.util.TimeZone setDefaultZone()>
<java.util.TimeZone: void setID(java.lang.String)>
<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>
<java.util.TreeMap$Entry: java.lang.Object getKey()>
<java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>
<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>
<java.util.TreeMap$EntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap$EntrySet: void <init>(java.util.TreeMap)>
<java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.TreeMap$KeyIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.TreeMap$KeySet: void <init>(java.util.NavigableMap)>
<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry nextEntry()>
<java.util.TreeMap$PrivateEntryIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$PrivateEntryIterator: void remove()>
<java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.TreeMap$ValueIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>
<java.util.TreeMap$Values: boolean contains(java.lang.Object)>
<java.util.TreeMap$Values: java.util.Iterator iterator()>
<java.util.TreeMap$Values: void <init>(java.util.TreeMap)>
<java.util.TreeMap: boolean containsKey(java.lang.Object)>
<java.util.TreeMap: boolean containsValue(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.lang.Object firstKey()>
<java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.lang.Object lastKey()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<java.util.TreeMap: java.util.Collection values()>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.TreeMap: java.util.Iterator keyIterator()>
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>
<java.util.TreeMap: java.util.Set entrySet()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>
<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>
<java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>
<java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.TreeMap: void addAllForTreeSet(java.util.SortedSet,java.lang.Object)>
<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>
<java.util.TreeMap: void fixAfterDeletion(java.util.TreeMap$Entry)>
<java.util.TreeMap: void fixAfterInsertion(java.util.TreeMap$Entry)>
<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>
<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>
<java.util.TreeSet: boolean add(java.lang.Object)>
<java.util.TreeSet: boolean contains(java.lang.Object)>
<java.util.TreeSet: boolean remove(java.lang.Object)>
<java.util.TreeSet: java.lang.Object clone()>
<java.util.TreeSet: java.lang.Object first()>
<java.util.TreeSet: java.lang.Object last()>
<java.util.TreeSet: java.util.Comparator comparator()>
<java.util.TreeSet: java.util.Iterator iterator()>
<java.util.TreeSet: void <init>()>
<java.util.TreeSet: void <init>(java.util.Comparator)>
<java.util.TreeSet: void <init>(java.util.NavigableMap)>
<java.util.TreeSet: void <init>(java.util.SortedSet)>
<java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>
<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>
<java.util.Vector$1: java.lang.Object nextElement()>
<java.util.Vector$1: void <init>(java.util.Vector)>
<java.util.Vector: boolean add(java.lang.Object)>
<java.util.Vector: boolean addAll(int,java.util.Collection)>
<java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.Vector: boolean contains(java.lang.Object)>
<java.util.Vector: boolean containsAll(java.util.Collection)>
<java.util.Vector: boolean equals(java.lang.Object)>
<java.util.Vector: boolean remove(java.lang.Object)>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<java.util.Vector: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.Vector: java.lang.Object firstElement()>
<java.util.Vector: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object remove(int)>
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<java.util.Vector: java.lang.Object[] toArray()>
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Vector: java.lang.String toString()>
<java.util.Vector: java.util.Enumeration elements()>
<java.util.Vector: java.util.List subList(int,int)>
<java.util.Vector: void <init>(int,int)>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: void add(int,java.lang.Object)>
<java.util.Vector: void addElement(java.lang.Object)>
<java.util.Vector: void copyInto(java.lang.Object[])>
<java.util.Vector: void ensureCapacityHelper(int)>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
<java.util.Vector: void removeElementAt(int)>
<java.util.Vector: void removeRange(int,int)>
<java.util.Vector: void setElementAt(java.lang.Object,int)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: int hashCode()>
<java.util.WeakHashMap$Entry: java.lang.Object access$200(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: java.lang.Object access$202(java.util.WeakHashMap$Entry,java.lang.Object)>
<java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$100(java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry access$102(java.util.WeakHashMap$Entry,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>
<java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry()>
<java.util.WeakHashMap$HashIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$ValueIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap)>
<java.util.WeakHashMap$Values: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>
<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object access$300(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object maskNull(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object unmaskNull(java.lang.Object)>
<java.util.WeakHashMap: java.util.Collection values()>
<java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] access$500(java.util.WeakHashMap)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] getTable()>
<java.util.WeakHashMap: void <init>()>
<java.util.WeakHashMap: void expungeStaleEntries()>
<java.util.WeakHashMap: void resize(int)>
<java.util.WeakHashMap: void transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[])>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>
<java.util.concurrent.ConcurrentHashMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySet: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry[] newArray(int)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(java.lang.Object,int,java.util.concurrent.ConcurrentHashMap$HashEntry,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry()>
<java.util.concurrent.ConcurrentHashMap$HashIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.util.concurrent.ConcurrentHashMap$HashIterator: void advance()>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object get(java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object readValueUnderLock(java.util.concurrent.ConcurrentHashMap$HashEntry)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry getFirst(int)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$Segment[] newArray(int)>
<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(int,float)>
<java.util.concurrent.ConcurrentHashMap$Segment: void rehash()>
<java.util.concurrent.ConcurrentHashMap$Segment: void setTable(java.util.concurrent.ConcurrentHashMap$HashEntry[])>
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentFor(int)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>
<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>
<java.util.concurrent.Executors$RunnableAdapter: void <init>(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.FutureTask$Sync: void <init>(java.util.concurrent.FutureTask,java.util.concurrent.Callable)>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object dequeue()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>
<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor$Worker: void run()>
<java.util.concurrent.ThreadPoolExecutor: boolean addIfUnderCorePoolSize(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: boolean addIfUnderMaximumPoolSize(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: java.lang.Thread addThread(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: void ensureQueuedTaskHandled(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void finalize()>
<java.util.concurrent.ThreadPoolExecutor: void shutdown()>
<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>
<java.util.concurrent.ThreadPoolExecutor: void workerDone(java.util.concurrent.ThreadPoolExecutor$Worker)>
<java.util.concurrent.TimeUnit$1: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$2: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$3: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$4: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$5: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$6: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit$7: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>
<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit$1)>
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: long awaitNanos(long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signalAll()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>
<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
<java.util.jar.Attributes: boolean equals(java.lang.Object)>
<java.util.jar.Attributes: int hashCode()>
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>
<java.util.jar.Attributes: java.util.Collection values()>
<java.util.jar.Attributes: java.util.Set entrySet()>
<java.util.jar.Attributes: void <init>(int)>
<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>
<java.util.jar.JarEntry: void <init>(java.lang.String)>
<java.util.jar.JarException: void <init>(java.lang.String)>
<java.util.jar.JarFile$1: java.lang.Object nextElement()>
<java.util.jar.JarFile$1: java.util.jar.JarFile$JarFileEntry nextElement()>
<java.util.jar.JarFile$1: void <init>(java.util.jar.JarFile,java.util.Enumeration)>
<java.util.jar.JarFile$JarFileEntry: java.security.CodeSigner[] getCodeSigners()>
<java.util.jar.JarFile$JarFileEntry: java.security.cert.Certificate[] getCertificates()>
<java.util.jar.JarFile$JarFileEntry: void <init>(java.util.jar.JarFile,java.util.zip.ZipEntry)>
<java.util.jar.JarFile: boolean hasClassPathAttribute()>
<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.jar.JarFile: java.util.Enumeration entries()>
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>
<java.util.jar.JarFile: java.util.jar.JarEntry getManEntry()>
<java.util.jar.JarFile: java.util.jar.JarVerifier access$100(java.util.jar.JarFile)>
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>
<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>
<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.jar.JarFile: void <init>(java.lang.String)>
<java.util.jar.JarFile: void access$000(java.util.jar.JarFile)>
<java.util.jar.JarFile: void initializeVerifier()>
<java.util.jar.JarFile: void maybeInstantiateVerifier()>
<java.util.jar.JarInputStream: java.util.jar.JarEntry checkManifest(java.util.jar.JarEntry)>
<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()>
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()>
<java.util.jar.JarInputStream: java.util.zip.ZipEntry createZipEntry(java.lang.String)>
<java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream)>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream,boolean)>
<java.util.jar.JarVerifier$3: void <init>(java.util.jar.JarVerifier)>
<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>
<java.util.jar.JarVerifier: java.security.CodeSigner[] getCodeSigners(java.lang.String)>
<java.util.jar.JarVerifier: java.security.CodeSigner[] getCodeSigners(java.util.jar.JarFile,java.util.jar.JarEntry)>
<java.util.jar.JarVerifier: java.security.cert.Certificate[] getCerts(java.util.jar.JarFile,java.util.jar.JarEntry)>
<java.util.jar.JarVerifier: java.security.cert.Certificate[] mapSignersToCertArray(java.security.CodeSigner[])>
<java.util.jar.JarVerifier: void <init>(byte[])>
<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>
<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream)>
<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream,int)>
<java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.jar.Manifest: int hashCode()>
<java.util.jar.Manifest: java.lang.String parseName(byte[],int)>
<java.util.jar.Manifest: java.util.Map getEntries()>
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
<java.util.jar.Manifest: void <init>()>
<java.util.jar.Manifest: void <init>(java.io.InputStream)>
<java.util.jar.Manifest: void read(java.io.InputStream)>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByName(java.lang.String)>
<java.util.logging.Level$KnownLevel: void <init>(java.util.logging.Level)>
<java.util.logging.Level$KnownLevel: void add(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>
<java.util.logging.Level: java.lang.String getLocalizedLevelName()>
<java.util.logging.Level: java.util.logging.Level findLevel(java.lang.String)>
<java.util.logging.Level: void <init>(java.lang.String,int)>
<java.util.logging.Level: void <init>(java.lang.String,int,java.lang.String)>
<java.util.logging.LogManager$3: java.lang.Void run()>
<java.util.logging.LogManager$4: java.lang.Object run()>
<java.util.logging.LogManager$5: java.lang.Object run()>
<java.util.logging.LogManager$5: void <init>(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager$6: java.lang.Object run()>
<java.util.logging.LogManager$6: void <init>(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager$LogNode: void <init>(java.util.logging.LogManager$LogNode,java.util.logging.LogManager$LoggerContext)>
<java.util.logging.LogManager$LogNode: void walkAndSetParent(java.util.logging.Logger)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger)>
<java.util.logging.LogManager$LoggerContext: java.util.Enumeration getLoggerNames()>
<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>
<java.util.logging.LogManager$LoggerContext: void <init>()>
<java.util.logging.LogManager$LoggerContext: void <init>(java.util.logging.LogManager$1)>
<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>
<java.util.logging.LogManager$LoggerContext: void removeLogger(java.lang.String)>
<java.util.logging.LogManager$LoggerWeakRef: void <init>(java.util.logging.LogManager,java.util.logging.Logger)>
<java.util.logging.LogManager$LoggerWeakRef: void dispose()>
<java.util.logging.LogManager$LoggerWeakRef: void setNode(java.util.logging.LogManager$LogNode)>
<java.util.logging.LogManager$LoggerWeakRef: void setParentRef(java.lang.ref.WeakReference)>
<java.util.logging.LogManager$RootLogger: java.util.logging.Handler[] getHandlers()>
<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager)>
<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager,java.util.logging.LogManager$1)>
<java.util.logging.LogManager$RootLogger: void log(java.util.logging.LogRecord)>
<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>
<java.util.logging.LogManager$SystemLoggerContext: void <init>()>
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>
<java.util.logging.LogManager: boolean getBooleanProperty(java.lang.String,boolean)>
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<java.util.logging.LogManager: java.lang.String[] access$1000(java.util.logging.LogManager,java.lang.String)>
<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>
<java.util.logging.LogManager: java.util.List contexts()>
<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>
<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>
<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>
<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.logging.LogManager: void <init>()>
<java.util.logging.LogManager: void access$800(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager: void access$900(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager: void doSetLevel(java.util.logging.Logger,java.util.logging.Level)>
<java.util.logging.LogManager: void doSetParent(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.logging.LogManager: void reset()>
<java.util.logging.LogManager: void resetLogger(java.util.logging.Logger)>
<java.util.logging.LogManager: void setLevelsOnExistingLoggers()>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
<java.util.logging.Logger$1: java.lang.Object run()>
<java.util.logging.Logger$1: java.util.ResourceBundle run()>
<java.util.logging.Logger$1: void <init>(java.util.Locale)>
<java.util.logging.Logger: java.lang.String getName()>
<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String)>
<java.util.logging.Logger: java.util.ResourceBundle findSystemResourceBundle(java.util.Locale)>
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>
<java.util.logging.Logger: void config(java.lang.String)>
<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>
<java.util.logging.Logger: void doSetParent(java.util.logging.Logger)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.util.logging.Logger: void setLogManager(java.util.logging.LogManager)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<java.util.logging.Logger: void warning(java.lang.String)>
<java.util.regex.Matcher: boolean find(int)>
<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>
<java.util.regex.Matcher: java.lang.String group()>
<java.util.regex.Matcher: java.lang.String group(int)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>
<java.util.regex.Pattern$1: void <init>(java.util.regex.Pattern,java.lang.Character$UnicodeBlock)>
<java.util.regex.Pattern$3: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$4: void <init>(java.util.regex.Pattern,int,int)>
<java.util.regex.Pattern$6: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$7: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$8: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$Behind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$BehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$BitClass: java.util.regex.Pattern$BitClass add(int,int)>
<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node optimize(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$BnM: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$BnMS: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Branch: void <init>(java.util.regex.Pattern$Node,java.util.regex.Pattern$Node,java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Branch: void add(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$CharProperty$1: void <init>(java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty complement()>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty maybeComplement(boolean)>
<java.util.regex.Pattern$CharPropertyNames$4: java.util.regex.Pattern$CharProperty make()>
<java.util.regex.Pattern$CharPropertyNames$4: void <init>(java.util.regex.Pattern$CharPropertyNames$CloneableProperty)>
<java.util.regex.Pattern$CharPropertyNames: java.util.regex.Pattern$CharProperty charPropertyFor(java.lang.String)>
<java.util.regex.Pattern$Curly: void <init>(java.util.regex.Pattern$Node,int,int,int)>
<java.util.regex.Pattern$GroupCurly: void <init>(java.util.regex.Pattern$Node,int,int,int,int,int,boolean)>
<java.util.regex.Pattern$Neg: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$NotBehind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$NotBehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.regex.Pattern$Pos: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Prolog: void <init>(java.util.regex.Pattern$Loop)>
<java.util.regex.Pattern$Ques: void <init>(java.util.regex.Pattern$Node,int)>
<java.util.regex.Pattern$Start: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$StartS: void <init>(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: int escape(boolean,boolean)>
<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>
<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>
<java.util.regex.Pattern: java.lang.String toString()>
<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty bitsOrSingle(java.util.regex.Pattern$BitClass,int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty caseInsensitiveRangeFor(int,int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty charPropertyNodeFor(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty family(boolean)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty intersection(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty newSingle(int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty rangeFor(int,int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty setDifference(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeBlockPropertyFor(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty union(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node atom()>
<java.util.regex.Pattern: java.util.regex.Pattern$Node closure(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node createGroup(boolean)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>
<java.util.regex.Pattern: java.util.regex.Pattern$Node newSlice(int[],int,boolean)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node ref(int)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern: void <init>(java.lang.String,int)>
<java.util.regex.Pattern: void compile()>
<java.util.regex.Pattern: void normalize()>
<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>
<java.util.zip.GZIPInputStream: boolean readTrailer()>
<java.util.zip.GZIPInputStream: int readHeader(java.io.InputStream)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>
<java.util.zip.ZipEntry: byte[] getExtra()>
<java.util.zip.ZipEntry: java.lang.String getName()>
<java.util.zip.ZipEntry: java.lang.String toString()>
<java.util.zip.ZipEntry: long dosToJavaTime(long)>
<java.util.zip.ZipEntry: void <init>(java.lang.String)>
<java.util.zip.ZipEntry: void <init>(java.lang.String,long)>
<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.zip.ZipEntry: void setExtra(byte[])>
<java.util.zip.ZipError: void <init>(java.lang.String)>
<java.util.zip.ZipException: void <init>(java.lang.String)>
<java.util.zip.ZipFile$1: void <init>(java.util.zip.ZipFile,java.io.InputStream,java.util.zip.Inflater,int,java.util.zip.ZipFile$ZipFileInputStream)>
<java.util.zip.ZipFile$1: void close()>
<java.util.zip.ZipFile$2: void <init>(java.util.zip.ZipFile)>
<java.util.zip.ZipFile$ZipFileInputStream: void <init>(java.util.zip.ZipFile,long)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.lang.String)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.zip.ZipFile: java.lang.String access$700(java.util.zip.ZipFile)>
<java.util.zip.ZipFile: java.lang.String getName()>
<java.util.zip.ZipFile: java.util.Enumeration entries()>
<java.util.zip.ZipFile: java.util.zip.Inflater getInflater()>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.zip.ZipFile: void <init>(java.io.File,int)>
<java.util.zip.ZipFile: void access$000(java.util.zip.ZipFile,java.util.zip.Inflater)>
<java.util.zip.ZipFile: void releaseInflater(java.util.zip.Inflater)>
<java.util.zip.ZipInputStream: java.lang.String getFileName(byte[],int)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry readLOC()>
<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
<java_cup.runtime.Symbol: void <init>(int,int,int,java.lang.Object)>
<java_cup.runtime.Symbol: void <init>(int,java.lang.Object)>
<java_cup.runtime.lr_parser: java_cup.runtime.Symbol cur_err_token()>
<java_cup.runtime.lr_parser: java_cup.runtime.Symbol parse()>
<java_cup.runtime.lr_parser: void <init>()>
<java_cup.runtime.lr_parser: void parse_lookahead(boolean)>
<java_cup.runtime.lr_parser: void read_lookahead()>
<java_cup.runtime.lr_parser: void restart_lookahead()>
<java_cup.runtime.virtual_parse_stack: void <init>(java.util.Stack)>
<javax.crypto.Cipher$r: boolean a(java.lang.String,java.lang.String)>
<javax.crypto.Cipher$r: int a(java.security.Provider$Service,java.lang.String,java.lang.String)>
<javax.crypto.Cipher$r: int b(java.security.Provider$Service)>
<javax.crypto.Cipher$r: int c(java.security.Provider$Service)>
<javax.crypto.Cipher$r: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<javax.crypto.Cipher: boolean b(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: java.lang.String[] a(java.lang.String)>
<javax.crypto.Cipher: java.util.List b(java.lang.String)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.Cipher: javax.crypto.SunJCE_f c(java.lang.String)>
<javax.crypto.ExemptionMechanism: java.lang.String getName()>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>
<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>
<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>
<javax.crypto.SunJCE_b: java.net.URL a(java.lang.Class)>
<javax.crypto.SunJCE_b: javax.crypto.SunJCE_d a(java.net.URL)>
<javax.crypto.SunJCE_b: sun.security.jca.GetInstance$Instance a(java.lang.String,java.lang.Class,java.lang.String)>
<javax.crypto.SunJCE_c: boolean a(java.security.cert.X509Certificate[])>
<javax.crypto.SunJCE_c: java.lang.String b(java.net.URL)>
<javax.crypto.SunJCE_c: java.lang.String[] a(java.lang.String)>
<javax.crypto.SunJCE_c: java.security.cert.X509Certificate[] a(java.security.cert.Certificate[],int)>
<javax.crypto.SunJCE_c: javax.crypto.SunJCE_d b()>
<javax.crypto.SunJCE_c: void <init>(java.net.URL,sun.security.validator.Validator,boolean)>
<javax.crypto.SunJCE_c: void a(java.net.URL,java.lang.String,java.util.Vector)>
<javax.crypto.SunJCE_c: void a(java.net.URL,java.util.Vector)>
<javax.crypto.SunJCE_d: boolean implies(java.security.Permission)>
<javax.crypto.SunJCE_d: java.security.PermissionCollection a(java.lang.String)>
<javax.crypto.SunJCE_d: java.security.PermissionCollection a(javax.crypto.SunJCE_f)>
<javax.crypto.SunJCE_d: java.util.Enumeration elements()>
<javax.crypto.SunJCE_d: javax.crypto.SunJCE_d a(javax.crypto.SunJCE_d)>
<javax.crypto.SunJCE_d: javax.crypto.SunJCE_f[] a(int,java.security.PermissionCollection)>
<javax.crypto.SunJCE_d: javax.crypto.SunJCE_f[] a(java.security.PermissionCollection,java.security.PermissionCollection)>
<javax.crypto.SunJCE_d: void <init>()>
<javax.crypto.SunJCE_d: void a(java.io.InputStream)>
<javax.crypto.SunJCE_d: void add(java.security.Permission)>
<javax.crypto.SunJCE_e$o: java.util.Enumeration a()>
<javax.crypto.SunJCE_e$o: void <init>()>
<javax.crypto.SunJCE_e$o: void a(javax.crypto.SunJCE_e$q)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(int,java.lang.String,java.lang.String)>
<javax.crypto.SunJCE_e$p: void <init>(java.lang.String)>
<javax.crypto.SunJCE_e: boolean a(java.lang.String,java.lang.String,java.util.Hashtable)>
<javax.crypto.SunJCE_e: java.lang.String c(java.lang.String)>
<javax.crypto.SunJCE_e: javax.crypto.SunJCE_e$o a(java.util.Hashtable)>
<javax.crypto.SunJCE_e: javax.crypto.SunJCE_e$q b(java.util.Hashtable)>
<javax.crypto.SunJCE_e: javax.crypto.SunJCE_f[] a()>
<javax.crypto.SunJCE_e: void <init>()>
<javax.crypto.SunJCE_e: void a(java.io.Reader)>
<javax.crypto.SunJCE_f: java.lang.String a()>
<javax.crypto.SunJCE_f: java.lang.String b()>
<javax.crypto.SunJCE_f: java.security.PermissionCollection newPermissionCollection()>
<javax.crypto.SunJCE_f: void <init>(java.lang.String)>
<javax.crypto.SunJCE_f: void <init>(java.lang.String,int,java.lang.String)>
<javax.crypto.SunJCE_f: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
<javax.crypto.SunJCE_g: boolean implies(java.security.Permission)>
<javax.crypto.SunJCE_g: java.util.Enumeration elements()>
<javax.crypto.SunJCE_g: void <init>()>
<javax.crypto.SunJCE_g: void add(java.security.Permission)>
<javax.crypto.SunJCE_h: javax.crypto.SunJCE_d a(java.net.URL)>
<javax.crypto.SunJCE_h: javax.crypto.SunJCE_f a(java.lang.String)>
<javax.crypto.SunJCE_h: javax.crypto.SunJCE_f b(java.lang.String)>
<javax.crypto.SunJCE_j: boolean hasMoreElements()>
<javax.crypto.SunJCE_j: java.lang.Object nextElement()>
<javax.crypto.SunJCE_j: java.util.Enumeration a()>
<javax.crypto.SunJCE_j: void <init>(java.util.Enumeration)>
<javax.crypto.SunJCE_l: java.util.Enumeration elements()>
<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet$1: void <init>(javax.security.auth.Subject$SecureSet,java.util.LinkedList)>
<javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: void <init>(javax.security.auth.Subject,int,java.util.Set)>
<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>
<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>
<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>
<polyglot.ast.Assign$Operator: void <init>(java.lang.String)>
<polyglot.ast.Binary$Operator: polyglot.ast.Precedence precedence()>
<polyglot.ast.Binary$Operator: void <init>(java.lang.String,polyglot.ast.Precedence)>
<polyglot.ast.Branch$Kind: void <init>(java.lang.String)>
<polyglot.ast.ConstructorCall$Kind: void <init>(java.lang.String)>
<polyglot.ast.FloatLit$Kind: void <init>(java.lang.String)>
<polyglot.ast.Import$Kind: void <init>(java.lang.String)>
<polyglot.ast.IntLit$Kind: void <init>(java.lang.String)>
<polyglot.ast.Precedence: void <init>(java.lang.String,int)>
<polyglot.ast.Special$Kind: void <init>(java.lang.String)>
<polyglot.ast.Unary$Operator: java.lang.String toString()>
<polyglot.ast.Unary$Operator: void <init>(java.lang.String,boolean)>
<polyglot.ext.jl.ast.AbstractBlock_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.AbstractBlock_c: java.util.List statements()>
<polyglot.ext.jl.ast.AbstractBlock_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.AbstractBlock_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.AbstractBlock_c: polyglot.ext.jl.ast.AbstractBlock_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.AbstractBlock_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.AbstractBlock_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.AmbPrefix AmbPrefix(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.AmbQualifierNode AmbQualifierNode(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.AmbReceiver AmbReceiver(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.AmbTypeNode AmbTypeNode(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.ArrayInit ArrayInit(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Assert Assert(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Block Block(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Block Block(polyglot.util.Position,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Branch Break(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Branch Break(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Branch Continue(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Branch Continue(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Case Default(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.ConstructorCall SuperCall(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.ConstructorCall SuperCall(polyglot.util.Position,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.ConstructorCall ThisCall(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.ConstructorCall ThisCall(polyglot.util.Position,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Disamb disamb()>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.If If(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.New New(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.New New(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.New New(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.NewArray NewArray(polyglot.util.Position,polyglot.ast.TypeNode,int,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.NewArray NewArray(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,int)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Special Super(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Special Super(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Special This(polyglot.util.Position)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Special This(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Try Try(polyglot.util.Position,polyglot.ast.Block,java.util.List)>
<polyglot.ext.jl.ast.AbstractNodeFactory_c: polyglot.ast.Unary Unary(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Unary$Operator)>
<polyglot.ext.jl.ast.AmbAssign_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbAssign_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.AmbAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.AmbAssign_c: void acceptCFGOpAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.AmbExpr_c: java.lang.String name()>
<polyglot.ext.jl.ast.AmbExpr_c: java.lang.String toString()>
<polyglot.ext.jl.ast.AmbExpr_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.AmbExpr_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbExpr_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.AmbExpr_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.AmbExpr_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.AmbPrefix_c: java.lang.String name()>
<polyglot.ext.jl.ast.AmbPrefix_c: java.lang.String toString()>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ast.Prefix prefix()>
<polyglot.ext.jl.ast.AmbPrefix_c: polyglot.ext.jl.ast.AmbPrefix_c reconstruct(polyglot.ast.Prefix)>
<polyglot.ext.jl.ast.AmbPrefix_c: void <init>(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: java.lang.String toString()>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ast.AmbQualifierNode qualifier(polyglot.types.Qualifier)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: polyglot.ext.jl.ast.AmbQualifierNode_c reconstruct(polyglot.ast.QualifierNode)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: void <init>(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.AmbQualifierNode_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.AmbReceiver_c: polyglot.ast.AmbReceiver type(polyglot.types.Type)>
<polyglot.ext.jl.ast.AmbReceiver_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.AmbReceiver_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbReceiver_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.AmbReceiver_c: void <init>(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.AmbTypeNode_c: java.lang.String name()>
<polyglot.ext.jl.ast.AmbTypeNode_c: java.lang.String toString()>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ast.QualifierNode qual()>
<polyglot.ext.jl.ast.AmbTypeNode_c: polyglot.ext.jl.ast.AmbTypeNode_c reconstruct(polyglot.ast.QualifierNode)>
<polyglot.ext.jl.ast.AmbTypeNode_c: void <init>(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.AmbTypeNode_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: void <init>(polyglot.util.Position,polyglot.ast.ArrayAccess,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: void acceptCFGAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.ArrayAccessAssign_c: void acceptCFGOpAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.ArrayAccess_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ArrayAccess_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Expr array()>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Expr index()>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.ext.jl.ast.ArrayAccess_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayAccess_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.ArrayAccess_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ArrayInit_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ArrayInit_c: java.util.List elements()>
<polyglot.ext.jl.ast.ArrayInit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ArrayInit_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ArrayInit_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ArrayInit_c: polyglot.ext.jl.ast.ArrayInit_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.ArrayInit_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: polyglot.ext.jl.ast.ArrayTypeNode_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.ArrayTypeNode_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Assert_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Expr errorMessage()>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Assert_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Assert_c: polyglot.ext.jl.ast.Assert_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assert_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Assert_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assign_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Assign_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Assign$Operator operator()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Expr left()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Expr right()>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Assign_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Assign_c: polyglot.ext.jl.ast.Assign_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assign_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Assign_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Assign_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Binary_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Binary_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Binary_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Binary precedence(polyglot.ast.Precedence)>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Binary$Operator operator()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Expr left()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Expr right()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Precedence precedence()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Binary_c: polyglot.ext.jl.ast.Binary_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Binary_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Binary$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Binary_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Block_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.BooleanLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.BooleanLit_c: void <init>(polyglot.util.Position,boolean)>
<polyglot.ext.jl.ast.BooleanLit_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Branch_c: java.lang.String label()>
<polyglot.ext.jl.ast.Branch_c: polyglot.ast.Branch$Kind kind()>
<polyglot.ext.jl.ast.Branch_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Branch_c: void <init>(polyglot.util.Position,polyglot.ast.Branch$Kind,java.lang.String)>
<polyglot.ext.jl.ast.Call_c: java.lang.String name()>
<polyglot.ext.jl.ast.Call_c: java.lang.String toString()>
<polyglot.ext.jl.ast.Call_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Call_c: java.util.List arguments()>
<polyglot.ext.jl.ast.Call_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Call methodInstance(polyglot.types.MethodInstance)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Call target(polyglot.ast.Receiver)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Call targetImplicit(boolean)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Node typeCheckNullTarget(polyglot.visit.TypeChecker,java.util.List)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Receiver target()>
<polyglot.ext.jl.ast.Call_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Call_c: polyglot.ext.jl.ast.Call_c reconstruct(polyglot.ast.Receiver,java.util.List)>
<polyglot.ext.jl.ast.Call_c: polyglot.types.MethodInstance methodInstance()>
<polyglot.ext.jl.ast.Call_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.Call_c: polyglot.types.ReferenceType findTargetType()>
<polyglot.ext.jl.ast.Call_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Call_c: void <init>(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String,java.util.List)>
<polyglot.ext.jl.ast.Call_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Call_c: void prettyPrint(polyglot.util.CodeWriter,polyglot.visit.PrettyPrinter)>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: java.lang.String toString()>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: void <init>(polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.ast.CanonicalTypeNode_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Case_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Case value(long)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Case_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Case_c: polyglot.ext.jl.ast.Case_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Case_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Case_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Cast_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Cast_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Cast_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Cast_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Cast_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Cast_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Cast_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Cast_c: polyglot.ext.jl.ast.Cast_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Cast_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Catch_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Formal formal()>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Catch_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Catch_c: polyglot.ext.jl.ast.Catch_c reconstruct(polyglot.ast.Formal,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Catch_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Catch_c: polyglot.types.Type catchType()>
<polyglot.ext.jl.ast.Catch_c: void <init>(polyglot.util.Position,polyglot.ast.Formal,polyglot.ast.Block)>
<polyglot.ext.jl.ast.CharLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.CharLit_c: void <init>(polyglot.util.Position,char)>
<polyglot.ext.jl.ast.ClassBody_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ClassBody_c: java.util.List members()>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.ClassBody addMember(polyglot.ast.ClassMember)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.ClassBody members(java.util.List)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.ext.jl.ast.ClassBody_c reconstruct(java.util.List)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassBody_c: polyglot.visit.NodeVisitor exceptionCheckEnter(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.ClassBody_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.ClassDecl_c: java.lang.String name()>
<polyglot.ext.jl.ast.ClassDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ClassDecl_c: java.util.List interfaces()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.ClassBody body()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.ClassDecl body(polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.ClassDecl flags(polyglot.types.Flags)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.ClassDecl type(polyglot.types.ParsedClassType)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node addDefaultConstructor(polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node addDefaultConstructorIfNeeded(polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node addMembers(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ast.TypeNode superClass()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.ext.jl.ast.ClassDecl_c reconstruct(polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.Context enterScope(polyglot.ast.Node,polyglot.types.Context)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.Named declaration()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.types.ParsedClassType type()>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ClassDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ClassDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,java.lang.String,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.ClassDecl_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.ClassLit typeNode(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ClassLit_c: polyglot.ast.TypeNode typeNode()>
<polyglot.ext.jl.ast.ClassLit_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Conditional_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Conditional_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr alternative()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Expr consequent()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Conditional_c: polyglot.ext.jl.ast.Conditional_c reconstruct(polyglot.ast.Expr,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Conditional_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Conditional_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.ConstructorCall_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ConstructorCall_c: java.util.List arguments()>
<polyglot.ext.jl.ast.ConstructorCall_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.ConstructorCall constructorInstance(polyglot.types.ConstructorInstance)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.ConstructorCall$Kind kind()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Expr qualifier()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.ext.jl.ast.ConstructorCall_c reconstruct(polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.ConstructorCall_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.ConstructorCall_c: void <init>(polyglot.util.Position,polyglot.ast.ConstructorCall$Kind,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.ConstructorDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.ConstructorDecl_c: java.util.List formals()>
<polyglot.ext.jl.ast.ConstructorDecl_c: java.util.List throwTypes()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.ConstructorDecl constructorInstance(polyglot.types.ConstructorInstance)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.ConstructorDecl flags(polyglot.types.Flags)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.ext.jl.ast.ConstructorDecl_c reconstruct(java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.CodeInstance codeInstance()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.ConstructorInstance makeConstructorInstance(polyglot.types.ClassType,polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.ConstructorDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.ConstructorDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.ConstructorDecl_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguate(polyglot.ast.Ambiguous,polyglot.visit.ContextVisitor,polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguateExprPrefix(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguateNoPrefix()>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguatePackagePrefix(polyglot.ast.PackageNode)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguateTypeNodePrefix(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Node disambiguateVarInstance(polyglot.types.VarInstance)>
<polyglot.ext.jl.ast.Disamb_c: polyglot.ast.Receiver makeMissingFieldTarget(polyglot.types.FieldInstance)>
<polyglot.ext.jl.ast.Do_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Term continueTarget()>
<polyglot.ext.jl.ast.Do_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Do_c: polyglot.ext.jl.ast.Do_c reconstruct(polyglot.ast.Stmt,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Do_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Do_c: void <init>(polyglot.util.Position,polyglot.ast.Stmt,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Empty_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Empty_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Empty_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Eval_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Eval_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Eval_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Eval_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Eval_c: polyglot.ext.jl.ast.Eval_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Eval_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Eval_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Expr_c: polyglot.ast.Expr type(polyglot.types.Type)>
<polyglot.ext.jl.ast.Expr_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Expr_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.Expr_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Expr_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.FieldAssign_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.FieldAssign_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.FieldAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Field,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.FieldAssign_c: void acceptCFGAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.FieldAssign_c: void acceptCFGOpAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.FieldDecl_c: java.lang.String name()>
<polyglot.ext.jl.ast.FieldDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Expr init()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.FieldDecl fieldInstance(polyglot.types.FieldInstance)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.FieldDecl flags(polyglot.types.Flags)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.FieldDecl initializerInstance(polyglot.types.InitializerInstance)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.ext.jl.ast.FieldDecl_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.FieldInstance fieldInstance()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.types.Type declType()>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.FieldDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.FieldDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.FieldDecl_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Field_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Field_c: java.lang.String name()>
<polyglot.ext.jl.ast.Field_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Field_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Field fieldInstance(polyglot.types.FieldInstance)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Field targetImplicit(boolean)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Receiver target()>
<polyglot.ext.jl.ast.Field_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Field_c: polyglot.ext.jl.ast.Field_c reconstruct(polyglot.ast.Receiver)>
<polyglot.ext.jl.ast.Field_c: polyglot.types.FieldInstance fieldInstance()>
<polyglot.ext.jl.ast.Field_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Field_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Field_c: void <init>(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String)>
<polyglot.ext.jl.ast.Field_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.FloatLit_c: polyglot.ast.FloatLit$Kind kind()>
<polyglot.ext.jl.ast.FloatLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.FloatLit_c: void <init>(polyglot.util.Position,polyglot.ast.FloatLit$Kind,double)>
<polyglot.ext.jl.ast.For_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.For_c: java.util.List inits()>
<polyglot.ext.jl.ast.For_c: java.util.List iters()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Term continueTarget()>
<polyglot.ext.jl.ast.For_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.For_c: polyglot.ext.jl.ast.For_c reconstruct(java.util.List,polyglot.ast.Expr,java.util.List,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.For_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.For_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.For_c: void <init>(polyglot.util.Position,java.util.List,polyglot.ast.Expr,java.util.List,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Formal_c: java.lang.String name()>
<polyglot.ext.jl.ast.Formal_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Formal localInstance(polyglot.types.LocalInstance)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Formal_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.Formal_c: polyglot.ext.jl.ast.Formal_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Formal_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Formal_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.Formal_c: polyglot.types.Type declType()>
<polyglot.ext.jl.ast.Formal_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String)>
<polyglot.ext.jl.ast.Formal_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.If_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Stmt alternative()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Stmt consequent()>
<polyglot.ext.jl.ast.If_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.If_c: polyglot.ext.jl.ast.If_c reconstruct(polyglot.ast.Expr,polyglot.ast.Stmt,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.If_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.If_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Import_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Import_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Import_c: void <init>(polyglot.util.Position,polyglot.ast.Import$Kind,java.lang.String)>
<polyglot.ext.jl.ast.Initializer_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Initializer initializerInstance(polyglot.types.InitializerInstance)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.ext.jl.ast.Initializer_c reconstruct(polyglot.ast.Block)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.CodeInstance codeInstance()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.types.InitializerInstance initializerInstance()>
<polyglot.ext.jl.ast.Initializer_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Initializer_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Initializer_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Initializer_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Instanceof_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ast.TypeNode compareType()>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.ext.jl.ast.Instanceof_c reconstruct(polyglot.ast.Expr,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Instanceof_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Instanceof_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.IntLit_c: polyglot.ast.IntLit$Kind kind()>
<polyglot.ext.jl.ast.IntLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.IntLit_c: void <init>(polyglot.util.Position,polyglot.ast.IntLit$Kind,long)>
<polyglot.ext.jl.ast.Labeled_c: java.lang.String label()>
<polyglot.ext.jl.ast.Labeled_c: java.lang.String toString()>
<polyglot.ext.jl.ast.Labeled_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ast.Stmt statement()>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Labeled_c: polyglot.ext.jl.ast.Labeled_c reconstruct(polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Labeled_c: void <init>(polyglot.util.Position,java.lang.String,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.Labeled_c: void prettyPrint(polyglot.util.CodeWriter,polyglot.visit.PrettyPrinter)>
<polyglot.ext.jl.ast.Lit_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Lit_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Lit_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.LocalAssign_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.LocalAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Local,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.LocalAssign_c: void acceptCFGOpAssign(polyglot.visit.CFGBuilder)>
<polyglot.ext.jl.ast.LocalClassDecl_c: java.lang.String toString()>
<polyglot.ext.jl.ast.LocalClassDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.ClassDecl decl()>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.LocalClassDecl decl(polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.ext.jl.ast.LocalClassDecl_c reconstruct(polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.LocalClassDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.LocalClassDecl_c: void <init>(polyglot.util.Position,polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.LocalDecl_c: java.lang.String name()>
<polyglot.ext.jl.ast.LocalDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Expr init()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.LocalDecl localInstance(polyglot.types.LocalInstance)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ast.TypeNode type()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.ext.jl.ast.LocalDecl_c reconstruct(polyglot.ast.TypeNode,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.Context enterScope(polyglot.ast.Node,polyglot.types.Context)>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.types.Type declType()>
<polyglot.ext.jl.ast.LocalDecl_c: polyglot.visit.NodeVisitor typeCheckEnter(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.LocalDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.LocalDecl_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Local_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.Local_c: java.lang.String name()>
<polyglot.ext.jl.ast.Local_c: java.lang.String toString()>
<polyglot.ext.jl.ast.Local_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Local_c: polyglot.ast.Local localInstance(polyglot.types.LocalInstance)>
<polyglot.ext.jl.ast.Local_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Local_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Local_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Local_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.Local_c: polyglot.types.LocalInstance localInstance()>
<polyglot.ext.jl.ast.Local_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.Local_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Loop_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.MethodDecl_c: java.lang.String name()>
<polyglot.ext.jl.ast.MethodDecl_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.MethodDecl_c: java.util.List formals()>
<polyglot.ext.jl.ast.MethodDecl_c: java.util.List throwTypes()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.CodeDecl body(polyglot.ast.Block)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.MethodDecl flags(polyglot.types.Flags)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.MethodDecl methodInstance(polyglot.types.MethodInstance)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ast.TypeNode returnType()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.ext.jl.ast.MethodDecl_c reconstruct(polyglot.ast.TypeNode,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.CodeInstance codeInstance()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.MethodInstance makeMethodInstance(polyglot.types.ClassType,polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.MethodInstance methodInstance()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.MethodDecl_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.MethodDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.MethodDecl_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.NewArray_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.NewArray_c: java.util.List dims()>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ast.ArrayInit init()>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.NewArray_c: polyglot.ext.jl.ast.NewArray_c reconstruct(polyglot.ast.TypeNode,java.util.List,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.NewArray_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.NewArray_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,int,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.New_c: java.lang.String toString()>
<polyglot.ext.jl.ast.New_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.New_c: java.util.List arguments()>
<polyglot.ext.jl.ast.New_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.ClassBody body()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.ClassBody typeCheckBody(polyglot.visit.TypeChecker,polyglot.types.ClassType)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Expr qualifier()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.New anonType(polyglot.types.ParsedClassType)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.New body(polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.New constructorInstance(polyglot.types.ConstructorInstance)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.New objectType(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.New qualifier(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node typeCheckEpilogue(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.TypeNode disambiguateTypeNode(polyglot.visit.TypeChecker,polyglot.types.ClassType)>
<polyglot.ext.jl.ast.New_c: polyglot.ast.TypeNode objectType()>
<polyglot.ext.jl.ast.New_c: polyglot.ast.TypeNode partialDisambTypeNode(polyglot.ast.TypeNode,polyglot.visit.TypeChecker,polyglot.types.ClassType)>
<polyglot.ext.jl.ast.New_c: polyglot.ext.jl.ast.New_c reconstruct(polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.New_c: polyglot.types.ConstructorInstance constructorInstance()>
<polyglot.ext.jl.ast.New_c: polyglot.types.Context enterScope(polyglot.ast.Node,polyglot.types.Context)>
<polyglot.ext.jl.ast.New_c: polyglot.types.ParsedClassType anonType()>
<polyglot.ext.jl.ast.New_c: polyglot.types.ProcedureInstance procedureInstance()>
<polyglot.ext.jl.ast.New_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.New_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.New_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.New_c: polyglot.visit.NodeVisitor typeCheckEnter(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.New_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbAssign AmbAssign(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbExpr AmbExpr(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbPrefix AmbPrefix(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbQualifierNode AmbQualifierNode(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbReceiver AmbReceiver(polyglot.util.Position,polyglot.ast.Prefix,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.AmbTypeNode AmbTypeNode(polyglot.util.Position,polyglot.ast.QualifierNode,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ArrayAccess ArrayAccess(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ArrayTypeNode ArrayTypeNode(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Assert Assert(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Block Block(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.BooleanLit BooleanLit(polyglot.util.Position,boolean)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Branch Branch(polyglot.util.Position,polyglot.ast.Branch$Kind,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Call Call(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.CanonicalTypeNode CanonicalTypeNode(polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Case Case(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Catch Catch(polyglot.util.Position,polyglot.ast.Formal,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.CharLit CharLit(polyglot.util.Position,char)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ClassBody ClassBody(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ClassDecl ClassDecl(polyglot.util.Position,polyglot.types.Flags,java.lang.String,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ClassLit ClassLit(polyglot.util.Position,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Conditional Conditional(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Expr,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ConstructorCall ConstructorCall(polyglot.util.Position,polyglot.ast.ConstructorCall$Kind,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ConstructorDecl ConstructorDecl(polyglot.util.Position,polyglot.types.Flags,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.DelFactory delFactory()>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Do Do(polyglot.util.Position,polyglot.ast.Stmt,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Empty Empty(polyglot.util.Position)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Eval Eval(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.ExtFactory extFactory()>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Field Field(polyglot.util.Position,polyglot.ast.Receiver,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.FloatLit FloatLit(polyglot.util.Position,polyglot.ast.FloatLit$Kind,double)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.For For(polyglot.util.Position,java.util.List,polyglot.ast.Expr,java.util.List,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Formal Formal(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.If If(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Import Import(polyglot.util.Position,polyglot.ast.Import$Kind,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Initializer Initializer(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Instanceof Instanceof(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.IntLit IntLit(polyglot.util.Position,polyglot.ast.IntLit$Kind,long)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Labeled Labeled(polyglot.util.Position,java.lang.String,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Local Local(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.LocalClassDecl LocalClassDecl(polyglot.util.Position,polyglot.ast.ClassDecl)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.MethodDecl MethodDecl(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,java.util.List,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.New New(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.TypeNode,java.util.List,polyglot.ast.ClassBody)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.NewArray NewArray(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,int,polyglot.ast.ArrayInit)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.NullLit NullLit(polyglot.util.Position)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.PackageNode PackageNode(polyglot.util.Position,polyglot.types.Package)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.SourceFile SourceFile(polyglot.util.Position,polyglot.ast.PackageNode,java.util.List,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Special Special(polyglot.util.Position,polyglot.ast.Special$Kind,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.StringLit StringLit(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Switch Switch(polyglot.util.Position,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.SwitchBlock SwitchBlock(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Synchronized Synchronized(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Throw Throw(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.Try Try(polyglot.util.Position,polyglot.ast.Block,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.NodeFactory_c: polyglot.ast.While While(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.NodeFactory_c: void <init>(polyglot.ast.ExtFactory,polyglot.ast.DelFactory)>
<polyglot.ext.jl.ast.Node_c: java.lang.Object copy()>
<polyglot.ext.jl.ast.Node_c: java.util.List visitList(java.util.List,polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.JL del()>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node addMembers(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node del(polyglot.ast.JL)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node disambiguate(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node ext(polyglot.ast.Ext)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node position(polyglot.util.Position)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node visit(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node visitChild(polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.types.Context enterScope(polyglot.ast.Node,polyglot.types.Context)>
<polyglot.ext.jl.ast.Node_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Node_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.util.Position position()>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor addMembersEnter(polyglot.visit.AddMemberVisitor)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor disambiguateEnter(polyglot.visit.AmbiguityRemover)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor exceptionCheckEnter(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Node_c: polyglot.visit.NodeVisitor typeCheckEnter(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Node_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Node_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Node_c: void translate(polyglot.util.CodeWriter,polyglot.visit.Translator)>
<polyglot.ext.jl.ast.NullLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.NullLit_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.NumLit_c: void <init>(polyglot.util.Position,long)>
<polyglot.ext.jl.ast.NumLit_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.PackageNode_c: java.lang.String toString()>
<polyglot.ext.jl.ast.PackageNode_c: polyglot.types.Package package_()>
<polyglot.ext.jl.ast.PackageNode_c: void <init>(polyglot.util.Position,polyglot.types.Package)>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Return_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Return_c: polyglot.ext.jl.ast.Return_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Return_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.SourceFile_c: java.util.List decls()>
<polyglot.ext.jl.ast.SourceFile_c: java.util.List imports()>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.PackageNode package_()>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.SourceFile importTable(polyglot.types.ImportTable)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ast.SourceFile source(polyglot.frontend.Source)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.ext.jl.ast.SourceFile_c reconstruct(polyglot.ast.PackageNode,java.util.List,java.util.List)>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.frontend.Source source()>
<polyglot.ext.jl.ast.SourceFile_c: polyglot.visit.NodeVisitor buildTypesEnter(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.SourceFile_c: void <init>(polyglot.util.Position,polyglot.ast.PackageNode,java.util.List,java.util.List)>
<polyglot.ext.jl.ast.Special_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Special$Kind kind()>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Special_c: polyglot.ast.TypeNode qualifier()>
<polyglot.ext.jl.ast.Special_c: polyglot.ext.jl.ast.Special_c reconstruct(polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Special_c: void <init>(polyglot.util.Position,polyglot.ast.Special$Kind,polyglot.ast.TypeNode)>
<polyglot.ext.jl.ast.Special_c: void dump(polyglot.util.CodeWriter)>
<polyglot.ext.jl.ast.Stmt_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.StringLit_c: java.lang.Object constantValue()>
<polyglot.ext.jl.ast.StringLit_c: java.lang.String value()>
<polyglot.ext.jl.ast.StringLit_c: java.util.List breakupString()>
<polyglot.ext.jl.ast.StringLit_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.StringLit_c: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.ast.SwitchBlock_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.SwitchBlock_c: void <init>(polyglot.util.Position,java.util.List)>
<polyglot.ext.jl.ast.Switch_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Switch_c: java.util.List elements()>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Switch_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Switch_c: polyglot.ext.jl.ast.Switch_c reconstruct(polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.Switch_c: polyglot.types.Context enterScope(polyglot.types.Context)>
<polyglot.ext.jl.ast.Switch_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Switch_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,java.util.List)>
<polyglot.ext.jl.ast.Synchronized_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Block body()>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.ext.jl.ast.Synchronized_c reconstruct(polyglot.ast.Expr,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Synchronized_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Synchronized_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Term exceptions(polyglot.util.SubtypeSet)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Term listEntry(java.util.List,polyglot.ast.Term)>
<polyglot.ext.jl.ast.Term_c: polyglot.ast.Term reachable(boolean)>
<polyglot.ext.jl.ast.Term_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Throw_c: java.util.List throwTypes(polyglot.types.TypeSystem)>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Throw_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Throw_c: polyglot.ext.jl.ast.Throw_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Throw_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.Throw_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Try_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Try_c: java.util.List catchBlocks()>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Block finallyBlock()>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Block tryBlock()>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Node exceptionCheck(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Try_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Try_c: polyglot.ext.jl.ast.Try_c reconstruct(polyglot.ast.Block,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.Try_c: polyglot.visit.NodeVisitor exceptionCheckEnter(polyglot.visit.ExceptionChecker)>
<polyglot.ext.jl.ast.Try_c: void <init>(polyglot.util.Position,polyglot.ast.Block,java.util.List,polyglot.ast.Block)>
<polyglot.ext.jl.ast.TypeNode_c: java.lang.String name()>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.ast.Node buildTypes(polyglot.visit.TypeBuilder)>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.ast.TypeNode type(polyglot.types.Type)>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.types.Qualifier qualifier()>
<polyglot.ext.jl.ast.TypeNode_c: polyglot.types.Type type()>
<polyglot.ext.jl.ast.TypeNode_c: void <init>(polyglot.util.Position)>
<polyglot.ext.jl.ast.Unary_c: java.lang.String toString()>
<polyglot.ext.jl.ast.Unary_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Expr expr()>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.Unary_c: polyglot.ast.Unary$Operator operator()>
<polyglot.ext.jl.ast.Unary_c: polyglot.ext.jl.ast.Unary_c reconstruct(polyglot.ast.Expr)>
<polyglot.ext.jl.ast.Unary_c: void <init>(polyglot.util.Position,polyglot.ast.Unary$Operator,polyglot.ast.Expr)>
<polyglot.ext.jl.ast.While_c: java.util.List acceptCFG(polyglot.visit.CFGBuilder,java.util.List)>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Expr cond()>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Node typeCheck(polyglot.visit.TypeChecker)>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Node visitChildren(polyglot.visit.NodeVisitor)>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Stmt body()>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Term continueTarget()>
<polyglot.ext.jl.ast.While_c: polyglot.ast.Term entry()>
<polyglot.ext.jl.ast.While_c: polyglot.ext.jl.ast.While_c reconstruct(polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.ast.While_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<polyglot.ext.jl.ast.While_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Stmt)>
<polyglot.ext.jl.parse.Lexer_c: java.lang.String file()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token boolean_lit(boolean)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token char_lit(java.lang.String)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token double_lit(java.lang.String)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token float_lit(java.lang.String)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token id()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token int_lit(java.lang.String,int)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token key(int)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token long_lit(java.lang.String,int)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token nextToken()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token null_lit()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token op(int)>
<polyglot.ext.jl.parse.Lexer_c: polyglot.lex.Token string_lit()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.util.Position pos()>
<polyglot.ext.jl.parse.Lexer_c: polyglot.util.Position pos(int)>
<polyglot.ext.jl.parse.Lexer_c: void <init>(java.io.Reader,java.lang.String,polyglot.util.ErrorQueue)>
<polyglot.ext.jl.parse.Name: java.lang.String toString()>
<polyglot.ext.jl.parse.Name: void <init>(polyglot.parse.BaseParser,polyglot.util.Position,java.lang.String)>
<polyglot.ext.jl.parse.Name: void <init>(polyglot.parse.BaseParser,polyglot.util.Position,polyglot.ext.jl.parse.Name,java.lang.String)>
<polyglot.ext.jl.types.ArrayType_c: boolean isCastValidImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ArrayType_c: boolean isImplicitCastValidImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ArrayType_c: int dims()>
<polyglot.ext.jl.types.ArrayType_c: java.util.List fields()>
<polyglot.ext.jl.types.ArrayType_c: java.util.List interfaces()>
<polyglot.ext.jl.types.ArrayType_c: java.util.List methods()>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.ArrayType toArray()>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.FieldInstance fieldNamed(java.lang.String)>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.FieldInstance lengthField()>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.Type base()>
<polyglot.ext.jl.types.ArrayType_c: polyglot.types.Type superType()>
<polyglot.ext.jl.types.ArrayType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.types.ArrayType_c: void init()>
<polyglot.ext.jl.types.ClassType_c: boolean descendsFromImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ClassType_c: boolean isCastValidImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ClassType_c: boolean isImplicitCastValidImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ClassType_c: boolean isThrowable()>
<polyglot.ext.jl.types.ClassType_c: boolean isUncheckedException()>
<polyglot.ext.jl.types.ClassType_c: java.lang.String fullName()>
<polyglot.ext.jl.types.ClassType_c: java.lang.String toString()>
<polyglot.ext.jl.types.ClassType_c: java.lang.String translate(polyglot.types.Resolver)>
<polyglot.ext.jl.types.ClassType_c: polyglot.types.ClassType memberClassNamed(java.lang.String)>
<polyglot.ext.jl.types.ClassType_c: polyglot.types.ClassType toClass()>
<polyglot.ext.jl.types.ClassType_c: polyglot.types.FieldInstance fieldNamed(java.lang.String)>
<polyglot.ext.jl.types.ClassType_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.ClassType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.ClassType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.ConstructorInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags,java.util.List,java.util.List)>
<polyglot.ext.jl.types.Context_c$Kind: void <init>(java.lang.String)>
<polyglot.ext.jl.types.Context_c: java.lang.Object copy()>
<polyglot.ext.jl.types.Context_c: polyglot.ext.jl.types.Context_c push()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ClassType currentClass()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ClassType findFieldScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.ClassType findMethodScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.CodeInstance currentCode()>
<polyglot.ext.jl.types.Context_c: polyglot.types.Context pushBlock()>
<polyglot.ext.jl.types.Context_c: polyglot.types.Context pushClass(polyglot.types.ParsedClassType,polyglot.types.ClassType)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Context pushCode(polyglot.types.CodeInstance)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Context pushSource(polyglot.types.ImportTable)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Context pushStatic()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ImportTable importTable()>
<polyglot.ext.jl.types.Context_c: polyglot.types.LocalInstance findLocal(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.MethodInstance findMethod(java.lang.String,java.util.List)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Named find(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Named findInThisScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.Package package_()>
<polyglot.ext.jl.types.Context_c: polyglot.types.ParsedClassType currentClassScope()>
<polyglot.ext.jl.types.Context_c: polyglot.types.Resolver outerResolver()>
<polyglot.ext.jl.types.Context_c: polyglot.types.TypeSystem typeSystem()>
<polyglot.ext.jl.types.Context_c: polyglot.types.VarInstance findVariableInThisScope(java.lang.String)>
<polyglot.ext.jl.types.Context_c: polyglot.types.VarInstance findVariableSilent(java.lang.String)>
<polyglot.ext.jl.types.Context_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Context_c: void addNamed(polyglot.types.Named)>
<polyglot.ext.jl.types.Context_c: void addNamedToThisScope(polyglot.types.Named)>
<polyglot.ext.jl.types.Context_c: void addVariable(polyglot.types.VarInstance)>
<polyglot.ext.jl.types.Context_c: void addVariableToThisScope(polyglot.types.VarInstance)>
<polyglot.ext.jl.types.FieldInstance_c: java.lang.String toString()>
<polyglot.ext.jl.types.FieldInstance_c: polyglot.types.FieldInstance constantValue(java.lang.Object)>
<polyglot.ext.jl.types.FieldInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.FieldInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.FieldInstance_c: void setConstantValue(java.lang.Object)>
<polyglot.ext.jl.types.InitializerInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.InitializerInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.InitializerInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags)>
<polyglot.ext.jl.types.LazyClassInitializer_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.LocalInstance_c: polyglot.types.LocalInstance constantValue(java.lang.Object)>
<polyglot.ext.jl.types.LocalInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.LocalInstance_c: void setConstantValue(java.lang.Object)>
<polyglot.ext.jl.types.MethodInstance_c: java.lang.String name()>
<polyglot.ext.jl.types.MethodInstance_c: java.lang.String signature()>
<polyglot.ext.jl.types.MethodInstance_c: java.util.List implemented()>
<polyglot.ext.jl.types.MethodInstance_c: java.util.List implementedImpl(polyglot.types.ReferenceType)>
<polyglot.ext.jl.types.MethodInstance_c: java.util.List overrides()>
<polyglot.ext.jl.types.MethodInstance_c: java.util.List overridesImpl()>
<polyglot.ext.jl.types.MethodInstance_c: polyglot.types.Type returnType()>
<polyglot.ext.jl.types.MethodInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String,java.util.List,java.util.List)>
<polyglot.ext.jl.types.NullType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Package_c: java.lang.String fullName()>
<polyglot.ext.jl.types.Package_c: java.lang.String name()>
<polyglot.ext.jl.types.Package_c: java.lang.String toString()>
<polyglot.ext.jl.types.Package_c: java.lang.String translate(polyglot.types.Resolver)>
<polyglot.ext.jl.types.Package_c: polyglot.types.Package prefix()>
<polyglot.ext.jl.types.Package_c: polyglot.types.Package toPackage()>
<polyglot.ext.jl.types.Package_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Package_c: void <init>(polyglot.types.TypeSystem,polyglot.types.Package,java.lang.String)>
<polyglot.ext.jl.types.ParsedClassType_c: java.lang.String name()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List constructors()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List fields()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List interfaces()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List memberClasses()>
<polyglot.ext.jl.types.ParsedClassType_c: java.util.List methods()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.frontend.Source fromSource()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.ClassType outer()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.ClassType$Kind kind()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Package package_()>
<polyglot.ext.jl.types.ParsedClassType_c: polyglot.types.Type superType()>
<polyglot.ext.jl.types.ParsedClassType_c: void <init>(polyglot.types.TypeSystem,polyglot.types.LazyClassInitializer,polyglot.frontend.Source)>
<polyglot.ext.jl.types.ParsedClassType_c: void addConstructor(polyglot.types.ConstructorInstance)>
<polyglot.ext.jl.types.ParsedClassType_c: void addField(polyglot.types.FieldInstance)>
<polyglot.ext.jl.types.ParsedClassType_c: void addInterface(polyglot.types.Type)>
<polyglot.ext.jl.types.ParsedClassType_c: void addMemberClass(polyglot.types.ClassType)>
<polyglot.ext.jl.types.ParsedClassType_c: void addMethod(polyglot.types.MethodInstance)>
<polyglot.ext.jl.types.ParsedClassType_c: void flags(polyglot.types.Flags)>
<polyglot.ext.jl.types.ParsedClassType_c: void kind(polyglot.types.ClassType$Kind)>
<polyglot.ext.jl.types.ParsedClassType_c: void name(java.lang.String)>
<polyglot.ext.jl.types.ParsedClassType_c: void outer(polyglot.types.ClassType)>
<polyglot.ext.jl.types.ParsedClassType_c: void package_(polyglot.types.Package)>
<polyglot.ext.jl.types.ParsedClassType_c: void position(polyglot.util.Position)>
<polyglot.ext.jl.types.ParsedClassType_c: void superType(polyglot.types.Type)>
<polyglot.ext.jl.types.PlaceHolder_c: void <init>(polyglot.types.Type)>
<polyglot.ext.jl.types.PrimitiveType_c: boolean isImplicitCastValidImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.PrimitiveType_c: java.lang.String fullName()>
<polyglot.ext.jl.types.PrimitiveType_c: java.lang.String name()>
<polyglot.ext.jl.types.PrimitiveType_c: java.lang.String toString()>
<polyglot.ext.jl.types.PrimitiveType_c: java.lang.String translate(polyglot.types.Resolver)>
<polyglot.ext.jl.types.PrimitiveType_c: polyglot.types.PrimitiveType toPrimitive()>
<polyglot.ext.jl.types.PrimitiveType_c: polyglot.types.PrimitiveType$Kind kind()>
<polyglot.ext.jl.types.PrimitiveType_c: void <init>(polyglot.types.TypeSystem,polyglot.types.PrimitiveType$Kind)>
<polyglot.ext.jl.types.ProcedureInstance_c: boolean callValidImpl(java.util.List)>
<polyglot.ext.jl.types.ProcedureInstance_c: boolean moreSpecificImpl(polyglot.types.ProcedureInstance)>
<polyglot.ext.jl.types.ProcedureInstance_c: boolean throwsSubsetImpl(polyglot.types.ProcedureInstance)>
<polyglot.ext.jl.types.ProcedureInstance_c: java.util.List formalTypes()>
<polyglot.ext.jl.types.ProcedureInstance_c: java.util.List throwTypes()>
<polyglot.ext.jl.types.ProcedureInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.ProcedureInstance_c: polyglot.types.ReferenceType container()>
<polyglot.ext.jl.types.ProcedureInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,java.util.List,java.util.List)>
<polyglot.ext.jl.types.ReferenceType_c: boolean descendsFromImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.ReferenceType_c: java.util.List methods(java.lang.String,java.util.List)>
<polyglot.ext.jl.types.ReferenceType_c: java.util.List methodsNamed(java.lang.String)>
<polyglot.ext.jl.types.ReferenceType_c: polyglot.types.ReferenceType toReference()>
<polyglot.ext.jl.types.ReferenceType_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.TypeObject_c: java.lang.Object copy()>
<polyglot.ext.jl.types.TypeObject_c: polyglot.types.TypeSystem typeSystem()>
<polyglot.ext.jl.types.TypeObject_c: polyglot.util.Position position()>
<polyglot.ext.jl.types.TypeObject_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.TypeObject_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.TypeSystem_c: boolean classAccessible(polyglot.types.ClassType,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: boolean descendsFrom(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: boolean hasMethodNamed(polyglot.types.ReferenceType,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: boolean isAccessible(polyglot.types.MemberInstance,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: boolean isCastValid(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: boolean isImplicitCastValid(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: boolean isSubtype(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: boolean isUncheckedException(polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: boolean packageExists(java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: java.lang.Object placeHolder(polyglot.types.TypeObject,java.util.Set)>
<polyglot.ext.jl.types.TypeSystem_c: java.lang.String listToString(java.util.List)>
<polyglot.ext.jl.types.TypeSystem_c: java.lang.String toString()>
<polyglot.ext.jl.types.TypeSystem_c: java.lang.String translatePackage(polyglot.types.Resolver,polyglot.types.Package)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.Collection findMostSpecificProcedures(java.util.List,polyglot.types.ReferenceType,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.Collection uncheckedExceptions()>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List abstractSuperInterfaces(polyglot.types.ReferenceType)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List defaultPackageImports()>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List findAcceptableConstructors(polyglot.types.ClassType,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List findAcceptableMethods(polyglot.types.ReferenceType,java.lang.String,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List implemented(polyglot.types.MethodInstance)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.List overrides(polyglot.types.MethodInstance)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.Set findFields(polyglot.types.ReferenceType,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.Set findMemberClasses(polyglot.types.ClassType,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: java.util.Set getTypeEncoderRootSet(polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ArrayType arrayOf(polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ArrayType arrayOf(polyglot.types.Type,int)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ArrayType arrayOf(polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ArrayType arrayOf(polyglot.util.Position,polyglot.types.Type,int)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ArrayType arrayType(polyglot.util.Position,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType ArithmeticException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType ArrayStoreException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Class()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType ClassCastException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Cloneable()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Error()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType NullPointerException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Object()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType OutOfBoundsException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType RuntimeException()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Serializable()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType String()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType Throwable()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType findMemberClass(polyglot.types.ClassType,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType findMemberClass(polyglot.types.ClassType,java.lang.String,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ClassType load(java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ConstructorInstance constructorInstance(polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags,java.util.List,java.util.List)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ConstructorInstance defaultConstructor(polyglot.util.Position,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ConstructorInstance findConstructor(polyglot.types.ClassType,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Context createContext()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.FieldInstance fieldInstance(polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.FieldInstance findField(polyglot.types.ReferenceType,java.lang.String,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.FieldInstance findField(polyglot.types.ReferenceType,java.lang.String,polyglot.types.Context)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ImportTable importTable(java.lang.String,polyglot.types.Package)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.InitializerInstance initializerInstance(polyglot.util.Position,polyglot.types.ClassType,polyglot.types.Flags)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.LazyClassInitializer defaultClassInitializer()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.LocalInstance localInstance(polyglot.util.Position,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.MethodInstance findMethod(polyglot.types.ReferenceType,java.lang.String,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.MethodInstance methodInstance(polyglot.util.Position,polyglot.types.ReferenceType,polyglot.types.Flags,polyglot.types.Type,java.lang.String,java.util.List,java.util.List)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Named forName(java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.NullType Null()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.NullType createNull()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Package createPackage(polyglot.types.Package,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Package packageForName(java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Package packageForName(polyglot.types.Package,java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ParsedClassType createClassType(polyglot.frontend.Source)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ParsedClassType createClassType(polyglot.types.LazyClassInitializer)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ParsedClassType createClassType(polyglot.types.LazyClassInitializer,polyglot.frontend.Source)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Boolean()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Byte()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Char()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Double()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Float()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Int()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Long()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Short()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType Void()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType createPrimitive(polyglot.types.PrimitiveType$Kind)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType promote(polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType promote(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType promoteNumeric(polyglot.types.PrimitiveType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.PrimitiveType promoteNumeric(polyglot.types.PrimitiveType,polyglot.types.PrimitiveType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.ProcedureInstance findProcedure(java.util.List,polyglot.types.ReferenceType,java.util.List,polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Resolver classContextResolver(polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Resolver packageContextResolver(polyglot.types.Resolver,polyglot.types.Package)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.TableResolver parsedResolver()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.TopLevelResolver systemResolver()>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Type leastCommonAncestor(polyglot.types.Type,polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Type staticTarget(polyglot.types.Type)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.Type typeForName(java.lang.String)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.UnknownQualifier unknownQualifier(polyglot.util.Position)>
<polyglot.ext.jl.types.TypeSystem_c: polyglot.types.UnknownType unknownType(polyglot.util.Position)>
<polyglot.ext.jl.types.TypeSystem_c: void <init>()>
<polyglot.ext.jl.types.TypeSystem_c: void checkClassConformance(polyglot.types.ClassType)>
<polyglot.ext.jl.types.TypeSystem_c: void checkCycles(polyglot.types.ReferenceType)>
<polyglot.ext.jl.types.TypeSystem_c: void checkCycles(polyglot.types.ReferenceType,polyglot.types.ReferenceType)>
<polyglot.ext.jl.types.TypeSystem_c: void initFlags()>
<polyglot.ext.jl.types.TypeSystem_c: void initialize(polyglot.types.LoadedClassResolver,polyglot.frontend.ExtensionInfo)>
<polyglot.ext.jl.types.Type_c: boolean isSubtype(polyglot.types.Type)>
<polyglot.ext.jl.types.Type_c: boolean isSubtypeImpl(polyglot.types.Type)>
<polyglot.ext.jl.types.Type_c: polyglot.types.Type toType()>
<polyglot.ext.jl.types.Type_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.Type_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position)>
<polyglot.ext.jl.types.UnknownPackage_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.UnknownQualifier_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.UnknownType_c: void <init>(polyglot.types.TypeSystem)>
<polyglot.ext.jl.types.VarInstance_c: java.lang.Object constantValue()>
<polyglot.ext.jl.types.VarInstance_c: java.lang.String name()>
<polyglot.ext.jl.types.VarInstance_c: polyglot.types.Flags flags()>
<polyglot.ext.jl.types.VarInstance_c: polyglot.types.Type type()>
<polyglot.ext.jl.types.VarInstance_c: void <init>(polyglot.types.TypeSystem,polyglot.util.Position,polyglot.types.Flags,polyglot.types.Type,java.lang.String)>
<polyglot.frontend.AbstractPass: java.lang.String name()>
<polyglot.frontend.AbstractPass: polyglot.frontend.Pass$ID id()>
<polyglot.frontend.AbstractPass: void <init>(polyglot.frontend.Pass$ID)>
<polyglot.frontend.BarrierPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job)>
<polyglot.frontend.Compiler: java.util.Collection outputFiles()>
<polyglot.frontend.Compiler: polyglot.frontend.ExtensionInfo sourceExtension()>
<polyglot.frontend.Compiler: polyglot.types.reflect.ClassFileLoader loader()>
<polyglot.frontend.Compiler: polyglot.util.ErrorQueue errorQueue()>
<polyglot.frontend.Compiler: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.frontend.Compiler: void <init>(polyglot.frontend.ExtensionInfo,polyglot.util.ErrorQueue)>
<polyglot.frontend.Compiler: void addExtension(polyglot.frontend.ExtensionInfo)>
<polyglot.frontend.CyclicDependencyException: void <init>(java.lang.String)>
<polyglot.frontend.EmptyPass: void <init>(polyglot.frontend.Pass$ID)>
<polyglot.frontend.FileSource: java.io.Reader open()>
<polyglot.frontend.FileSource: java.lang.String toString()>
<polyglot.frontend.FileSource: void <init>(java.io.File)>
<polyglot.frontend.FileSource: void <init>(java.io.File,boolean)>
<polyglot.frontend.GlobalBarrierPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job)>
<polyglot.frontend.InnerJob: java.util.List getPasses()>
<polyglot.frontend.InnerJob: polyglot.frontend.SourceJob sourceJob()>
<polyglot.frontend.InnerJob: polyglot.types.Context context()>
<polyglot.frontend.InnerJob: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.ast.Node,polyglot.types.Context,polyglot.frontend.Job,polyglot.frontend.Pass$ID,polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: boolean completed(polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: boolean pending(polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: java.util.List passes()>
<polyglot.frontend.Job: java.util.List pendingPasses()>
<polyglot.frontend.Job: polyglot.ast.Node ast()>
<polyglot.frontend.Job: polyglot.frontend.BarrierPass lastBarrier()>
<polyglot.frontend.Job: polyglot.frontend.Compiler compiler()>
<polyglot.frontend.Job: polyglot.frontend.ExtensionInfo extensionInfo()>
<polyglot.frontend.Job: polyglot.frontend.Job spawn(polyglot.types.Context,polyglot.ast.Node,polyglot.frontend.Pass$ID,polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: polyglot.frontend.Pass getPreviousTo(polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: polyglot.frontend.Pass nextPass()>
<polyglot.frontend.Job: polyglot.frontend.Pass passByID(polyglot.frontend.Pass$ID)>
<polyglot.frontend.Job: polyglot.frontend.Pass runningPass()>
<polyglot.frontend.Job: polyglot.frontend.Source source()>
<polyglot.frontend.Job: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.ast.Node)>
<polyglot.frontend.Job: void ast(polyglot.ast.Node)>
<polyglot.frontend.Job: void init()>
<polyglot.frontend.Job: void setRunningPass(polyglot.frontend.Pass)>
<polyglot.frontend.OutputPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.visit.Translator)>
<polyglot.frontend.ParserPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Compiler,polyglot.frontend.Job)>
<polyglot.frontend.Pass$ID: void <init>(java.lang.String)>
<polyglot.frontend.Source: java.lang.String name()>
<polyglot.frontend.Source: java.lang.String path()>
<polyglot.frontend.Source: java.util.Date lastModified()>
<polyglot.frontend.Source: void <init>(java.lang.String,boolean)>
<polyglot.frontend.Source: void <init>(java.lang.String,java.lang.String,java.util.Date,boolean)>
<polyglot.frontend.SourceJob: java.util.List getPasses()>
<polyglot.frontend.SourceJob: java.util.Set dependencies()>
<polyglot.frontend.SourceJob: polyglot.frontend.Source source()>
<polyglot.frontend.SourceJob: polyglot.frontend.SourceJob sourceJob()>
<polyglot.frontend.SourceJob: void <init>(polyglot.frontend.ExtensionInfo,polyglot.frontend.JobExt,polyglot.frontend.Source,polyglot.ast.Node)>
<polyglot.frontend.SourceJob: void addDependency(polyglot.frontend.Source)>
<polyglot.frontend.SourceLoader: java.lang.Object fileKey(java.io.File)>
<polyglot.frontend.SourceLoader: polyglot.frontend.FileSource classSource(java.lang.String)>
<polyglot.frontend.SourceLoader: void setCaseInsensitive(java.lang.String)>
<polyglot.frontend.TargetFactory: java.io.File outputFile(java.lang.String,java.lang.String,polyglot.frontend.Source)>
<polyglot.frontend.TargetFactory: java.io.File outputFile(java.lang.String,polyglot.frontend.Source)>
<polyglot.frontend.TargetFactory: java.io.Writer outputWriter(java.io.File)>
<polyglot.frontend.VisitorPass: java.lang.String toString()>
<polyglot.frontend.VisitorPass: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.visit.NodeVisitor)>
<polyglot.lex.BooleanLiteral: void <init>(polyglot.util.Position,boolean,int)>
<polyglot.lex.CharacterLiteral: void <init>(polyglot.util.Position,char,int)>
<polyglot.lex.DoubleLiteral: void <init>(polyglot.util.Position,double,int)>
<polyglot.lex.EOF: void <init>(polyglot.util.Position,int)>
<polyglot.lex.FloatLiteral: void <init>(polyglot.util.Position,float,int)>
<polyglot.lex.Identifier: java.lang.String getIdentifier()>
<polyglot.lex.Identifier: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.IntegerLiteral: void <init>(polyglot.util.Position,int,int)>
<polyglot.lex.Keyword: java.lang.String toString()>
<polyglot.lex.Keyword: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.Literal: void <init>(polyglot.util.Position,int)>
<polyglot.lex.LongLiteral: void <init>(polyglot.util.Position,long,int)>
<polyglot.lex.NullLiteral: void <init>(polyglot.util.Position,int)>
<polyglot.lex.NumericLiteral: void <init>(polyglot.util.Position,int)>
<polyglot.lex.Operator: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.StringLiteral: java.lang.String getValue()>
<polyglot.lex.StringLiteral: void <init>(polyglot.util.Position,java.lang.String,int)>
<polyglot.lex.Token: java_cup.runtime.Symbol symbol()>
<polyglot.lex.Token: polyglot.util.Position getPosition()>
<polyglot.lex.Token: void <init>(polyglot.util.Position,int)>
<polyglot.main.Report: boolean should_report(java.lang.String,int)>
<polyglot.main.Report: boolean should_report(java.util.Collection,int)>
<polyglot.main.Report: int level(java.lang.String)>
<polyglot.types.BadSerializationException: java.lang.String message(java.lang.String)>
<polyglot.types.BadSerializationException: void <init>(java.lang.String)>
<polyglot.types.CachingResolver: boolean packageExists(java.lang.String)>
<polyglot.types.CachingResolver: polyglot.types.Named check(java.lang.String)>
<polyglot.types.CachingResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.CachingResolver: void <init>(polyglot.types.TopLevelResolver,polyglot.frontend.ExtensionInfo)>
<polyglot.types.CachingResolver: void addNamed(java.lang.String,polyglot.types.Named)>
<polyglot.types.CachingResolver: void cachePackage(polyglot.types.Package)>
<polyglot.types.CachingResolver: void install(java.lang.String,polyglot.types.Named)>
<polyglot.types.ClassContextResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.ClassContextResolver: void <init>(polyglot.types.TypeSystem,polyglot.types.ClassType)>
<polyglot.types.ClassType$Kind: void <init>(java.lang.String)>
<polyglot.types.CompoundResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.CompoundResolver: void <init>(polyglot.types.TopLevelResolver,polyglot.types.TopLevelResolver)>
<polyglot.types.ImportTable: boolean isVisibleFrom(polyglot.types.Named,java.lang.String)>
<polyglot.types.ImportTable: polyglot.types.Named cachedFind(java.lang.String)>
<polyglot.types.ImportTable: polyglot.types.Named find(java.lang.String)>
<polyglot.types.ImportTable: polyglot.types.Named findInPkg(java.lang.String,java.lang.String)>
<polyglot.types.ImportTable: polyglot.types.Package package_()>
<polyglot.types.ImportTable: void <init>(polyglot.types.TypeSystem,polyglot.types.Resolver,polyglot.types.Package,java.lang.String)>
<polyglot.types.ImportTable: void addClassImport(java.lang.String)>
<polyglot.types.ImportTable: void addPackageImport(java.lang.String)>
<polyglot.types.ImportTable: void lazyImport()>
<polyglot.types.LoadedClassResolver: int checkCompilerVersion(java.lang.String)>
<polyglot.types.LoadedClassResolver: polyglot.types.ClassType getEncodedType(polyglot.types.reflect.ClassFile,java.lang.String)>
<polyglot.types.LoadedClassResolver: polyglot.types.reflect.ClassFile loadFile(java.lang.String)>
<polyglot.types.LoadedClassResolver: void <init>(polyglot.types.TypeSystem,java.lang.String,polyglot.types.reflect.ClassFileLoader,polyglot.main.Version,boolean)>
<polyglot.types.NoClassException: java.lang.String getClassName()>
<polyglot.types.NoClassException: void <init>(java.lang.String)>
<polyglot.types.NoClassException: void <init>(java.lang.String,polyglot.types.Named)>
<polyglot.types.NoClassException: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.types.NoMemberException: void <init>(int,java.lang.String)>
<polyglot.types.PackageContextResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.PackageContextResolver: void <init>(polyglot.types.TypeSystem,polyglot.types.Package,polyglot.types.Resolver)>
<polyglot.types.PrimitiveType$Kind: void <init>(java.lang.String)>
<polyglot.types.SemanticException: polyglot.util.Position position()>
<polyglot.types.SemanticException: void <init>()>
<polyglot.types.SemanticException: void <init>(java.lang.String)>
<polyglot.types.SemanticException: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.types.SourceClassResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.SourceClassResolver: void <init>(polyglot.frontend.Compiler,polyglot.frontend.ExtensionInfo,java.lang.String,polyglot.types.reflect.ClassFileLoader,boolean)>
<polyglot.types.TableResolver: boolean packageExists(java.lang.String)>
<polyglot.types.TableResolver: polyglot.types.Named find(java.lang.String)>
<polyglot.types.TableResolver: void <init>()>
<polyglot.types.TableResolver: void addNamed(java.lang.String,polyglot.types.Named)>
<polyglot.types.reflect.ClassFile: java.lang.String classNameCP(int)>
<polyglot.types.reflect.ClassFile: java.lang.String compilerVersion(java.lang.String)>
<polyglot.types.reflect.ClassFile: java.lang.String encodedClassType(java.lang.String)>
<polyglot.types.reflect.ClassFile: java.util.List typeListForString(polyglot.types.TypeSystem,java.lang.String)>
<polyglot.types.reflect.ClassFile: long sourceLastModified(java.lang.String)>
<polyglot.types.reflect.ClassFile: polyglot.types.ParsedClassType createType(polyglot.types.TypeSystem)>
<polyglot.types.reflect.ClassFile: polyglot.types.ParsedClassType type(polyglot.types.TypeSystem)>
<polyglot.types.reflect.ClassFile: polyglot.types.Type arrayOf(polyglot.types.Type,int)>
<polyglot.types.reflect.ClassFile: polyglot.types.Type typeForString(polyglot.types.TypeSystem,java.lang.String)>
<polyglot.types.reflect.ClassFile: polyglot.types.reflect.Field createField(java.io.DataInputStream)>
<polyglot.types.reflect.ClassFile: polyglot.types.reflect.JLCInfo getJLCInfo(java.lang.String)>
<polyglot.types.reflect.ClassFile: polyglot.types.reflect.Method createMethod(java.io.DataInputStream)>
<polyglot.types.reflect.ClassFile: void <init>(java.io.File,byte[],polyglot.frontend.ExtensionInfo)>
<polyglot.types.reflect.ClassFile: void initMemberClasses(polyglot.types.ParsedClassType)>
<polyglot.types.reflect.ClassFile: void read(java.io.DataInputStream)>
<polyglot.types.reflect.ClassFile: void readFields(java.io.DataInputStream)>
<polyglot.types.reflect.ClassFile: void readMethods(java.io.DataInputStream)>
<polyglot.types.reflect.ClassFileLoader: boolean packageExists(java.io.File,java.lang.String)>
<polyglot.types.reflect.ClassFileLoader: java.util.zip.ZipFile loadZip(java.io.File)>
<polyglot.types.reflect.ClassFileLoader: polyglot.types.reflect.ClassFile loadClass(java.io.File,java.lang.String)>
<polyglot.types.reflect.ClassFileLoader: polyglot.types.reflect.ClassFile loadFromFile(java.lang.String,java.io.File)>
<polyglot.types.reflect.ClassFileLoader: polyglot.types.reflect.ClassFile loadFromStream(java.io.File,java.io.InputStream,java.lang.String)>
<polyglot.types.reflect.ClassFileLoader: polyglot.types.reflect.ClassFile loadFromZip(java.io.File,java.util.zip.ZipFile,java.lang.String)>
<polyglot.types.reflect.ClassFileLoader: void <init>(polyglot.frontend.ExtensionInfo)>
<polyglot.types.reflect.ClassPathLoader: polyglot.types.reflect.ClassFile loadClass(java.lang.String)>
<polyglot.types.reflect.ClassPathLoader: void <init>(java.lang.String,polyglot.types.reflect.ClassFileLoader)>
<polyglot.types.reflect.Constant: java.lang.Object value()>
<polyglot.types.reflect.Constant: void <init>(int,java.lang.Object)>
<polyglot.types.reflect.Exceptions: void <init>(polyglot.types.reflect.ClassFile,java.io.DataInputStream,int,int)>
<polyglot.types.reflect.Field: polyglot.types.FieldInstance fieldInstance(polyglot.types.TypeSystem,polyglot.types.ClassType)>
<polyglot.types.reflect.Field: void <init>(java.io.DataInputStream,polyglot.types.reflect.ClassFile)>
<polyglot.types.reflect.Method: polyglot.types.ConstructorInstance constructorInstance(polyglot.types.TypeSystem,polyglot.types.ClassType,polyglot.types.reflect.Field[])>
<polyglot.types.reflect.Method: polyglot.types.MethodInstance methodInstance(polyglot.types.TypeSystem,polyglot.types.ClassType)>
<polyglot.types.reflect.Method: void <init>(java.io.DataInputStream,polyglot.types.reflect.ClassFile)>
<polyglot.types.reflect.Method: void initialize()>
<polyglot.util.AbstractErrorQueue: void <init>(int,java.lang.String)>
<polyglot.util.AbstractErrorQueue: void enqueue(int,java.lang.String)>
<polyglot.util.AbstractErrorQueue: void enqueue(int,java.lang.String,polyglot.util.Position)>
<polyglot.util.Base64: byte[] decode(java.lang.String)>
<polyglot.util.CollectionUtil: boolean equals(java.util.Collection,java.util.Collection)>
<polyglot.util.CollectionUtil: java.lang.Object firstOrElse(java.util.Collection,java.lang.Object)>
<polyglot.util.CollectionUtil: java.util.List list(java.lang.Object)>
<polyglot.util.CollectionUtil: java.util.List list(java.lang.Object,java.lang.Object)>
<polyglot.util.Enum$EnumKey: java.lang.String toString()>
<polyglot.util.Enum$EnumKey: void <init>(polyglot.util.Enum)>
<polyglot.util.Enum: java.lang.String toString()>
<polyglot.util.Enum: polyglot.util.Enum intern()>
<polyglot.util.Enum: void <init>(java.lang.String)>
<polyglot.util.ErrorInfo: java.lang.String getMessage()>
<polyglot.util.ErrorInfo: polyglot.util.Position getPosition()>
<polyglot.util.ErrorInfo: void <init>(int,java.lang.String,polyglot.util.Position)>
<polyglot.util.IdentityKey: java.lang.Object object()>
<polyglot.util.IdentityKey: void <init>(java.lang.Object)>
<polyglot.util.InternalCompilerError: java.lang.String getMessage()>
<polyglot.util.InternalCompilerError: java.lang.String message()>
<polyglot.util.InternalCompilerError: polyglot.util.Position position()>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.String,polyglot.util.Position,java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(java.lang.Throwable)>
<polyglot.util.InternalCompilerError: void <init>(polyglot.util.Position,java.lang.String)>
<polyglot.util.Position: java.lang.String file()>
<polyglot.util.Position: java.lang.String nameAndLineString()>
<polyglot.util.Position: java.lang.String toString()>
<polyglot.util.Position: void <init>(java.lang.String)>
<polyglot.util.Position: void <init>(java.lang.String,int,int)>
<polyglot.util.Position: void <init>(java.lang.String,int,int,int,int)>
<polyglot.util.Position: void <init>(polyglot.util.Position,polyglot.util.Position)>
<polyglot.util.StdErrorQueue: java.io.Reader reader(polyglot.util.Position)>
<polyglot.util.StdErrorQueue: void <init>(java.io.PrintStream,int,java.lang.String)>
<polyglot.util.StdErrorQueue: void displayError(polyglot.util.ErrorInfo)>
<polyglot.util.StdErrorQueue: void showError(polyglot.util.Position)>
<polyglot.util.StringUtil: java.lang.String getFirstComponent(java.lang.String)>
<polyglot.util.StringUtil: java.lang.String getPackageComponent(java.lang.String)>
<polyglot.util.StringUtil: java.lang.String getShortNameComponent(java.lang.String)>
<polyglot.util.SubtypeSet: boolean add(java.lang.Object)>
<polyglot.util.SubtypeSet: boolean addAll(java.util.Collection)>
<polyglot.util.SubtypeSet: boolean contains(java.lang.Object)>
<polyglot.util.SubtypeSet: boolean remove(java.lang.Object)>
<polyglot.util.SubtypeSet: java.util.Iterator iterator()>
<polyglot.util.SubtypeSet: void <init>(polyglot.types.Type)>
<polyglot.util.SubtypeSet: void <init>(polyglot.util.SubtypeSet)>
<polyglot.util.TypeEncoder: java.lang.String encode(polyglot.types.Type)>
<polyglot.util.TypeEncoder: polyglot.types.Type decode(java.lang.String)>
<polyglot.util.TypeEncoder: void <init>(polyglot.types.TypeSystem)>
<polyglot.util.TypeInputStream: java.lang.Object resolveObject(java.lang.Object)>
<polyglot.util.TypeInputStream: void <init>(java.io.InputStream,polyglot.types.TypeSystem)>
<polyglot.util.TypeOutputStream: java.lang.Object placeHolder(polyglot.types.TypeObject)>
<polyglot.util.TypeOutputStream: java.lang.Object replaceObject(java.lang.Object)>
<polyglot.util.TypedList: boolean add(java.lang.Object)>
<polyglot.util.TypedList: boolean addAll(int,java.util.Collection)>
<polyglot.util.TypedList: boolean addAll(java.util.Collection)>
<polyglot.util.TypedList: boolean contains(java.lang.Object)>
<polyglot.util.TypedList: java.lang.Object get(int)>
<polyglot.util.TypedList: java.lang.Object remove(int)>
<polyglot.util.TypedList: java.lang.Object[] toArray()>
<polyglot.util.TypedList: java.lang.Object[] toArray(java.lang.Object[])>
<polyglot.util.TypedList: java.lang.String toString()>
<polyglot.util.TypedList: java.util.Iterator iterator()>
<polyglot.util.TypedList: java.util.List subList(int,int)>
<polyglot.util.TypedList: java.util.ListIterator listIterator()>
<polyglot.util.TypedList: java.util.ListIterator listIterator(int)>
<polyglot.util.TypedList: polyglot.util.TypedList copy(java.util.List,java.lang.Class,boolean)>
<polyglot.util.TypedList: polyglot.util.TypedList copyAndCheck(java.util.List,java.lang.Class,boolean)>
<polyglot.util.TypedList: void <init>(java.util.List,java.lang.Class,boolean)>
<polyglot.util.TypedList: void tryIns(java.util.Collection)>
<polyglot.util.TypedListIterator: java.lang.Object next()>
<polyglot.util.TypedListIterator: void <init>(java.util.ListIterator,java.lang.Class,boolean)>
<polyglot.util.UnicodeWriter: void <init>(java.io.Writer)>
<polyglot.visit.AddMemberVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.AmbiguityRemover$Kind: void <init>(java.lang.String)>
<polyglot.visit.AmbiguityRemover: polyglot.visit.AmbiguityRemover$Kind kind()>
<polyglot.visit.AmbiguityRemover: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.visit.AmbiguityRemover$Kind)>
<polyglot.visit.AmbiguityRemover: void addSuperDependencies(polyglot.types.ClassType)>
<polyglot.visit.AscriptionVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.AscriptionVisitor: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.AscriptionVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.CFGBuildError: void <init>(java.lang.String,polyglot.util.Position)>
<polyglot.visit.CFGBuilder$EdgeKeyTermPair: void <init>(polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: java.lang.Object copy()>
<polyglot.visit.CFGBuilder: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.CFGBuilder: polyglot.visit.CFGBuilder enterFinally(polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: polyglot.visit.CFGBuilder push(polyglot.ast.Stmt)>
<polyglot.visit.CFGBuilder: polyglot.visit.CFGBuilder push(polyglot.ast.Stmt,boolean)>
<polyglot.visit.CFGBuilder: polyglot.visit.CFGBuilder tryFinally(polyglot.visit.CFGBuilder,polyglot.ast.Term,polyglot.visit.CFGBuilder,polyglot.ast.Block)>
<polyglot.visit.CFGBuilder: void <init>(polyglot.types.TypeSystem,polyglot.visit.FlowGraph,polyglot.visit.DataFlow)>
<polyglot.visit.CFGBuilder: void edge(polyglot.ast.Term,polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey)>
<polyglot.visit.CFGBuilder: void edge(polyglot.visit.CFGBuilder,polyglot.ast.Term,polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey)>
<polyglot.visit.CFGBuilder: void visitBranchTarget(polyglot.ast.Branch)>
<polyglot.visit.CFGBuilder: void visitCFG(polyglot.ast.Term,java.util.List)>
<polyglot.visit.CFGBuilder: void visitCFG(polyglot.ast.Term,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void visitCFG(polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey,java.util.List)>
<polyglot.visit.CFGBuilder: void visitCFG(polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void visitCFG(polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term,polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void visitCFGList(java.util.List,polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void visitGraph()>
<polyglot.visit.CFGBuilder: void visitReturn(polyglot.ast.Return)>
<polyglot.visit.CFGBuilder: void visitThrow(polyglot.ast.Term)>
<polyglot.visit.CFGBuilder: void visitThrow(polyglot.ast.Term,polyglot.types.Type)>
<polyglot.visit.ClassSerializer: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ClassSerializer: polyglot.ast.Node override(polyglot.ast.Node)>
<polyglot.visit.ClassSerializer: void <init>(polyglot.types.TypeSystem,polyglot.ast.NodeFactory,java.util.Date,polyglot.util.ErrorQueue,polyglot.main.Version)>
<polyglot.visit.ConstructorCallChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.ConstructorCallChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ContextVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ContextVisitor: polyglot.types.Context context()>
<polyglot.visit.ContextVisitor: polyglot.visit.ContextVisitor context(polyglot.types.Context)>
<polyglot.visit.ContextVisitor: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.ContextVisitor: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.ContextVisitor: polyglot.visit.NodeVisitor superEnter(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.ContextVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.DataFlow$FlowGraphSource: void <init>(polyglot.visit.FlowGraph,polyglot.ast.CodeDecl)>
<polyglot.visit.DataFlow$Frame: void <init>(polyglot.visit.FlowGraph$Peer,boolean)>
<polyglot.visit.DataFlow: java.util.LinkedList findSCCs(polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: java.util.List filterItemsNonException(java.util.List,java.util.List)>
<polyglot.visit.DataFlow: java.util.Map flow(java.util.List,java.util.List,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.DataFlow: java.util.Map flowBooleanConditions(polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph,polyglot.ast.Expr,java.util.Set)>
<polyglot.visit.DataFlow: java.util.Map flowToBooleanFlow(java.util.List,java.util.List,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.DataFlow: java.util.Map itemToMap(polyglot.visit.DataFlow$Item,java.util.Set)>
<polyglot.visit.DataFlow: java.util.Map itemsToMap(polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,java.util.Set)>
<polyglot.visit.DataFlow: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.DataFlow: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.DataFlow: polyglot.visit.CFGBuilder createCFGBuilder(polyglot.types.TypeSystem,polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: polyglot.visit.DataFlow$Item confluence(java.util.List,java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: polyglot.visit.DataFlow$Item safeConfluence(java.util.List,java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: polyglot.visit.DataFlow$Item safeConfluence(polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph$EdgeKey,polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: polyglot.visit.DataFlow$Item safeConfluence(polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph$EdgeKey,polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph$EdgeKey,polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph$EdgeKey,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: polyglot.visit.FlowGraph currentFlowGraph()>
<polyglot.visit.DataFlow: polyglot.visit.FlowGraph initGraph(polyglot.ast.CodeDecl,polyglot.ast.Term)>
<polyglot.visit.DataFlow: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.DataFlow: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,boolean)>
<polyglot.visit.DataFlow: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,boolean,boolean)>
<polyglot.visit.DataFlow: void dataflow(polyglot.ast.CodeDecl)>
<polyglot.visit.DataFlow: void dataflow(polyglot.visit.FlowGraph)>
<polyglot.visit.DataFlow: void dumpFlowGraph(polyglot.visit.FlowGraph,polyglot.ast.Term)>
<polyglot.visit.DataFlow: void post(polyglot.visit.FlowGraph,polyglot.ast.Term)>
<polyglot.visit.DumpAst: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.DumpAst: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<polyglot.visit.DumpAst: void <init>(polyglot.util.CodeWriter)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.frontend.Job job()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.ErrorHandlingVisitor: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: polyglot.visit.NodeVisitor enterError(polyglot.ast.Node)>
<polyglot.visit.ErrorHandlingVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ExceptionChecker: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ExceptionChecker: polyglot.util.Position exceptionPosition(polyglot.types.Type)>
<polyglot.visit.ExceptionChecker: polyglot.util.SubtypeSet throwsSet()>
<polyglot.visit.ExceptionChecker: polyglot.visit.ExceptionChecker pop()>
<polyglot.visit.ExceptionChecker: polyglot.visit.ExceptionChecker push()>
<polyglot.visit.ExceptionChecker: polyglot.visit.ExceptionChecker pushNew()>
<polyglot.visit.ExceptionChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.ExceptionChecker: polyglot.visit.NodeVisitor enterError(polyglot.ast.Node)>
<polyglot.visit.ExceptionChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ExceptionChecker: void throwsException(polyglot.types.Type,polyglot.util.Position)>
<polyglot.visit.ExitChecker: java.util.Map flow(polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.ExitChecker: polyglot.visit.DataFlow$Item confluence(java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.ExitChecker: polyglot.visit.FlowGraph initGraph(polyglot.ast.CodeDecl,polyglot.ast.Term)>
<polyglot.visit.ExitChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.ExitChecker: void check(polyglot.visit.FlowGraph,polyglot.ast.Term,polyglot.visit.DataFlow$Item,java.util.Map)>
<polyglot.visit.FlowGraph$Edge: polyglot.visit.FlowGraph$EdgeKey getKey()>
<polyglot.visit.FlowGraph$Edge: polyglot.visit.FlowGraph$Peer getTarget()>
<polyglot.visit.FlowGraph$Edge: void <init>(polyglot.visit.FlowGraph$EdgeKey,polyglot.visit.FlowGraph$Peer)>
<polyglot.visit.FlowGraph$EdgeKey: java.lang.String toString()>
<polyglot.visit.FlowGraph$EdgeKey: void <init>(java.lang.Object)>
<polyglot.visit.FlowGraph$ExceptionEdgeKey: java.lang.String toString()>
<polyglot.visit.FlowGraph$ExceptionEdgeKey: polyglot.types.Type type()>
<polyglot.visit.FlowGraph$ExceptionEdgeKey: void <init>(polyglot.types.Type)>
<polyglot.visit.FlowGraph$ListKey: boolean equals(java.lang.Object)>
<polyglot.visit.FlowGraph$ListKey: int hashCode()>
<polyglot.visit.FlowGraph$ListKey: void <init>(java.util.List)>
<polyglot.visit.FlowGraph$Peer: java.util.List preds()>
<polyglot.visit.FlowGraph$Peer: java.util.List succs()>
<polyglot.visit.FlowGraph$Peer: java.util.Set succEdgeKeys()>
<polyglot.visit.FlowGraph$Peer: void <init>(polyglot.ast.Term,java.util.List)>
<polyglot.visit.FlowGraph: java.util.Collection peers()>
<polyglot.visit.FlowGraph: java.util.Collection peers(polyglot.ast.Term)>
<polyglot.visit.FlowGraph: polyglot.ast.Term entryNode()>
<polyglot.visit.FlowGraph: polyglot.ast.Term exitNode()>
<polyglot.visit.FlowGraph: polyglot.ast.Term finishNode()>
<polyglot.visit.FlowGraph: polyglot.ast.Term root()>
<polyglot.visit.FlowGraph: polyglot.ast.Term startNode()>
<polyglot.visit.FlowGraph: polyglot.visit.FlowGraph$Peer peer(polyglot.ast.Term,java.util.List,polyglot.visit.DataFlow)>
<polyglot.visit.FlowGraph: void <init>(polyglot.ast.Term,boolean)>
<polyglot.visit.FwdReferenceChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.FwdReferenceChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.HaltingVisitor: java.lang.Object copy()>
<polyglot.visit.HaltingVisitor: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.HaltingVisitor: polyglot.visit.HaltingVisitor bypass(polyglot.ast.Node)>
<polyglot.visit.HaltingVisitor: polyglot.visit.HaltingVisitor bypassChildren(polyglot.ast.Node)>
<polyglot.visit.HaltingVisitor: polyglot.visit.HaltingVisitor visitChildren()>
<polyglot.visit.InitChecker$ClassBodyInfo: void <init>()>
<polyglot.visit.InitChecker$DataFlowItem: void <init>(java.util.Map)>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$InitCount getMax()>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$InitCount getMin()>
<polyglot.visit.InitChecker$MinMaxInitCount: polyglot.visit.InitChecker$MinMaxInitCount join(polyglot.visit.InitChecker$MinMaxInitCount,polyglot.visit.InitChecker$MinMaxInitCount)>
<polyglot.visit.InitChecker$MinMaxInitCount: void <init>(polyglot.visit.InitChecker$InitCount,polyglot.visit.InitChecker$InitCount)>
<polyglot.visit.InitChecker: java.util.Map flow(java.util.List,java.util.List,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.InitChecker: java.util.Map flow(polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.InitChecker: java.util.Map flowFieldAssign(polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.FlowGraph,polyglot.ast.FieldAssign,java.util.Set)>
<polyglot.visit.InitChecker: java.util.Map flowFormal(polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.FlowGraph,polyglot.ast.Formal,java.util.Set)>
<polyglot.visit.InitChecker: java.util.Map flowLocalAssign(polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.FlowGraph,polyglot.ast.LocalAssign,java.util.Set)>
<polyglot.visit.InitChecker: java.util.Map flowLocalDecl(polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.FlowGraph,polyglot.ast.LocalDecl,java.util.Set)>
<polyglot.visit.InitChecker: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.InitChecker: polyglot.visit.DataFlow$Item confluence(java.util.List,java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.InitChecker: polyglot.visit.DataFlow$Item confluence(java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.InitChecker: polyglot.visit.DataFlow$Item createInitialItem(polyglot.visit.FlowGraph,polyglot.ast.Term)>
<polyglot.visit.InitChecker: polyglot.visit.FlowGraph initGraph(polyglot.ast.CodeDecl,polyglot.ast.Term)>
<polyglot.visit.InitChecker: polyglot.visit.InitChecker$DataFlowItem createInitDFI()>
<polyglot.visit.InitChecker: polyglot.visit.NodeVisitor enterCall(polyglot.ast.Node)>
<polyglot.visit.InitChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.InitChecker: void check(polyglot.visit.FlowGraph,polyglot.ast.Term,polyglot.visit.DataFlow$Item,java.util.Map)>
<polyglot.visit.InitChecker: void checkClassBody(polyglot.visit.FlowGraph,polyglot.ast.ClassBody,polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.InitChecker$DataFlowItem)>
<polyglot.visit.InitChecker: void checkLocalsUsedByInnerClass(polyglot.visit.FlowGraph,polyglot.ast.ClassBody,java.util.Set,polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.InitChecker$DataFlowItem)>
<polyglot.visit.InitChecker: void checkNonStaticFinalFieldsInit(polyglot.ast.ClassBody)>
<polyglot.visit.InitChecker: void checkStaticFinalFieldsInit(polyglot.ast.ClassBody)>
<polyglot.visit.InitChecker: void dataflow(polyglot.ast.Expr)>
<polyglot.visit.InitChecker: void finishConstructorDecl(polyglot.visit.FlowGraph,polyglot.ast.ConstructorDecl,polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.InitChecker$DataFlowItem)>
<polyglot.visit.InitChecker: void finishInitializer(polyglot.visit.FlowGraph,polyglot.ast.Initializer,polyglot.visit.InitChecker$DataFlowItem,polyglot.visit.InitChecker$DataFlowItem)>
<polyglot.visit.InitChecker: void setupClassBody(polyglot.ast.ClassBody)>
<polyglot.visit.NodeVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.NodeVisitor: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.NodeVisitor: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.NodeVisitor: polyglot.ast.Node visitEdge(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.NodeVisitor: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.NodeVisitor: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<polyglot.visit.NodeVisitor: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<polyglot.visit.PrettyPrinter: void printAst(polyglot.ast.Node,polyglot.util.CodeWriter)>
<polyglot.visit.ReachChecker: java.util.Map flow(polyglot.visit.DataFlow$Item,polyglot.visit.FlowGraph,polyglot.ast.Term,java.util.Set)>
<polyglot.visit.ReachChecker: polyglot.ast.Node checkReachability(polyglot.ast.Term)>
<polyglot.visit.ReachChecker: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.ReachChecker: polyglot.visit.DataFlow$Item confluence(java.util.List,java.util.List,polyglot.ast.Term,polyglot.visit.FlowGraph)>
<polyglot.visit.ReachChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.Translator: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.Translator: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.Translator: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory,polyglot.frontend.TargetFactory)>
<polyglot.visit.TypeBuilder: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<polyglot.visit.TypeBuilder: polyglot.ast.NodeFactory nodeFactory()>
<polyglot.visit.TypeBuilder: polyglot.frontend.Job job()>
<polyglot.visit.TypeBuilder: polyglot.types.ImportTable importTable()>
<polyglot.visit.TypeBuilder: polyglot.types.Package currentPackage()>
<polyglot.visit.TypeBuilder: polyglot.types.ParsedClassType currentClass()>
<polyglot.visit.TypeBuilder: polyglot.types.ParsedClassType newClass(polyglot.util.Position,polyglot.types.Flags,java.lang.String)>
<polyglot.visit.TypeBuilder: polyglot.types.TypeSystem typeSystem()>
<polyglot.visit.TypeBuilder: polyglot.visit.NodeVisitor begin()>
<polyglot.visit.TypeBuilder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<polyglot.visit.TypeBuilder: polyglot.visit.TypeBuilder push()>
<polyglot.visit.TypeBuilder: polyglot.visit.TypeBuilder pushAnonClass(polyglot.util.Position)>
<polyglot.visit.TypeBuilder: polyglot.visit.TypeBuilder pushClass(polyglot.types.ParsedClassType)>
<polyglot.visit.TypeBuilder: polyglot.visit.TypeBuilder pushClass(polyglot.util.Position,polyglot.types.Flags,java.lang.String)>
<polyglot.visit.TypeBuilder: polyglot.visit.TypeBuilder pushCode()>
<polyglot.visit.TypeBuilder: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<polyglot.visit.TypeBuilder: void setImportTable(polyglot.types.ImportTable)>
<polyglot.visit.TypeChecker: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.AbstractJasminClass: java.lang.String jasminDescriptorOf(soot.Type)>
<soot.AbstractJasminClass: void <init>(soot.SootClass)>
<soot.AbstractJasminClass: void emit(java.lang.String)>
<soot.AbstractJasminClass: void okayEmit(java.lang.String)>
<soot.AbstractSootFieldRef$FieldResolutionFailedException: java.lang.String toString()>
<soot.AbstractSootFieldRef$FieldResolutionFailedException: void <init>(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: java.lang.String access$100(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: java.lang.String getSignature()>
<soot.AbstractSootFieldRef: java.lang.String name()>
<soot.AbstractSootFieldRef: soot.SootClass access$000(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: soot.SootClass declaringClass()>
<soot.AbstractSootFieldRef: soot.SootField access$300(soot.AbstractSootFieldRef,java.lang.StringBuffer)>
<soot.AbstractSootFieldRef: soot.SootField resolve()>
<soot.AbstractSootFieldRef: soot.SootField resolve(java.lang.StringBuffer)>
<soot.AbstractSootFieldRef: soot.Type access$200(soot.AbstractSootFieldRef)>
<soot.AbstractSootFieldRef: soot.Type type()>
<soot.AbstractSootFieldRef: void <init>(soot.SootClass,java.lang.String,soot.Type,boolean)>
<soot.AbstractSootMethodRef$ClassResolutionFailedException: java.lang.String toString()>
<soot.AbstractSootMethodRef$ClassResolutionFailedException: void <init>(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: java.lang.String access$100(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: java.lang.String getSignature()>
<soot.AbstractSootMethodRef: java.lang.String name()>
<soot.AbstractSootMethodRef: soot.SootClass access$000(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: soot.SootClass declaringClass()>
<soot.AbstractSootMethodRef: soot.SootMethod access$400(soot.AbstractSootMethodRef,java.lang.StringBuffer)>
<soot.AbstractSootMethodRef: soot.SootMethod checkStatic(soot.SootMethod)>
<soot.AbstractSootMethodRef: soot.SootMethod resolve()>
<soot.AbstractSootMethodRef: soot.SootMethod resolve(java.lang.StringBuffer)>
<soot.AbstractSootMethodRef: soot.Type access$300(soot.AbstractSootMethodRef)>
<soot.AbstractSootMethodRef: soot.Type returnType()>
<soot.AbstractSootMethodRef: soot.util.NumberedString getSubSignature()>
<soot.AbstractSootMethodRef: void <init>(soot.SootClass,java.lang.String,java.util.List,soot.Type,boolean)>
<soot.AbstractTrap: java.util.List getUnitBoxes()>
<soot.AbstractTrap: soot.SootClass getException()>
<soot.AbstractTrap: soot.Unit getBeginUnit()>
<soot.AbstractTrap: soot.Unit getEndUnit()>
<soot.AbstractTrap: soot.Unit getHandlerUnit()>
<soot.AbstractTrap: void <init>(soot.SootClass,soot.UnitBox,soot.UnitBox,soot.UnitBox)>
<soot.AbstractUnit: java.util.List getBoxesPointingToThis()>
<soot.AbstractUnit: java.util.List getUseAndDefBoxes()>
<soot.AbstractUnit: void addBoxPointingToThis(soot.UnitBox)>
<soot.AbstractUnit: void clearUnitBoxes()>
<soot.AbstractUnit: void redirectJumpsToThisTo(soot.Unit)>
<soot.AbstractUnit: void removeBoxPointingToThis(soot.UnitBox)>
<soot.AbstractUnitAllMapTo: java.lang.Object get(java.lang.Object)>
<soot.AbstractUnitAllMapTo: void <init>(java.lang.Object)>
<soot.AbstractUnitBox: soot.Unit getUnit()>
<soot.AbstractUnitBox: void setUnit(soot.Unit)>
<soot.AbstractUnitPrinter: java.lang.String getIndent()>
<soot.AbstractUnitPrinter: soot.AttributesUnitPrinter getPositionTagger()>
<soot.AbstractUnitPrinter: void decIndent()>
<soot.AbstractUnitPrinter: void setIndent(java.lang.String)>
<soot.AbstractUnitPrinter: void setPositionTagger(soot.AttributesUnitPrinter)>
<soot.AbstractValueBox: soot.Value getValue()>
<soot.AbstractValueBox: void setValue(soot.Value)>
<soot.AnySubType: soot.AnySubType v(soot.RefType)>
<soot.AnySubType: soot.RefType getBase()>
<soot.AnySubType: void <init>(soot.RefType)>
<soot.ArrayType: soot.ArrayType makeArrayType()>
<soot.ArrayType: soot.ArrayType v(soot.Type,int)>
<soot.ArrayType: soot.Type getElementType()>
<soot.ArrayType: void <init>(soot.Type,int)>
<soot.ArrayType: void apply(soot.util.Switch)>
<soot.BodyPack: void <init>(java.lang.String)>
<soot.BodyTransformer: void transform(soot.Body,java.lang.String,java.util.Map)>
<soot.ClassSource: void <init>(java.lang.String)>
<soot.CoffiClassProvider: soot.ClassSource find(java.lang.String)>
<soot.CoffiClassSource: void <init>(java.lang.String,java.io.InputStream)>
<soot.CompilationDeathException: java.lang.String getMessage()>
<soot.CompilationDeathException: void <init>(int)>
<soot.CompilationDeathException: void <init>(int,java.lang.String)>
<soot.CompilationDeathException: void <init>(java.lang.String)>
<soot.EquivalentValue: java.lang.Object clone()>
<soot.EquivalentValue: java.lang.String toString()>
<soot.EquivalentValue: java.util.List getUseBoxes()>
<soot.EquivalentValue: soot.Type getType()>
<soot.EquivalentValue: soot.Value getValue()>
<soot.EquivalentValue: void <init>(soot.Value)>
<soot.FastHierarchy$Interval: void <init>(soot.FastHierarchy)>
<soot.FastHierarchy: boolean canStoreClass(soot.SootClass,soot.SootClass)>
<soot.FastHierarchy: boolean canStoreType(soot.Type,soot.Type)>
<soot.FastHierarchy: int dfsVisit(int,soot.SootClass)>
<soot.FastHierarchy: java.util.Collection getSubclassesOf(soot.SootClass)>
<soot.FastHierarchy: java.util.Set getAllImplementersOfInterface(soot.SootClass)>
<soot.FastHierarchy: java.util.Set getAllSubinterfaces(soot.SootClass)>
<soot.FastHierarchy: void <init>()>
<soot.FastHierarchy: void put(java.util.Map,java.lang.Object,java.lang.Object)>
<soot.Hierarchy: boolean isClassSubclassOfIncluding(soot.SootClass,soot.SootClass)>
<soot.Hierarchy: boolean isClassSuperclassOf(soot.SootClass,soot.SootClass)>
<soot.Hierarchy: boolean isClassSuperclassOfIncluding(soot.SootClass,soot.SootClass)>
<soot.Hierarchy: boolean isInterfaceSubinterfaceOf(soot.SootClass,soot.SootClass)>
<soot.Hierarchy: java.util.List getDirectImplementersOf(soot.SootClass)>
<soot.Hierarchy: java.util.List getImplementersOf(soot.SootClass)>
<soot.Hierarchy: java.util.List getSubclassesOf(soot.SootClass)>
<soot.Hierarchy: java.util.List getSubclassesOfIncluding(soot.SootClass)>
<soot.Hierarchy: java.util.List getSubinterfacesOf(soot.SootClass)>
<soot.Hierarchy: java.util.List getSubinterfacesOfIncluding(soot.SootClass)>
<soot.Hierarchy: java.util.List getSuperclassesOf(soot.SootClass)>
<soot.Hierarchy: java.util.List getSuperclassesOfIncluding(soot.SootClass)>
<soot.Hierarchy: void <init>()>
<soot.JastAddInitialResolver$1: soot.Body getBody(soot.SootMethod,java.lang.String)>
<soot.JastAddInitialResolver: soot.JastAddJ.TypeDecl access$000(soot.JastAddInitialResolver,soot.JastAddJ.TypeDecl,soot.SootClass)>
<soot.JastAddInitialResolver: soot.JastAddJ.TypeDecl findNestedTypeDecl(soot.JastAddJ.TypeDecl,soot.SootClass)>
<soot.JastAddInitialResolver: soot.javaToJimple.IInitialResolver$Dependencies resolveFromJavaFile(soot.SootClass)>
<soot.JastAddInitialResolver: void formAst(java.lang.String,java.util.List,java.lang.String)>
<soot.JastAddJ.ASTNode$1: boolean hasNext()>
<soot.JastAddJ.ASTNode$1: java.lang.Object next()>
<soot.JastAddJ.ASTNode$1: soot.JastAddJ.ASTNode next()>
<soot.JastAddJ.ASTNode$1: void <init>(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: boolean Define_boolean_hasPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ASTNode: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ASTNode: boolean Define_boolean_reachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: boolean Define_boolean_reportUnreachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.ASTNode: boolean reachedException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ASTNode: boolean unassignedEverywhere(soot.JastAddJ.Variable,soot.JastAddJ.TryStmt)>
<soot.JastAddJ.ASTNode: boolean unassignedEverywhere_compute(soot.JastAddJ.Variable,soot.JastAddJ.TryStmt)>
<soot.JastAddJ.ASTNode: boolean usesTypeVariable()>
<soot.JastAddJ.ASTNode: boolean usesTypeVariable_compute()>
<soot.JastAddJ.ASTNode: java.lang.String Define_String_hostPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.lang.String Define_String_methodHost(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.lang.String Define_String_packageName(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.lang.String sourceFile()>
<soot.JastAddJ.ASTNode: java.lang.String toString()>
<soot.JastAddJ.ASTNode: java.util.ArrayList Define_ArrayList_exceptionRanges(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.util.Collection Define_Collection_lookupConstructor(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.util.Collection Define_Collection_lookupMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: java.util.Collection Define_Collection_lookupSuperConstructor(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: java.util.Iterator iterator()>
<soot.JastAddJ.ASTNode: soot.Immediate asImmediate(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode Define_ASTNode_enclosingBlock(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode clone()>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode getChild(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode getChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode getChildNoTransform(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode getParent()>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode setEnd(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode setStart(int)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ASTNode with(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.Annotation Define_Annotation_lookupAnnotation(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.BodyDecl Define_BodyDecl_enclosingBodyDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.Case Define_Case_bind(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Case)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.CompilationUnit Define_CompilationUnit_compilationUnit(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ConstructorDecl Define_ConstructorDecl_constructorDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ConstructorDecl Define_ConstructorDecl_unknownConstructor(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.ElementValue Define_ElementValue_lookupElementTypeValue(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.Expr Define_Expr_nestedScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.GLBType Define_GLBType_lookupGLBType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.util.ArrayList)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.GenericMethodDecl Define_GenericMethodDecl_genericMethodDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.LUBType Define_LUBType_lookupLUBType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.util.Collection)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.LabeledStmt Define_LabeledStmt_lookupLabel(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.MethodDecl Define_MethodDecl_unknownMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.SimpleSet Define_SimpleSet_allImportedTypes(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.SimpleSet removeInstanceVariables(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.Stmt branchTarget(soot.JastAddJ.Stmt)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_assignConvertedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_componentType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingAnnotationDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingInstance(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_expectedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_genericDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_hostType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String,java.lang.String)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_lookupWildcardExtends(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_lookupWildcardSuper(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_returnType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_superType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_switchType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeBoolean(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeByte(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeChar(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeCloneable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeDouble(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeError(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeException(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeFloat(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeInt(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeLong(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeNull(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeNullPointerException(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeObject(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeRuntimeException(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeSerializable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeShort(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeString(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeThrowable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeVoid(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_typeWildcard(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.TypeDecl Define_TypeDecl_unknownType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.Variable Define_Variable_unknownField(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.Local asLocal(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.ASTNode: soot.Local asLocal(soot.JastAddJ.Body,soot.Value,soot.Type)>
<soot.JastAddJ.ASTNode: soot.Value asRValue(soot.JastAddJ.Body,soot.Value)>
<soot.JastAddJ.ASTNode: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: void <init>()>
<soot.JastAddJ.ASTNode: void addChild(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: void checkEnum(soot.JastAddJ.EnumDecl)>
<soot.JastAddJ.ASTNode: void collectBranches(java.util.Collection)>
<soot.JastAddJ.ASTNode: void collectEnclosingVariables(java.util.HashSet,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ASTNode: void collectErrors()>
<soot.JastAddJ.ASTNode: void collectExceptions(java.util.Collection,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: void collectFinally(soot.JastAddJ.Stmt,java.util.ArrayList)>
<soot.JastAddJ.ASTNode: void collectTypesToHierarchy(java.util.Collection)>
<soot.JastAddJ.ASTNode: void collectTypesToSignatures(java.util.Collection)>
<soot.JastAddJ.ASTNode: void error(java.lang.String)>
<soot.JastAddJ.ASTNode: void flushCaches()>
<soot.JastAddJ.ASTNode: void insertChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.ASTNode: void jimplify1phase1()>
<soot.JastAddJ.ASTNode: void jimplify1phase2()>
<soot.JastAddJ.ASTNode: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ASTNode: void setChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.ASTNode: void setParent(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ASTNode: void transformation()>
<soot.JastAddJ.ASTNode: void warning(java.lang.String)>
<soot.JastAddJ.AbstractDot: boolean Define_boolean_hasPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.AbstractDot: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean canBeFalse()>
<soot.JastAddJ.AbstractDot: boolean canBeFalse_compute()>
<soot.JastAddJ.AbstractDot: boolean canBeTrue()>
<soot.JastAddJ.AbstractDot: boolean canBeTrue_compute()>
<soot.JastAddJ.AbstractDot: boolean isArrayAccess()>
<soot.JastAddJ.AbstractDot: boolean isArrayAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isClassAccess()>
<soot.JastAddJ.AbstractDot: boolean isClassAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isConstant()>
<soot.JastAddJ.AbstractDot: boolean isConstant_compute()>
<soot.JastAddJ.AbstractDot: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AbstractDot: boolean isPackageAccess()>
<soot.JastAddJ.AbstractDot: boolean isPackageAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isQualified()>
<soot.JastAddJ.AbstractDot: boolean isQualified_compute()>
<soot.JastAddJ.AbstractDot: boolean isSuperAccess()>
<soot.JastAddJ.AbstractDot: boolean isSuperAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isSuperConstructorAccess()>
<soot.JastAddJ.AbstractDot: boolean isSuperConstructorAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isThisAccess()>
<soot.JastAddJ.AbstractDot: boolean isThisAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isTypeAccess()>
<soot.JastAddJ.AbstractDot: boolean isTypeAccess_compute()>
<soot.JastAddJ.AbstractDot: boolean isVariable()>
<soot.JastAddJ.AbstractDot: boolean isVariable_compute()>
<soot.JastAddJ.AbstractDot: boolean staticContextQualifier()>
<soot.JastAddJ.AbstractDot: boolean staticContextQualifier_compute()>
<soot.JastAddJ.AbstractDot: java.lang.String Define_String_methodHost(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: java.lang.String typeName()>
<soot.JastAddJ.AbstractDot: java.lang.String typeName_compute()>
<soot.JastAddJ.AbstractDot: java.util.Collection Define_Collection_lookupConstructor(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: java.util.Collection Define_Collection_lookupMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.AbstractDot: java.util.Collection Define_Collection_lookupSuperConstructor(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.AbstractDot clone()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access lastAccess()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access lastAccess_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access nextAccess()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access nextAccess_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access rightSide()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Access rightSide_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Expr Define_Expr_nestedScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Expr leftSide()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Expr leftSide_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Expr prevExpr()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Expr prevExpr_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.NameType predNameType_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingInstance(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Variable varDecl()>
<soot.JastAddJ.AbstractDot: soot.JastAddJ.Variable varDecl_compute()>
<soot.JastAddJ.AbstractDot: soot.Value emitStore(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AbstractDot: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AbstractDot: void <init>()>
<soot.JastAddJ.AbstractDot: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.AbstractDot: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.AbstractWildcard: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AbstractWildcard: soot.JastAddJ.AbstractWildcard clone()>
<soot.JastAddJ.AbstractWildcard: void <init>()>
<soot.JastAddJ.Access: boolean hasPrevExpr()>
<soot.JastAddJ.Access: boolean hasPrevExpr_compute()>
<soot.JastAddJ.Access: boolean isQualified()>
<soot.JastAddJ.Access: boolean isQualified_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Access: soot.JastAddJ.Access addArrayDims(soot.JastAddJ.List)>
<soot.JastAddJ.Access: soot.JastAddJ.Access clone()>
<soot.JastAddJ.Access: soot.JastAddJ.Access lastAccess()>
<soot.JastAddJ.Access: soot.JastAddJ.Access lastAccess_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr nestedScope()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr prevExpr()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr prevExpr_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr qualifier()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr qualifier_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr unqualifiedScope()>
<soot.JastAddJ.Access: soot.JastAddJ.Expr unqualifiedScope_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.Access: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Access: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.Access: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.Access: soot.JastAddJ.Variable unknownField()>
<soot.JastAddJ.Access: soot.Local emitThis(soot.JastAddJ.Body,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Access: void <init>()>
<soot.JastAddJ.AddExpr: boolean firstStringAddPart()>
<soot.JastAddJ.AddExpr: boolean firstStringAddPart_compute()>
<soot.JastAddJ.AddExpr: boolean isStringAdd()>
<soot.JastAddJ.AddExpr: boolean isStringAdd_compute()>
<soot.JastAddJ.AddExpr: boolean lastStringAddPart_compute()>
<soot.JastAddJ.AddExpr: java.lang.String printOp()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.AddExpr clone()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.AddExpr copy()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.AddExpr fullCopy()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AddExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.AddExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AddExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AddExpr: void typeCheck()>
<soot.JastAddJ.AdditiveExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AdditiveExpr: soot.JastAddJ.AdditiveExpr clone()>
<soot.JastAddJ.AdditiveExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AdditiveExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.AdditiveExpr: void <init>()>
<soot.JastAddJ.AdditiveExpr: void typeCheck()>
<soot.JastAddJ.AmbiguousAccess: java.lang.String getID()>
<soot.JastAddJ.AmbiguousAccess: java.lang.String name()>
<soot.JastAddJ.AmbiguousAccess: java.lang.String name_compute()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.Access rewriteRule0()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.AmbiguousAccess clone()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.AmbiguousAccess copy()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.AmbiguousAccess fullCopy()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.SimpleSet qualifiedLookupType(java.lang.String)>
<soot.JastAddJ.AmbiguousAccess: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.AmbiguousAccess: void <init>(java.lang.String)>
<soot.JastAddJ.AmbiguousAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.AmbiguousAccess: void nameCheck()>
<soot.JastAddJ.AmbiguousAccess: void setID(java.lang.String)>
<soot.JastAddJ.AndBitwiseExpr: java.lang.String printOp()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.AndBitwiseExpr clone()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.AndBitwiseExpr copy()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.AndBitwiseExpr fullCopy()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.AndBitwiseExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.AndBitwiseExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AndBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AndLogicalExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean canBeFalse()>
<soot.JastAddJ.AndLogicalExpr: boolean canBeFalse_compute()>
<soot.JastAddJ.AndLogicalExpr: boolean canBeTrue()>
<soot.JastAddJ.AndLogicalExpr: boolean canBeTrue_compute()>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AndLogicalExpr: java.lang.String printOp()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.AndLogicalExpr clone()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.AndLogicalExpr copy()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.AndLogicalExpr fullCopy()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.AndLogicalExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.AndLogicalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AndLogicalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AndLogicalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AndLogicalExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.AnnotatedCompilationUnit: int getNumImportDecl()>
<soot.JastAddJ.AnnotatedCompilationUnit: int getNumTypeDecl()>
<soot.JastAddJ.AnnotatedCompilationUnit: java.lang.String Define_String_hostPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AnnotatedCompilationUnit: java.lang.String getPackageDecl()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.AnnotatedCompilationUnit clone()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.AnnotatedCompilationUnit copy()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.AnnotatedCompilationUnit fullCopy()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.ImportDecl getImportDecl(int)>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.List getImportDeclList()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.List getImportDeclListNoTransform()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.List getTypeDeclList()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.List getTypeDeclListNoTransform()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.List getTypeDecls()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.AnnotatedCompilationUnit: soot.JastAddJ.TypeDecl getTypeDecl(int)>
<soot.JastAddJ.AnnotatedCompilationUnit: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List,soot.JastAddJ.Modifiers)>
<soot.JastAddJ.AnnotatedCompilationUnit: void jimplify1phase2()>
<soot.JastAddJ.AnnotatedCompilationUnit: void nameCheck()>
<soot.JastAddJ.AnnotatedCompilationUnit: void setPackageDecl(java.lang.String)>
<soot.JastAddJ.AnnotatedCompilationUnit: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.Annotation: boolean isRuntimeInvisible()>
<soot.JastAddJ.Annotation: boolean isRuntimeInvisible_compute()>
<soot.JastAddJ.Annotation: boolean isRuntimeVisible()>
<soot.JastAddJ.Annotation: boolean isRuntimeVisible_compute()>
<soot.JastAddJ.Annotation: int getNumElementValuePair()>
<soot.JastAddJ.Annotation: java.lang.String getID()>
<soot.JastAddJ.Annotation: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Annotation: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Annotation clone()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Annotation copy()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Annotation fullCopy()>
<soot.JastAddJ.Annotation: soot.JastAddJ.Annotation lookupAnnotation(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Annotation: soot.JastAddJ.BodyDecl enclosingBodyDecl()>
<soot.JastAddJ.Annotation: soot.JastAddJ.ElementValue elementValueFor(java.lang.String)>
<soot.JastAddJ.Annotation: soot.JastAddJ.ElementValue elementValueFor_compute(java.lang.String)>
<soot.JastAddJ.Annotation: soot.JastAddJ.ElementValuePair getElementValuePair(int)>
<soot.JastAddJ.Annotation: soot.JastAddJ.List getElementValuePairList()>
<soot.JastAddJ.Annotation: soot.JastAddJ.List getElementValuePairListNoTransform()>
<soot.JastAddJ.Annotation: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingAnnotationDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl decl_compute()>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Annotation: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.Annotation: void <init>(java.lang.String,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.Annotation: void appendAsAttributeTo(java.util.Collection)>
<soot.JastAddJ.Annotation: void checkModifiers()>
<soot.JastAddJ.Annotation: void checkOverride()>
<soot.JastAddJ.Annotation: void setID(java.lang.String)>
<soot.JastAddJ.Annotation: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.Annotation: void typeCheck()>
<soot.JastAddJ.ArithmeticExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArithmeticExpr: soot.JastAddJ.ArithmeticExpr clone()>
<soot.JastAddJ.ArithmeticExpr: void <init>()>
<soot.JastAddJ.ArrayAccess: boolean Define_boolean_hasPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayAccess: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayAccess: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayAccess: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayAccess: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayAccess: java.util.Collection Define_Collection_lookupMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.ArrayAccess clone()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.ArrayAccess copy()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.ArrayAccess fullCopy()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ArrayAccess: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.ArrayAccess: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ArrayAccess: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ArrayAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ArrayAccess: void typeCheck()>
<soot.JastAddJ.ArrayCreationExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean hasArrayInit()>
<soot.JastAddJ.ArrayCreationExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDAafterCreation(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDAafterCreation_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDUafterCreation(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDUafterCreation_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayCreationExpr: int numArrays()>
<soot.JastAddJ.ArrayCreationExpr: int numArrays_compute()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ArrayCreationExpr clone()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ArrayCreationExpr copy()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ArrayCreationExpr fullCopy()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.ArrayInit getArrayInit()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.Opt getArrayInitOpt()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.Opt getArrayInitOptNoTransform()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.TypeDecl Define_TypeDecl_expectedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayCreationExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ArrayCreationExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ArrayCreationExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Opt)>
<soot.JastAddJ.ArrayCreationExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ArrayInit: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean computeDABefore(int,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean computeDABefore_compute(int,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean computeDUbefore(int,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean computeDUbefore_compute(int,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayInit: boolean representableIn(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ArrayInit: boolean representableIn_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ArrayInit: int getNumInit()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.ArrayInit clone()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.ArrayInit copy()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.ArrayInit fullCopy()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.Expr getInit(int)>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.List getInitList()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.List getInitListNoTransform()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl Define_TypeDecl_assignConvertedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl Define_TypeDecl_expectedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl declType()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl expectedType()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ArrayInit: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ArrayInit: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ArrayInit: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.ArrayInit: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ArrayInit: void typeCheck()>
<soot.JastAddJ.ArrayTypeAccess: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeAccess: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeAccess: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeAccess: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeAccess: java.lang.String getID()>
<soot.JastAddJ.ArrayTypeAccess: java.lang.String getID_compute()>
<soot.JastAddJ.ArrayTypeAccess: java.lang.String getPackage()>
<soot.JastAddJ.ArrayTypeAccess: java.lang.String getPackage_compute()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.ArrayTypeAccess clone()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.ArrayTypeAccess copy()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.ArrayTypeAccess fullCopy()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.ArrayTypeAccess: soot.JastAddJ.TypeDecl decl_compute()>
<soot.JastAddJ.ArrayTypeAccess: void <init>()>
<soot.JastAddJ.ArrayTypeAccess: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.ArrayTypeAccess: void addArraySize(soot.JastAddJ.Body,java.util.ArrayList)>
<soot.JastAddJ.ArrayTypeAccess: void nameCheck()>
<soot.JastAddJ.ArrayTypeAccess: void setAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ArrayTypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.ArrayTypeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.ArrayTypeAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean Define_boolean_hasPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: java.util.Collection Define_Collection_lookupMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.ArrayTypeWithSizeAccess clone()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.ArrayTypeWithSizeAccess copy()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.ArrayTypeWithSizeAccess fullCopy()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Expr)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void addArraySize(soot.JastAddJ.Body,java.util.ArrayList)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void setID(java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ArrayTypeWithSizeAccess: void typeCheck()>
<soot.JastAddJ.AssignAdditiveExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignAdditiveExpr: soot.JastAddJ.AssignAdditiveExpr clone()>
<soot.JastAddJ.AssignAdditiveExpr: void <init>()>
<soot.JastAddJ.AssignAndExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.AssignAndExpr clone()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.AssignAndExpr copy()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.AssignAndExpr fullCopy()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignAndExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignAndExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignAndExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignBitwiseExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignBitwiseExpr: soot.JastAddJ.AssignBitwiseExpr clone()>
<soot.JastAddJ.AssignBitwiseExpr: void <init>()>
<soot.JastAddJ.AssignBitwiseExpr: void typeCheck()>
<soot.JastAddJ.AssignDivExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.AssignDivExpr clone()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.AssignDivExpr copy()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.AssignDivExpr fullCopy()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignDivExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignDivExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignDivExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.AssignExpr clone()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.TypeDecl sourceType()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.TypeDecl sourceType_compute()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.AssignExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.AssignExpr: soot.Value emitShiftExpr(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignExpr: void <init>()>
<soot.JastAddJ.AssignExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.AssignExpr: void typeCheck()>
<soot.JastAddJ.AssignLShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.AssignLShiftExpr clone()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.AssignLShiftExpr copy()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.AssignLShiftExpr fullCopy()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignLShiftExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignLShiftExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignLShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignLShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMinusExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.AssignMinusExpr clone()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.AssignMinusExpr copy()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.AssignMinusExpr fullCopy()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignMinusExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignMinusExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignMinusExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMinusExpr: void typeCheck()>
<soot.JastAddJ.AssignModExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.AssignModExpr clone()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.AssignModExpr copy()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.AssignModExpr fullCopy()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignModExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignModExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignModExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMulExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.AssignMulExpr clone()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.AssignMulExpr copy()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.AssignMulExpr fullCopy()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignMulExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignMulExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignMulExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignMultiplicativeExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignMultiplicativeExpr: soot.JastAddJ.AssignMultiplicativeExpr clone()>
<soot.JastAddJ.AssignMultiplicativeExpr: void <init>()>
<soot.JastAddJ.AssignMultiplicativeExpr: void typeCheck()>
<soot.JastAddJ.AssignOrExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.AssignOrExpr clone()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.AssignOrExpr copy()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.AssignOrExpr fullCopy()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignOrExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignOrExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignOrExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignPlusExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.AssignPlusExpr clone()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.AssignPlusExpr copy()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.AssignPlusExpr fullCopy()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.TypeDecl sourceType()>
<soot.JastAddJ.AssignPlusExpr: soot.JastAddJ.TypeDecl sourceType_compute()>
<soot.JastAddJ.AssignPlusExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignPlusExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignPlusExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignPlusExpr: void typeCheck()>
<soot.JastAddJ.AssignRShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.AssignRShiftExpr clone()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.AssignRShiftExpr copy()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.AssignRShiftExpr fullCopy()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignRShiftExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignRShiftExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignRShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignRShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignShiftExpr: soot.JastAddJ.AssignShiftExpr clone()>
<soot.JastAddJ.AssignShiftExpr: void <init>()>
<soot.JastAddJ.AssignShiftExpr: void typeCheck()>
<soot.JastAddJ.AssignSimpleExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.AssignSimpleExpr clone()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.AssignSimpleExpr copy()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.AssignSimpleExpr fullCopy()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.TypeDecl Define_TypeDecl_assignConvertedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.TypeDecl sourceType()>
<soot.JastAddJ.AssignSimpleExpr: soot.JastAddJ.TypeDecl sourceType_compute()>
<soot.JastAddJ.AssignSimpleExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignSimpleExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignSimpleExpr: void typeCheck()>
<soot.JastAddJ.AssignURShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.AssignURShiftExpr clone()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.AssignURShiftExpr copy()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.AssignURShiftExpr fullCopy()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignURShiftExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignURShiftExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignURShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.AssignURShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.AssignXorExpr: java.lang.String printOp()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.AssignXorExpr clone()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.AssignXorExpr copy()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.AssignXorExpr fullCopy()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.Expr getDest()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.Expr getDestNoTransform()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.Expr getSource()>
<soot.JastAddJ.AssignXorExpr: soot.JastAddJ.Expr getSourceNoTransform()>
<soot.JastAddJ.AssignXorExpr: soot.Value createAssignOp(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.AssignXorExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Binary: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isConstant()>
<soot.JastAddJ.Binary: boolean isConstant_compute()>
<soot.JastAddJ.Binary: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: boolean isDUbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Binary: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Binary: soot.JastAddJ.Binary clone()>
<soot.JastAddJ.Binary: soot.JastAddJ.Expr left()>
<soot.JastAddJ.Binary: soot.JastAddJ.Expr left_compute()>
<soot.JastAddJ.Binary: soot.JastAddJ.Expr right()>
<soot.JastAddJ.Binary: soot.JastAddJ.Expr right_compute()>
<soot.JastAddJ.Binary: soot.JastAddJ.TypeDecl binaryNumericPromotedType()>
<soot.JastAddJ.Binary: soot.JastAddJ.TypeDecl binaryNumericPromotedType_compute()>
<soot.JastAddJ.Binary: soot.JastAddJ.TypeDecl refined_ConstantExpression_binaryNumericPromotedType()>
<soot.JastAddJ.Binary: soot.Value emitShiftExpr(soot.JastAddJ.Body)>
<soot.JastAddJ.Binary: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.Binary: void <init>()>
<soot.JastAddJ.Binary: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.BitNotExpr: boolean isConstant()>
<soot.JastAddJ.BitNotExpr: boolean isConstant_compute()>
<soot.JastAddJ.BitNotExpr: java.lang.String printPreOp()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.BitNotExpr clone()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.BitNotExpr copy()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.BitNotExpr fullCopy()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.BitNotExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.BitNotExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.BitNotExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.BitNotExpr: void typeCheck()>
<soot.JastAddJ.BitwiseExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BitwiseExpr: soot.JastAddJ.BitwiseExpr clone()>
<soot.JastAddJ.BitwiseExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.BitwiseExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.BitwiseExpr: void <init>()>
<soot.JastAddJ.BitwiseExpr: void typeCheck()>
<soot.JastAddJ.Block: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean Define_boolean_reachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Block: boolean Define_boolean_reportUnreachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Block: boolean canCompleteNormally()>
<soot.JastAddJ.Block: boolean canCompleteNormally_compute()>
<soot.JastAddJ.Block: boolean checkReturnDA(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean checkReturnDA_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean checkReturnDU(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean checkReturnDU_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean isDUeverywhere_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Block: boolean reachable()>
<soot.JastAddJ.Block: int getNumStmt()>
<soot.JastAddJ.Block: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Block: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Block: soot.JastAddJ.Block clone()>
<soot.JastAddJ.Block: soot.JastAddJ.Block copy()>
<soot.JastAddJ.Block: soot.JastAddJ.Block fullCopy()>
<soot.JastAddJ.Block: soot.JastAddJ.List getStmtList()>
<soot.JastAddJ.Block: soot.JastAddJ.List getStmtListNoTransform()>
<soot.JastAddJ.Block: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Block: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.SimpleSet lookupType(java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.Stmt getStmt(int)>
<soot.JastAddJ.Block: soot.JastAddJ.VariableDeclaration localVariableDeclaration(java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.VariableDeclaration localVariableDeclaration_compute(java.lang.String)>
<soot.JastAddJ.Block: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Block: void <init>()>
<soot.JastAddJ.Block: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.Block: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.Block: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.Body: soot.JastAddJ.Body add(soot.jimple.Stmt)>
<soot.JastAddJ.Body: soot.JastAddJ.Body addLabel(soot.jimple.Stmt)>
<soot.JastAddJ.Body: soot.JastAddJ.Body addTrap(soot.JastAddJ.TypeDecl,soot.jimple.Stmt,soot.jimple.Stmt,soot.jimple.Stmt)>
<soot.JastAddJ.Body: soot.Local emitThis(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Body: soot.Local newTemp(soot.Value)>
<soot.JastAddJ.Body: void <init>(soot.JastAddJ.TypeDecl,soot.jimple.JimpleBody,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.Body: void addNextStmt(java.util.ArrayList)>
<soot.JastAddJ.BodyDecl: boolean isDAbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.BodyDecl Define_BodyDecl_enclosingBodyDecl(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.BodyDecl clone()>
<soot.JastAddJ.BodyDecl: soot.JastAddJ.TypeDecl hostType()>
<soot.JastAddJ.BodyDecl: void <init>()>
<soot.JastAddJ.BooleanLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.BooleanLiteral clone()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.BooleanLiteral copy()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.BooleanLiteral fullCopy()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.BooleanLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.BooleanLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.BooleanLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.BoundFieldAccess: java.lang.String getID()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.BoundFieldAccess clone()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.BoundFieldAccess copy()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.BoundFieldAccess fullCopy()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.FieldDeclaration getFieldDeclaration()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.Variable decl()>
<soot.JastAddJ.BoundFieldAccess: soot.JastAddJ.Variable decl_compute()>
<soot.JastAddJ.BoundFieldAccess: void <init>(java.lang.String,soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundFieldAccess: void <init>(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundFieldAccess: void setFieldDeclaration(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.BoundFieldAccess: void setID(java.lang.String)>
<soot.JastAddJ.BoundTypeAccess: java.lang.String getID()>
<soot.JastAddJ.BoundTypeAccess: java.lang.String getPackage()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.BoundTypeAccess clone()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.BoundTypeAccess copy()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.BoundTypeAccess fullCopy()>
<soot.JastAddJ.BoundTypeAccess: soot.JastAddJ.TypeDecl getTypeDecl()>
<soot.JastAddJ.BoundTypeAccess: void <init>(java.lang.String,java.lang.String,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.BoundTypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.BoundTypeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.BoundTypeAccess: void setTypeDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.BranchTargetStmt: boolean reachableBreak()>
<soot.JastAddJ.BranchTargetStmt: boolean reachableBreak_compute()>
<soot.JastAddJ.BranchTargetStmt: boolean reachableContinue()>
<soot.JastAddJ.BranchTargetStmt: boolean reachableContinue_compute()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection branches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection branches_compute()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection escapedBranches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection escapedBranches_compute()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBranches()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBranches_compute()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBreaks()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetBreaks_compute()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetContinues()>
<soot.JastAddJ.BranchTargetStmt: java.util.Collection targetContinues_compute()>
<soot.JastAddJ.BranchTargetStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BranchTargetStmt: soot.JastAddJ.BranchTargetStmt clone()>
<soot.JastAddJ.BranchTargetStmt: soot.JastAddJ.Stmt branchTarget(soot.JastAddJ.Stmt)>
<soot.JastAddJ.BranchTargetStmt: void <init>()>
<soot.JastAddJ.BranchTargetStmt: void collectBranches(java.util.Collection)>
<soot.JastAddJ.BranchTargetStmt: void collectFinally(soot.JastAddJ.Stmt,java.util.ArrayList)>
<soot.JastAddJ.BreakStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.BreakStmt: boolean isDAafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.BreakStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.BreakStmt: boolean isDUafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.BreakStmt: java.lang.String getLabel()>
<soot.JastAddJ.BreakStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.BreakStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.BreakStmt: java.util.ArrayList finallyList_compute()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.BreakStmt clone()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.BreakStmt copy()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.BreakStmt fullCopy()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.LabeledStmt lookupLabel(java.lang.String)>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.Stmt targetStmt()>
<soot.JastAddJ.BreakStmt: soot.JastAddJ.Stmt targetStmt_compute()>
<soot.JastAddJ.BreakStmt: void <init>(java.lang.String)>
<soot.JastAddJ.BreakStmt: void collectBranches(java.util.Collection)>
<soot.JastAddJ.BreakStmt: void nameCheck()>
<soot.JastAddJ.BreakStmt: void setLabel(java.lang.String)>
<soot.JastAddJ.BytecodeTypeAccess: java.lang.String getID()>
<soot.JastAddJ.BytecodeTypeAccess: java.lang.String getPackage()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.Access rewriteRule0()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.BytecodeTypeAccess clone()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.BytecodeTypeAccess copy()>
<soot.JastAddJ.BytecodeTypeAccess: soot.JastAddJ.BytecodeTypeAccess fullCopy()>
<soot.JastAddJ.BytecodeTypeAccess: void <init>(java.lang.String,java.lang.String)>
<soot.JastAddJ.BytecodeTypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.BytecodeTypeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.Case: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDAbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDAbefore_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDUbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: boolean isDUbefore_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Case: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Case: soot.JastAddJ.Case bind(soot.JastAddJ.Case)>
<soot.JastAddJ.Case: soot.JastAddJ.Case clone()>
<soot.JastAddJ.Case: soot.JastAddJ.TypeDecl switchType()>
<soot.JastAddJ.Case: void <init>()>
<soot.JastAddJ.CastExpr: boolean isConstant()>
<soot.JastAddJ.CastExpr: boolean isConstant_compute()>
<soot.JastAddJ.CastExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.CastExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.CastExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.CastExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.CastExpr: boolean isSuperAccess()>
<soot.JastAddJ.CastExpr: boolean isSuperAccess_compute()>
<soot.JastAddJ.CastExpr: boolean isThisAccess()>
<soot.JastAddJ.CastExpr: boolean isThisAccess_compute()>
<soot.JastAddJ.CastExpr: boolean staticContextQualifier()>
<soot.JastAddJ.CastExpr: boolean staticContextQualifier_compute()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.CastExpr clone()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.CastExpr copy()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.CastExpr fullCopy()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CastExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.CastExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.CastExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.CastExpr: void <init>(soot.JastAddJ.Access,soot.JastAddJ.Expr)>
<soot.JastAddJ.CastExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.CastExpr: void typeCheck()>
<soot.JastAddJ.CatchClause: boolean handles(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.CatchClause: boolean handles_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.Block getBlock()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.Block getBlockNoTransform()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.CatchClause clone()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.CatchClause copy()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.CatchClause fullCopy()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.ParameterDeclaration getParameter()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.ParameterDeclaration getParameterNoTransform()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.SimpleSet parameterDeclaration(java.lang.String)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.SimpleSet parameterDeclaration_compute(java.lang.String)>
<soot.JastAddJ.CatchClause: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.CatchClause: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CatchClause: void <init>(soot.JastAddJ.ParameterDeclaration,soot.JastAddJ.Block)>
<soot.JastAddJ.CatchClause: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.CatchClause: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.CatchClause: void typeCheck()>
<soot.JastAddJ.CharacterLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.CharacterLiteral clone()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.CharacterLiteral copy()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.CharacterLiteral fullCopy()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.CharacterLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.CharacterLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.CharacterLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.ClassAccess clone()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.ClassAccess copy()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.ClassAccess fullCopy()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ClassAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ClassAccess: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ClassAccess: void <init>()>
<soot.JastAddJ.ClassAccess: void nameCheck()>
<soot.JastAddJ.ClassAccess: void transformation()>
<soot.JastAddJ.CompilationUnit: int getNumImportDecl()>
<soot.JastAddJ.CompilationUnit: int getNumTypeDecl()>
<soot.JastAddJ.CompilationUnit: java.lang.String Define_String_hostPackage(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CompilationUnit: java.lang.String Define_String_packageName(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CompilationUnit: java.lang.String getPackageDecl()>
<soot.JastAddJ.CompilationUnit: java.lang.String packageName()>
<soot.JastAddJ.CompilationUnit: java.lang.String packageName_compute()>
<soot.JastAddJ.CompilationUnit: java.lang.String pathName()>
<soot.JastAddJ.CompilationUnit: java.lang.String pathName_compute()>
<soot.JastAddJ.CompilationUnit: java.lang.String relativeName()>
<soot.JastAddJ.CompilationUnit: java.lang.String relativeName_compute()>
<soot.JastAddJ.CompilationUnit: java.util.Collection Define_Collection_lookupMethod(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.CompilationUnit: java.util.Collection importedMethods(java.lang.String)>
<soot.JastAddJ.CompilationUnit: java.util.Collection importedMethodsOnDemand(java.lang.String)>
<soot.JastAddJ.CompilationUnit: java.util.Collection importedMethodsOnDemand_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: java.util.Collection importedMethods_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: java.util.Collection lookupMethod(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.CompilationUnit Define_CompilationUnit_compilationUnit(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.CompilationUnit clone()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.CompilationUnit copy()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.CompilationUnit fullCopy()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.ImportDecl getImportDecl(int)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.List getImportDeclList()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.List getImportDeclListNoTransform()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.List getTypeDeclList()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.List getTypeDeclListNoTransform()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.List getTypeDecls()>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet Define_SimpleSet_allImportedTypes(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedFields(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedFieldsOnDemand(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedFieldsOnDemand_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedFields_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedTypes(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedTypesOnDemand(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedTypesOnDemand_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet importedTypes_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet localLookupType(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet localLookupType_compute(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet lookupType(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.SimpleSet refined_LookupType_Child_lookupType_String(java.lang.String)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.TypeDecl Define_TypeDecl_hostType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.TypeDecl getTypeDecl(int)>
<soot.JastAddJ.CompilationUnit: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.CompilationUnit: void <init>()>
<soot.JastAddJ.CompilationUnit: void <init>(java.lang.String,soot.JastAddJ.List,soot.JastAddJ.List)>
<soot.JastAddJ.CompilationUnit: void addParseError(soot.JastAddJ.Problem)>
<soot.JastAddJ.CompilationUnit: void addTypeDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.CompilationUnit: void errorCheck(java.util.Collection)>
<soot.JastAddJ.CompilationUnit: void nameCheck()>
<soot.JastAddJ.CompilationUnit: void refined_NameCheck_nameCheck()>
<soot.JastAddJ.CompilationUnit: void setPackageDecl(java.lang.String)>
<soot.JastAddJ.CompilationUnit: void setPathName(java.lang.String)>
<soot.JastAddJ.CompilationUnit: void setRelativeName(java.lang.String)>
<soot.JastAddJ.CompilationUnit: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.CompilationUnit: void transformation()>
<soot.JastAddJ.ConditionalExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean booleanOperator()>
<soot.JastAddJ.ConditionalExpr: boolean booleanOperator_compute()>
<soot.JastAddJ.ConditionalExpr: boolean canBeFalse()>
<soot.JastAddJ.ConditionalExpr: boolean canBeFalse_compute()>
<soot.JastAddJ.ConditionalExpr: boolean canBeTrue()>
<soot.JastAddJ.ConditionalExpr: boolean canBeTrue_compute()>
<soot.JastAddJ.ConditionalExpr: boolean isConstant()>
<soot.JastAddJ.ConditionalExpr: boolean isConstant_compute()>
<soot.JastAddJ.ConditionalExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.ConditionalExpr clone()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.ConditionalExpr copy()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.ConditionalExpr fullCopy()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getCondition()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getConditionNoTransform()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getFalseExpr()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getFalseExprNoTransform()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getTrueExpr()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.Expr getTrueExprNoTransform()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.TypeDecl refined_AutoBoxing_type()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.TypeDecl refined_TypeAnalysis_type()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ConditionalExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ConditionalExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ConditionalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ConditionalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ConditionalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.ConditionalExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.ConditionalExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ConditionalExpr: void typeCheck()>
<soot.JastAddJ.ConstCase: boolean constValue(soot.JastAddJ.Case)>
<soot.JastAddJ.ConstCase: boolean constValue_compute(soot.JastAddJ.Case)>
<soot.JastAddJ.ConstCase: boolean refined_NameCheck_constValue_Case(soot.JastAddJ.Case)>
<soot.JastAddJ.ConstCase: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.ConstCase clone()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.ConstCase copy()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.ConstCase fullCopy()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.Expr getValue()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.Expr getValueNoTransform()>
<soot.JastAddJ.ConstCase: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ConstCase: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ConstCase: void nameCheck()>
<soot.JastAddJ.ConstCase: void refined_TypeCheck_typeCheck()>
<soot.JastAddJ.ConstCase: void setValue(soot.JastAddJ.Expr)>
<soot.JastAddJ.ConstCase: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ConstCase: void transformation()>
<soot.JastAddJ.ConstCase: void typeCheck()>
<soot.JastAddJ.Constant$ConstantString: java.lang.String stringValue()>
<soot.JastAddJ.Constant$ConstantString: void <init>(java.lang.String)>
<soot.JastAddJ.Constant: soot.JastAddJ.Constant create(java.lang.String)>
<soot.JastAddJ.Constraints$ConstraintSet: void <init>()>
<soot.JastAddJ.Constraints: boolean unresolvedTypeArguments()>
<soot.JastAddJ.Constraints: java.util.Collection typeArguments()>
<soot.JastAddJ.Constraints: java.util.HashSet directSupertypes(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: java.util.HashSet parameterizedSupertypes(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void <init>()>
<soot.JastAddJ.Constraints: void addEqualConstraint(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void addParameterizedSupertypes(soot.JastAddJ.TypeDecl,java.util.HashSet,java.util.HashSet)>
<soot.JastAddJ.Constraints: void addSubtypeConstraint(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void addSupertypeConstraint(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void addTypeVariable(soot.JastAddJ.TypeVariable)>
<soot.JastAddJ.Constraints: void constraintEqual(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void convertibleFrom(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void convertibleTo(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void replaceAllConstraints(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void replaceConstraints(java.util.Collection,soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void replaceEqualityConstraints(soot.JastAddJ.TypeDecl,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Constraints: void resolveEqualityConstraints()>
<soot.JastAddJ.Constraints: void resolveSubtypeConstraints()>
<soot.JastAddJ.Constraints: void resolveSupertypeConstraints()>
<soot.JastAddJ.ContinueStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ContinueStmt: boolean isDAafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.ContinueStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ContinueStmt: boolean isDUafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.ContinueStmt: java.lang.String getLabel()>
<soot.JastAddJ.ContinueStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.ContinueStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.ContinueStmt: java.util.ArrayList finallyList_compute()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.ContinueStmt clone()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.ContinueStmt copy()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.ContinueStmt fullCopy()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.LabeledStmt lookupLabel(java.lang.String)>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.Stmt targetStmt()>
<soot.JastAddJ.ContinueStmt: soot.JastAddJ.Stmt targetStmt_compute()>
<soot.JastAddJ.ContinueStmt: void <init>(java.lang.String)>
<soot.JastAddJ.ContinueStmt: void collectBranches(java.util.Collection)>
<soot.JastAddJ.ContinueStmt: void nameCheck()>
<soot.JastAddJ.ContinueStmt: void setLabel(java.lang.String)>
<soot.JastAddJ.DefaultCase: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.DefaultCase: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.DefaultCase: soot.JastAddJ.DefaultCase clone()>
<soot.JastAddJ.DefaultCase: soot.JastAddJ.DefaultCase copy()>
<soot.JastAddJ.DefaultCase: soot.JastAddJ.DefaultCase fullCopy()>
<soot.JastAddJ.DefaultCase: void <init>()>
<soot.JastAddJ.DefaultCase: void nameCheck()>
<soot.JastAddJ.Dims: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Dims: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Dims: soot.JastAddJ.Dims clone()>
<soot.JastAddJ.Dims: soot.JastAddJ.Dims copy()>
<soot.JastAddJ.Dims: soot.JastAddJ.Dims fullCopy()>
<soot.JastAddJ.Dims: soot.JastAddJ.Opt getExprOpt()>
<soot.JastAddJ.Dims: void <init>(soot.JastAddJ.Opt)>
<soot.JastAddJ.DivExpr: boolean isConstant()>
<soot.JastAddJ.DivExpr: boolean isConstant_compute()>
<soot.JastAddJ.DivExpr: java.lang.String printOp()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.DivExpr clone()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.DivExpr copy()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.DivExpr fullCopy()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.DivExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.DivExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.DivExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.DoStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean canCompleteNormally()>
<soot.JastAddJ.DoStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.DoStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean isDUbeforeCondition(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean isDUbeforeCondition_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.DoStmt: boolean targetOf(soot.JastAddJ.BreakStmt)>
<soot.JastAddJ.DoStmt: boolean targetOf(soot.JastAddJ.ContinueStmt)>
<soot.JastAddJ.DoStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.DoStmt clone()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.DoStmt copy()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.DoStmt fullCopy()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.Expr getCondition()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.Expr getConditionNoTransform()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.Stmt getStmt()>
<soot.JastAddJ.DoStmt: soot.JastAddJ.Stmt getStmtNoTransform()>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.DoStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.DoStmt: void <init>(soot.JastAddJ.Stmt,soot.JastAddJ.Expr)>
<soot.JastAddJ.DoStmt: void flushCache()>
<soot.JastAddJ.DoStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.DoStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.DoStmt: void typeCheck()>
<soot.JastAddJ.Dot: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Dot: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access extractLast()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access getRight()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access getRightNoTransform()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access qualifyTailWith(soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: soot.JastAddJ.Access rewriteRule0()>
<soot.JastAddJ.Dot: soot.JastAddJ.Access rewriteRule1()>
<soot.JastAddJ.Dot: soot.JastAddJ.Dot clone()>
<soot.JastAddJ.Dot: soot.JastAddJ.Dot copy()>
<soot.JastAddJ.Dot: soot.JastAddJ.Dot fullCopy()>
<soot.JastAddJ.Dot: soot.JastAddJ.Dot qualifiesAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: soot.JastAddJ.Expr getLeft()>
<soot.JastAddJ.Dot: soot.JastAddJ.Expr getLeftNoTransform()>
<soot.JastAddJ.Dot: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: void replaceLast(soot.JastAddJ.Access)>
<soot.JastAddJ.Dot: void setRight(soot.JastAddJ.Access)>
<soot.JastAddJ.DoubleLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.DoubleLiteral clone()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.DoubleLiteral copy()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.DoubleLiteral fullCopy()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.DoubleLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.DoubleLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.DoubleLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.DoubleLiteral: void typeCheck()>
<soot.JastAddJ.EQExpr: java.lang.String printOp()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.EQExpr clone()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.EQExpr copy()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.EQExpr fullCopy()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.EQExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.EQExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.EQExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.EQExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.ElementAnnotationValue: boolean commensurateWithTypeDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementAnnotationValue: boolean commensurateWithTypeDecl_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.Annotation Define_Annotation_lookupAnnotation(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.Annotation getAnnotation()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.Annotation getAnnotationNoTransform()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.Annotation lookupAnnotation(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.ElementAnnotationValue clone()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.ElementAnnotationValue copy()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.ElementAnnotationValue fullCopy()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ElementAnnotationValue: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ElementAnnotationValue: void <init>(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementAnnotationValue: void appendAsAttributeTo(java.util.Collection,java.lang.String)>
<soot.JastAddJ.ElementAnnotationValue: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ElementArrayValue: boolean commensurateWithArrayDecl(soot.JastAddJ.ArrayDecl)>
<soot.JastAddJ.ElementArrayValue: boolean commensurateWithArrayDecl_compute(soot.JastAddJ.ArrayDecl)>
<soot.JastAddJ.ElementArrayValue: boolean hasValue(java.lang.String)>
<soot.JastAddJ.ElementArrayValue: boolean hasValue_compute(java.lang.String)>
<soot.JastAddJ.ElementArrayValue: boolean validTarget(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementArrayValue: boolean validTarget_compute(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementArrayValue: int getNumElementValue()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementArrayValue clone()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementArrayValue copy()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementArrayValue fullCopy()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementValue Define_ElementValue_lookupElementTypeValue(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementValue definesElementTypeValue(java.lang.String)>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementValue definesElementTypeValue_compute(java.lang.String)>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.ElementValue getElementValue(int)>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.List getElementValueList()>
<soot.JastAddJ.ElementArrayValue: soot.JastAddJ.List getElementValueListNoTransform()>
<soot.JastAddJ.ElementArrayValue: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.ElementArrayValue: void appendAsAttributeTo(java.util.Collection,java.lang.String)>
<soot.JastAddJ.ElementArrayValue: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ElementConstantValue: boolean commensurateWithTypeDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementConstantValue: boolean commensurateWithTypeDecl_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ElementConstantValue: boolean hasValue(java.lang.String)>
<soot.JastAddJ.ElementConstantValue: boolean hasValue_compute(java.lang.String)>
<soot.JastAddJ.ElementConstantValue: boolean validTarget(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementConstantValue: boolean validTarget_compute(soot.JastAddJ.Annotation)>
<soot.JastAddJ.ElementConstantValue: java.lang.String Define_String_methodHost(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementConstantValue clone()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementConstantValue copy()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementConstantValue fullCopy()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementValue definesElementTypeValue(java.lang.String)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementValue definesElementTypeValue_compute(java.lang.String)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.ElementValue lookupElementTypeValue(java.lang.String)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ElementConstantValue: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ElementConstantValue: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ElementConstantValue: void appendAsAttributeTo(java.util.Collection,java.lang.String)>
<soot.JastAddJ.ElementConstantValue: void nameCheck()>
<soot.JastAddJ.ElementConstantValue: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ElementValue: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ElementValue: soot.JastAddJ.ElementValue clone()>
<soot.JastAddJ.ElementValue: soot.JastAddJ.TypeDecl enclosingAnnotationDecl()>
<soot.JastAddJ.ElementValue: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ElementValue: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ElementValue: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.ElementValue: void <init>()>
<soot.JastAddJ.ElementValuePair: java.lang.String getName()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValue getElementValue()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValuePair clone()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValuePair copy()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValuePair fullCopy()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.ElementValuePair rewriteRule0()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.TypeDecl enclosingAnnotationDecl()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ElementValuePair: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.ElementValuePair: void <init>(beaver.Symbol,soot.JastAddJ.ElementValue)>
<soot.JastAddJ.ElementValuePair: void <init>(java.lang.String,soot.JastAddJ.ElementValue)>
<soot.JastAddJ.ElementValuePair: void setElementValue(soot.JastAddJ.ElementValue)>
<soot.JastAddJ.ElementValuePair: void setName(beaver.Symbol)>
<soot.JastAddJ.ElementValuePair: void setName(java.lang.String)>
<soot.JastAddJ.ElementValuePair: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ElementValuePair: void typeCheck()>
<soot.JastAddJ.EmptyStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.EmptyStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.EmptyStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.EmptyStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.EmptyStmt: soot.JastAddJ.EmptyStmt clone()>
<soot.JastAddJ.EmptyStmt: soot.JastAddJ.EmptyStmt copy()>
<soot.JastAddJ.EmptyStmt: soot.JastAddJ.EmptyStmt fullCopy()>
<soot.JastAddJ.EmptyStmt: void <init>()>
<soot.JastAddJ.EnhancedForStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.EnhancedForStmt: boolean targetOf(soot.JastAddJ.BreakStmt)>
<soot.JastAddJ.EnhancedForStmt: boolean targetOf(soot.JastAddJ.ContinueStmt)>
<soot.JastAddJ.EnhancedForStmt: int Define_int_localNum(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.EnhancedForStmt clone()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.EnhancedForStmt copy()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.EnhancedForStmt fullCopy()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.SimpleSet localLookupVariable(java.lang.String)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.SimpleSet localLookupVariable_compute(java.lang.String)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.Stmt getStmt()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.Stmt getStmtNoTransform()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.VariableDeclaration getVariableDeclaration()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.VariableDeclaration getVariableDeclarationNoTransform()>
<soot.JastAddJ.EnhancedForStmt: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.EnhancedForStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.EnhancedForStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.EnhancedForStmt: void <init>(soot.JastAddJ.VariableDeclaration,soot.JastAddJ.Expr,soot.JastAddJ.Stmt)>
<soot.JastAddJ.EnhancedForStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.EnhancedForStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.EnhancedForStmt: void typeCheck()>
<soot.JastAddJ.EqualityExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.EqualityExpr: soot.JastAddJ.EqualityExpr clone()>
<soot.JastAddJ.EqualityExpr: void <init>()>
<soot.JastAddJ.EqualityExpr: void typeCheck()>
<soot.JastAddJ.Expr: boolean canBeFalse()>
<soot.JastAddJ.Expr: boolean canBeFalse_compute()>
<soot.JastAddJ.Expr: boolean canBeTrue()>
<soot.JastAddJ.Expr: boolean canBeTrue_compute()>
<soot.JastAddJ.Expr: boolean hasPackage(java.lang.String)>
<soot.JastAddJ.Expr: boolean hasParentDot()>
<soot.JastAddJ.Expr: boolean hasParentDot_compute()>
<soot.JastAddJ.Expr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDAbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isDUbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Expr: boolean isFalse()>
<soot.JastAddJ.Expr: boolean isFalse_compute()>
<soot.JastAddJ.Expr: boolean isLeftChildOfDot()>
<soot.JastAddJ.Expr: boolean isLeftChildOfDot_compute()>
<soot.JastAddJ.Expr: boolean isRightChildOfDot()>
<soot.JastAddJ.Expr: boolean isRightChildOfDot_compute()>
<soot.JastAddJ.Expr: boolean isTrue()>
<soot.JastAddJ.Expr: boolean isTrue_compute()>
<soot.JastAddJ.Expr: boolean isUnknown()>
<soot.JastAddJ.Expr: boolean isUnknown_compute()>
<soot.JastAddJ.Expr: boolean mayAccess(soot.JastAddJ.FieldDeclaration)>
<soot.JastAddJ.Expr: boolean representableIn(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Expr: boolean representableIn_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Expr: java.lang.String hostPackage()>
<soot.JastAddJ.Expr: java.lang.String methodHost()>
<soot.JastAddJ.Expr: java.lang.String packageName()>
<soot.JastAddJ.Expr: java.lang.String typeName()>
<soot.JastAddJ.Expr: java.util.Collection lookupMethod(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Expr: soot.JastAddJ.AbstractDot parentDot()>
<soot.JastAddJ.Expr: soot.JastAddJ.AbstractDot parentDot_compute()>
<soot.JastAddJ.Expr: soot.JastAddJ.Access nextAccess()>
<soot.JastAddJ.Expr: soot.JastAddJ.Access nextAccess_compute()>
<soot.JastAddJ.Expr: soot.JastAddJ.BodyDecl enclosingBodyDecl()>
<soot.JastAddJ.Expr: soot.JastAddJ.Dot qualifiesAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.Expr: soot.JastAddJ.Expr clone()>
<soot.JastAddJ.Expr: soot.JastAddJ.NameType nameType()>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet keepAccessibleFields(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet keepAccessibleTypes(soot.JastAddJ.SimpleSet)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet lookupType(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet qualifiedLookupType(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet qualifiedLookupType_compute(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.SimpleSet qualifiedLookupVariable_compute(java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.Stmt enclosingStmt()>
<soot.JastAddJ.Expr: soot.JastAddJ.Stmt enclosingStmt_compute()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl hostType()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeBoolean()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeChar()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeDouble()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeFloat()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeInt()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeLong()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeNull()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl typeString()>
<soot.JastAddJ.Expr: soot.JastAddJ.TypeDecl unknownType()>
<soot.JastAddJ.Expr: soot.Value emitBooleanCondition(soot.JastAddJ.Body)>
<soot.JastAddJ.Expr: soot.Value emitStore(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.Expr: soot.jimple.Stmt condition_false_label()>
<soot.JastAddJ.Expr: soot.jimple.Stmt condition_true_label()>
<soot.JastAddJ.Expr: soot.jimple.Stmt false_label()>
<soot.JastAddJ.Expr: soot.jimple.Stmt false_label_compute()>
<soot.JastAddJ.Expr: soot.jimple.Stmt true_label()>
<soot.JastAddJ.Expr: soot.jimple.Stmt true_label_compute()>
<soot.JastAddJ.Expr: void <init>()>
<soot.JastAddJ.Expr: void collectTypesToHierarchy(java.util.Collection)>
<soot.JastAddJ.Expr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.Expr: void refined_BooleanExpressions_emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.ExprStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ExprStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ExprStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ExprStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.ExprStmt clone()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.ExprStmt copy()>
<soot.JastAddJ.ExprStmt: soot.JastAddJ.ExprStmt fullCopy()>
<soot.JastAddJ.ExprStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ExprStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ExprStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.FieldDecl: boolean isStatic()>
<soot.JastAddJ.FieldDecl: boolean isStatic_compute()>
<soot.JastAddJ.FieldDecl: int getNumVariableDecl()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.FieldDecl clone()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.FieldDecl copy()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.FieldDecl fullCopy()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.FieldDeclaration rewriteRule0()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.List getVariableDeclList()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.List getVariableDeclListNoTransform()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.List rewriteTypeDecl_getBodyDecl()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.FieldDecl: soot.JastAddJ.VariableDecl getVariableDecl(int)>
<soot.JastAddJ.FieldDecl: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.FileNamesPart: boolean hasPackage(java.lang.String)>
<soot.JastAddJ.FileNamesPart: boolean selectCompilationUnit(java.lang.String)>
<soot.JastAddJ.FileNamesPart: java.util.Collection keySet()>
<soot.JastAddJ.FileNamesPart: void <init>(soot.JastAddJ.Program)>
<soot.JastAddJ.FileNamesPart: void addSourceFile(java.lang.String)>
<soot.JastAddJ.FloatingPointLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.FloatingPointLiteral clone()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.FloatingPointLiteral copy()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.FloatingPointLiteral fullCopy()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.FloatingPointLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.FloatingPointLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.FloatingPointLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.FloatingPointLiteral: void typeCheck()>
<soot.JastAddJ.ForStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean Define_boolean_reachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ForStmt: boolean canCompleteNormally()>
<soot.JastAddJ.ForStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.ForStmt: boolean hasCondition()>
<soot.JastAddJ.ForStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDAafterInitialization(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDAafterInitialization_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafterInit(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafterInit_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafterUpdate(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafterUpdate_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUbeforeCondition(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean isDUbeforeCondition_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ForStmt: boolean targetOf(soot.JastAddJ.BreakStmt)>
<soot.JastAddJ.ForStmt: boolean targetOf(soot.JastAddJ.ContinueStmt)>
<soot.JastAddJ.ForStmt: int getNumInitStmt()>
<soot.JastAddJ.ForStmt: int getNumUpdateStmt()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Expr getCondition()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ForStmt clone()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ForStmt copy()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ForStmt fullCopy()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.ForStmt rewriteRule0()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.List getInitStmtList()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.List getInitStmtListNoTransform()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.List getUpdateStmtList()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.List getUpdateStmtListNoTransform()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Opt getConditionOpt()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Opt getConditionOptNoTransform()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupVariable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.SimpleSet localLookup(java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.SimpleSet localLookup_compute(java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Stmt getInitStmt(int)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Stmt getStmt()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Stmt getStmtNoTransform()>
<soot.JastAddJ.ForStmt: soot.JastAddJ.Stmt getUpdateStmt(int)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.VariableDeclaration localVariableDeclaration(java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.VariableDeclaration localVariableDeclaration_compute(java.lang.String)>
<soot.JastAddJ.ForStmt: soot.JastAddJ.VariableScope Define_VariableScope_outerScope(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.ForStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.ForStmt: void <init>(soot.JastAddJ.List,soot.JastAddJ.Opt,soot.JastAddJ.List,soot.JastAddJ.Stmt)>
<soot.JastAddJ.ForStmt: void flushCache()>
<soot.JastAddJ.ForStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ForStmt: void setCondition(soot.JastAddJ.Expr)>
<soot.JastAddJ.ForStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ForStmt: void typeCheck()>
<soot.JastAddJ.GEExpr: java.lang.String printOp()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.GEExpr clone()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.GEExpr copy()>
<soot.JastAddJ.GEExpr: soot.JastAddJ.GEExpr fullCopy()>
<soot.JastAddJ.GEExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.GEExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.GEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.GLBTypeFactory: boolean checkInterfaceCompatibility(java.util.ArrayList)>
<soot.JastAddJ.GLBTypeFactory: soot.JastAddJ.TypeDecl glb(java.util.ArrayList)>
<soot.JastAddJ.GLBTypeFactory: soot.JastAddJ.TypeDecl mostSpecificSuperClass(java.util.ArrayList)>
<soot.JastAddJ.GLBTypeFactory: soot.JastAddJ.TypeDecl mostSpecificSuperClass(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GLBTypeFactory: void addInterfaces(java.util.ArrayList,java.util.ArrayList,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.GLBTypeFactory: void addSuperClasses(soot.JastAddJ.TypeDecl,java.util.HashSet)>
<soot.JastAddJ.GLBTypeFactory: void removeNullValues(java.util.ArrayList)>
<soot.JastAddJ.GTExpr: java.lang.String printOp()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.GTExpr clone()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.GTExpr copy()>
<soot.JastAddJ.GTExpr: soot.JastAddJ.GTExpr fullCopy()>
<soot.JastAddJ.GTExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.GTExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.GTExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.IdUse: java.lang.String getID()>
<soot.JastAddJ.IdUse: void <init>(beaver.Symbol)>
<soot.JastAddJ.IdUse: void <init>(java.lang.String)>
<soot.JastAddJ.IdUse: void setID(beaver.Symbol)>
<soot.JastAddJ.IdUse: void setID(java.lang.String)>
<soot.JastAddJ.IfStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: boolean canCompleteNormally()>
<soot.JastAddJ.IfStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.IfStmt: boolean hasElse()>
<soot.JastAddJ.IfStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.IfStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Expr getCondition()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Expr getConditionNoTransform()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.IfStmt clone()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.IfStmt copy()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.IfStmt fullCopy()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Opt getElseOpt()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Opt getElseOptNoTransform()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Stmt getElse()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Stmt getThen()>
<soot.JastAddJ.IfStmt: soot.JastAddJ.Stmt getThenNoTransform()>
<soot.JastAddJ.IfStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.IfStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.IfStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Stmt,soot.JastAddJ.Opt)>
<soot.JastAddJ.IfStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.IfStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.IfStmt: void typeCheck()>
<soot.JastAddJ.ImportDecl: java.lang.String packageName()>
<soot.JastAddJ.ImportDecl: java.lang.String typeName()>
<soot.JastAddJ.ImportDecl: java.lang.String typeName_compute()>
<soot.JastAddJ.ImportDecl: java.util.Collection importedMethods(java.lang.String)>
<soot.JastAddJ.ImportDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ImportDecl: soot.JastAddJ.ImportDecl clone()>
<soot.JastAddJ.ImportDecl: soot.JastAddJ.SimpleSet importedFields(java.lang.String)>
<soot.JastAddJ.ImportDecl: void <init>()>
<soot.JastAddJ.InstanceInitializer: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceInitializer: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceInitializer: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceInitializer: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceInitializer: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceInitializer: java.util.Collection exceptions()>
<soot.JastAddJ.InstanceInitializer: java.util.Collection exceptions_compute()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.ASTNode Define_ASTNode_enclosingBlock(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.Block getBlock()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.Block getBlockNoTransform()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.InstanceInitializer clone()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.InstanceInitializer copy()>
<soot.JastAddJ.InstanceInitializer: soot.JastAddJ.InstanceInitializer fullCopy()>
<soot.JastAddJ.InstanceInitializer: void <init>(soot.JastAddJ.Block)>
<soot.JastAddJ.InstanceInitializer: void checkUnreachableStmt()>
<soot.JastAddJ.InstanceInitializer: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.InstanceOfExpr clone()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.InstanceOfExpr copy()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.InstanceOfExpr fullCopy()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.InstanceOfExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.InstanceOfExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.InstanceOfExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Access)>
<soot.JastAddJ.InstanceOfExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.InstanceOfExpr: void typeCheck()>
<soot.JastAddJ.IntegerLiteral: boolean isHex_compute()>
<soot.JastAddJ.IntegerLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.IntegerLiteral clone()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.IntegerLiteral copy()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.IntegerLiteral fullCopy()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.IntegerLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.IntegerLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.IntegerLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.IntegerLiteral: void typeCheck()>
<soot.JastAddJ.LEExpr: java.lang.String printOp()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.LEExpr clone()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.LEExpr copy()>
<soot.JastAddJ.LEExpr: soot.JastAddJ.LEExpr fullCopy()>
<soot.JastAddJ.LEExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.LEExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.LEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.LShiftExpr clone()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.LShiftExpr copy()>
<soot.JastAddJ.LShiftExpr: soot.JastAddJ.LShiftExpr fullCopy()>
<soot.JastAddJ.LShiftExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.LShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.LShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LTExpr: java.lang.String printOp()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.LTExpr clone()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.LTExpr copy()>
<soot.JastAddJ.LTExpr: soot.JastAddJ.LTExpr fullCopy()>
<soot.JastAddJ.LTExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.LTExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.LTExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.LabeledStmt: boolean canCompleteNormally()>
<soot.JastAddJ.LabeledStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.LabeledStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LabeledStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LabeledStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LabeledStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LabeledStmt: boolean targetOf(soot.JastAddJ.BreakStmt)>
<soot.JastAddJ.LabeledStmt: boolean targetOf(soot.JastAddJ.ContinueStmt)>
<soot.JastAddJ.LabeledStmt: java.lang.String getLabel()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.LabeledStmt Define_LabeledStmt_lookupLabel(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.LabeledStmt clone()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.LabeledStmt copy()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.LabeledStmt fullCopy()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.LabeledStmt lookupLabel(java.lang.String)>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.Stmt getStmt()>
<soot.JastAddJ.LabeledStmt: soot.JastAddJ.Stmt getStmtNoTransform()>
<soot.JastAddJ.LabeledStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.LabeledStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.LabeledStmt: soot.jimple.Stmt continue_label_compute()>
<soot.JastAddJ.LabeledStmt: void <init>(java.lang.String,soot.JastAddJ.Stmt)>
<soot.JastAddJ.LabeledStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.LabeledStmt: void nameCheck()>
<soot.JastAddJ.LabeledStmt: void setLabel(java.lang.String)>
<soot.JastAddJ.LabeledStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.List: int getNumChild()>
<soot.JastAddJ.List: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.List: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.List: soot.JastAddJ.List add(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.List: soot.JastAddJ.List clone()>
<soot.JastAddJ.List: soot.JastAddJ.List copy()>
<soot.JastAddJ.List: soot.JastAddJ.List fullCopy()>
<soot.JastAddJ.List: soot.JastAddJ.List substitute(soot.JastAddJ.Parameterization)>
<soot.JastAddJ.List: void <init>()>
<soot.JastAddJ.List: void addChild(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.List: void insertChild(soot.JastAddJ.ASTNode,int)>
<soot.JastAddJ.Literal: long parseLong(java.lang.String)>
<soot.JastAddJ.Literal: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Literal: soot.JastAddJ.Literal clone()>
<soot.JastAddJ.Literal: void <init>()>
<soot.JastAddJ.LocalClassDeclStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LocalClassDeclStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.ClassDecl getClassDecl()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.ClassDecl getClassDeclNoTransform()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.LocalClassDeclStmt clone()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.LocalClassDeclStmt copy()>
<soot.JastAddJ.LocalClassDeclStmt: soot.JastAddJ.LocalClassDeclStmt fullCopy()>
<soot.JastAddJ.LocalClassDeclStmt: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.LocalClassDeclStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.LogNotExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean canBeFalse()>
<soot.JastAddJ.LogNotExpr: boolean canBeFalse_compute()>
<soot.JastAddJ.LogNotExpr: boolean canBeTrue()>
<soot.JastAddJ.LogNotExpr: boolean canBeTrue_compute()>
<soot.JastAddJ.LogNotExpr: boolean isConstant()>
<soot.JastAddJ.LogNotExpr: boolean isConstant_compute()>
<soot.JastAddJ.LogNotExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.LogNotExpr: java.lang.String printPreOp()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.LogNotExpr clone()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.LogNotExpr copy()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.LogNotExpr fullCopy()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LogNotExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.LogNotExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.LogNotExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.LogNotExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.LogNotExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.LogNotExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.LogNotExpr: void typeCheck()>
<soot.JastAddJ.LogicalExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LogicalExpr: soot.JastAddJ.LogicalExpr clone()>
<soot.JastAddJ.LogicalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LogicalExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.LogicalExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.LogicalExpr: void <init>()>
<soot.JastAddJ.LogicalExpr: void typeCheck()>
<soot.JastAddJ.LongLiteral: boolean isHex_compute()>
<soot.JastAddJ.LongLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.LongLiteral clone()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.LongLiteral copy()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.LongLiteral fullCopy()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.LongLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.LongLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.LongLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.LongLiteral: void typeCheck()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.ClassDecl getClassDecl()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.ClassDecl getClassDeclNoTransform()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.MemberClassDecl clone()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.MemberClassDecl copy()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.MemberClassDecl fullCopy()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.TypeDecl typeDecl()>
<soot.JastAddJ.MemberClassDecl: soot.JastAddJ.TypeDecl typeDecl_compute()>
<soot.JastAddJ.MemberClassDecl: void <init>(soot.JastAddJ.ClassDecl)>
<soot.JastAddJ.MemberClassDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.MemberDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MemberDecl: soot.JastAddJ.MemberDecl clone()>
<soot.JastAddJ.MemberDecl: void <init>()>
<soot.JastAddJ.MemberDecl: void checkModifiers()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.InterfaceDecl getInterfaceDecl()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.InterfaceDecl getInterfaceDeclNoTransform()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.MemberInterfaceDecl clone()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.MemberInterfaceDecl copy()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.MemberInterfaceDecl fullCopy()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.TypeDecl typeDecl()>
<soot.JastAddJ.MemberInterfaceDecl: soot.JastAddJ.TypeDecl typeDecl_compute()>
<soot.JastAddJ.MemberInterfaceDecl: void <init>(soot.JastAddJ.InterfaceDecl)>
<soot.JastAddJ.MemberInterfaceDecl: void checkModifiers()>
<soot.JastAddJ.MemberInterfaceDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.MemberTypeDecl: boolean declaresType(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: boolean declaresType_compute(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: boolean hasAnnotationSuppressWarnings(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: boolean hasAnnotationSuppressWarnings_compute(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: boolean isDeprecated()>
<soot.JastAddJ.MemberTypeDecl: boolean isDeprecated_compute()>
<soot.JastAddJ.MemberTypeDecl: boolean isStatic()>
<soot.JastAddJ.MemberTypeDecl: boolean isStatic_compute()>
<soot.JastAddJ.MemberTypeDecl: boolean visibleTypeParameters()>
<soot.JastAddJ.MemberTypeDecl: boolean visibleTypeParameters_compute()>
<soot.JastAddJ.MemberTypeDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MemberTypeDecl: soot.JastAddJ.MemberTypeDecl clone()>
<soot.JastAddJ.MemberTypeDecl: soot.JastAddJ.TypeDecl type(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: soot.JastAddJ.TypeDecl type_compute(java.lang.String)>
<soot.JastAddJ.MemberTypeDecl: void <init>()>
<soot.JastAddJ.MinusExpr: boolean isConstant()>
<soot.JastAddJ.MinusExpr: boolean isConstant_compute()>
<soot.JastAddJ.MinusExpr: java.lang.String printPreOp()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.IntegerLiteral rewriteRule0()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.LongLiteral rewriteRule1()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.MinusExpr clone()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.MinusExpr copy()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.MinusExpr fullCopy()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.MinusExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.MinusExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.MinusExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.MinusExpr: void typeCheck()>
<soot.JastAddJ.ModExpr: boolean isConstant()>
<soot.JastAddJ.ModExpr: boolean isConstant_compute()>
<soot.JastAddJ.ModExpr: java.lang.String printOp()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.ModExpr clone()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.ModExpr copy()>
<soot.JastAddJ.ModExpr: soot.JastAddJ.ModExpr fullCopy()>
<soot.JastAddJ.ModExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.ModExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Modifier: java.lang.String getID()>
<soot.JastAddJ.Modifier: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Modifier: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Modifier: soot.JastAddJ.Modifier clone()>
<soot.JastAddJ.Modifier: soot.JastAddJ.Modifier copy()>
<soot.JastAddJ.Modifier: soot.JastAddJ.Modifier fullCopy()>
<soot.JastAddJ.Modifier: void <init>()>
<soot.JastAddJ.Modifier: void <init>(java.lang.String)>
<soot.JastAddJ.Modifier: void setID(java.lang.String)>
<soot.JastAddJ.Modifiers: boolean hasAnnotationSuppressWarnings(java.lang.String)>
<soot.JastAddJ.Modifiers: boolean hasAnnotationSuppressWarnings_compute(java.lang.String)>
<soot.JastAddJ.Modifiers: boolean hasDeprecatedAnnotation()>
<soot.JastAddJ.Modifiers: boolean hasDeprecatedAnnotation_compute()>
<soot.JastAddJ.Modifiers: boolean isAbstract()>
<soot.JastAddJ.Modifiers: boolean isAbstract_compute()>
<soot.JastAddJ.Modifiers: boolean isFinal()>
<soot.JastAddJ.Modifiers: boolean isFinal_compute()>
<soot.JastAddJ.Modifiers: boolean isNative()>
<soot.JastAddJ.Modifiers: boolean isNative_compute()>
<soot.JastAddJ.Modifiers: boolean isPrivate()>
<soot.JastAddJ.Modifiers: boolean isPrivate_compute()>
<soot.JastAddJ.Modifiers: boolean isProtected()>
<soot.JastAddJ.Modifiers: boolean isProtected_compute()>
<soot.JastAddJ.Modifiers: boolean isPublic()>
<soot.JastAddJ.Modifiers: boolean isPublic_compute()>
<soot.JastAddJ.Modifiers: boolean isStatic()>
<soot.JastAddJ.Modifiers: boolean isStatic_compute()>
<soot.JastAddJ.Modifiers: boolean isStrictfp()>
<soot.JastAddJ.Modifiers: boolean isStrictfp_compute()>
<soot.JastAddJ.Modifiers: boolean isSynchronized()>
<soot.JastAddJ.Modifiers: boolean isSynchronized_compute()>
<soot.JastAddJ.Modifiers: boolean isSynthetic()>
<soot.JastAddJ.Modifiers: boolean isSynthetic_compute()>
<soot.JastAddJ.Modifiers: boolean isTransient()>
<soot.JastAddJ.Modifiers: boolean isTransient_compute()>
<soot.JastAddJ.Modifiers: boolean isVolatile()>
<soot.JastAddJ.Modifiers: boolean isVolatile_compute()>
<soot.JastAddJ.Modifiers: int getNumModifier()>
<soot.JastAddJ.Modifiers: int numCompletenessModifiers()>
<soot.JastAddJ.Modifiers: int numCompletenessModifiers_compute()>
<soot.JastAddJ.Modifiers: int numModifier(java.lang.String)>
<soot.JastAddJ.Modifiers: int numModifier_compute(java.lang.String)>
<soot.JastAddJ.Modifiers: int numProtectionModifiers()>
<soot.JastAddJ.Modifiers: int numProtectionModifiers_compute()>
<soot.JastAddJ.Modifiers: java.util.Collection runtimeInvisibleAnnotations()>
<soot.JastAddJ.Modifiers: java.util.Collection runtimeVisibleAnnotations()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Annotation Define_Annotation_lookupAnnotation(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Annotation annotation(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Annotation annotation_compute(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.Modifiers: soot.JastAddJ.List getModifierList()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.List getModifierListNoTransform()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Modifier getModifier(int)>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Modifiers clone()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Modifiers copy()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.Modifiers fullCopy()>
<soot.JastAddJ.Modifiers: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.Modifiers: void <init>()>
<soot.JastAddJ.Modifiers: void <init>(soot.JastAddJ.List)>
<soot.JastAddJ.Modifiers: void addAllAnnotations(java.util.Collection)>
<soot.JastAddJ.Modifiers: void addModifier(soot.JastAddJ.Modifier)>
<soot.JastAddJ.Modifiers: void addRuntimeInvisibleAnnotationsAttribute(java.util.Collection)>
<soot.JastAddJ.Modifiers: void addRuntimeVisibleAnnotationsAttribute(java.util.Collection)>
<soot.JastAddJ.Modifiers: void addSourceOnlyAnnotations(java.util.Collection)>
<soot.JastAddJ.Modifiers: void checkModifiers()>
<soot.JastAddJ.Modifiers: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.MulExpr: java.lang.String printOp()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.MulExpr clone()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.MulExpr copy()>
<soot.JastAddJ.MulExpr: soot.JastAddJ.MulExpr fullCopy()>
<soot.JastAddJ.MulExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.MulExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.MultiplicativeExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.MultiplicativeExpr: soot.JastAddJ.MultiplicativeExpr clone()>
<soot.JastAddJ.MultiplicativeExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.MultiplicativeExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.MultiplicativeExpr: void <init>()>
<soot.JastAddJ.MultiplicativeExpr: void typeCheck()>
<soot.JastAddJ.NEExpr: java.lang.String printOp()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.NEExpr clone()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.NEExpr copy()>
<soot.JastAddJ.NEExpr: soot.JastAddJ.NEExpr fullCopy()>
<soot.JastAddJ.NEExpr: soot.Value comparison(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.NEExpr: soot.Value comparisonInv(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.NEExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.NameType$1: soot.JastAddJ.Access reclassify(java.lang.String,int,int)>
<soot.JastAddJ.NameType$2: soot.JastAddJ.Access reclassify(java.lang.String,int,int)>
<soot.JastAddJ.NameType$3: soot.JastAddJ.Access reclassify(java.lang.String,int,int)>
<soot.JastAddJ.NameType$4: soot.JastAddJ.Access reclassify(java.lang.String,int,int)>
<soot.JastAddJ.NameType$5: soot.JastAddJ.Access reclassify(java.lang.String,int,int)>
<soot.JastAddJ.NullLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.NullLiteral clone()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.NullLiteral copy()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.NullLiteral fullCopy()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.NullLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.NullLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.NullLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.Opt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Opt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Opt: soot.JastAddJ.Opt clone()>
<soot.JastAddJ.Opt: soot.JastAddJ.Opt copy()>
<soot.JastAddJ.Opt: soot.JastAddJ.Opt fullCopy()>
<soot.JastAddJ.Opt: void <init>()>
<soot.JastAddJ.Opt: void <init>(soot.JastAddJ.ASTNode)>
<soot.JastAddJ.OrBitwiseExpr: java.lang.String printOp()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.OrBitwiseExpr clone()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.OrBitwiseExpr copy()>
<soot.JastAddJ.OrBitwiseExpr: soot.JastAddJ.OrBitwiseExpr fullCopy()>
<soot.JastAddJ.OrBitwiseExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.OrBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.OrLogicalExpr: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean canBeFalse()>
<soot.JastAddJ.OrLogicalExpr: boolean canBeFalse_compute()>
<soot.JastAddJ.OrLogicalExpr: boolean canBeTrue()>
<soot.JastAddJ.OrLogicalExpr: boolean canBeTrue_compute()>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.OrLogicalExpr: java.lang.String printOp()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Expr getLeftOperandNoTransform()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.OrLogicalExpr clone()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.OrLogicalExpr copy()>
<soot.JastAddJ.OrLogicalExpr: soot.JastAddJ.OrLogicalExpr fullCopy()>
<soot.JastAddJ.OrLogicalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.OrLogicalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.OrLogicalExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.OrLogicalExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.PackageAccess: boolean hasPackage(java.lang.String)>
<soot.JastAddJ.PackageAccess: boolean hasQualifiedPackage(java.lang.String)>
<soot.JastAddJ.PackageAccess: boolean hasQualifiedPackage_compute(java.lang.String)>
<soot.JastAddJ.PackageAccess: boolean isUnknown()>
<soot.JastAddJ.PackageAccess: boolean isUnknown_compute()>
<soot.JastAddJ.PackageAccess: java.lang.String getPackage()>
<soot.JastAddJ.PackageAccess: java.lang.String packageName()>
<soot.JastAddJ.PackageAccess: java.lang.String packageName_compute()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.PackageAccess clone()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.PackageAccess copy()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.PackageAccess fullCopy()>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.SimpleSet qualifiedLookupType(java.lang.String)>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.SimpleSet qualifiedLookupType_compute(java.lang.String)>
<soot.JastAddJ.PackageAccess: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.PackageAccess: void <init>(java.lang.String)>
<soot.JastAddJ.PackageAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.PackageAccess: void nameCheck()>
<soot.JastAddJ.PackageAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.PackageOrTypeAccess: java.lang.String getID()>
<soot.JastAddJ.PackageOrTypeAccess: java.lang.String name()>
<soot.JastAddJ.PackageOrTypeAccess: java.lang.String name_compute()>
<soot.JastAddJ.PackageOrTypeAccess: java.lang.String packageName()>
<soot.JastAddJ.PackageOrTypeAccess: java.lang.String packageName_compute()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.Access rewriteRule0()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.PackageOrTypeAccess clone()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.PackageOrTypeAccess copy()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.PackageOrTypeAccess fullCopy()>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.SimpleSet qualifiedLookupType(java.lang.String)>
<soot.JastAddJ.PackageOrTypeAccess: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.PackageOrTypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.PackageOrTypeAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.PackageOrTypeAccess: void nameCheck()>
<soot.JastAddJ.PackageOrTypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.ParExpr: boolean canBeFalse()>
<soot.JastAddJ.ParExpr: boolean canBeFalse_compute()>
<soot.JastAddJ.ParExpr: boolean canBeTrue()>
<soot.JastAddJ.ParExpr: boolean canBeTrue_compute()>
<soot.JastAddJ.ParExpr: boolean isConstant()>
<soot.JastAddJ.ParExpr: boolean isConstant_compute()>
<soot.JastAddJ.ParExpr: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDAafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDAafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDAafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDAafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafterFalse(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafterFalse_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafterTrue(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafterTrue_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ParExpr: boolean isSuperAccess()>
<soot.JastAddJ.ParExpr: boolean isSuperAccess_compute()>
<soot.JastAddJ.ParExpr: boolean isThisAccess()>
<soot.JastAddJ.ParExpr: boolean isThisAccess_compute()>
<soot.JastAddJ.ParExpr: boolean isVariable()>
<soot.JastAddJ.ParExpr: boolean isVariable_compute()>
<soot.JastAddJ.ParExpr: boolean staticContextQualifier()>
<soot.JastAddJ.ParExpr: boolean staticContextQualifier_compute()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.ParExpr clone()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.ParExpr copy()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.ParExpr fullCopy()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.Variable varDecl()>
<soot.JastAddJ.ParExpr: soot.JastAddJ.Variable varDecl_compute()>
<soot.JastAddJ.ParExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ParExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ParExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.ParExpr: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ParExpr: void typeCheck()>
<soot.JastAddJ.ParTypeAccess: int getNumTypeArgument()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.Access getTypeArgument(int)>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.Expr unqualifiedScope()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.Expr unqualifiedScope_compute()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.List getTypeArgumentList()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.List getTypeArgumentListNoTransform()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.ParTypeAccess clone()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.ParTypeAccess copy()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.ParTypeAccess fullCopy()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.SimpleSet Define_SimpleSet_lookupType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,java.lang.String)>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.TypeDecl genericDecl()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.TypeDecl genericDecl_compute()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ParTypeAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ParTypeAccess: void <init>(soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.ParTypeAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ParTypeAccess: void typeCheck()>
<soot.JastAddJ.ParameterDeclaration: boolean isFinal()>
<soot.JastAddJ.ParameterDeclaration: boolean isFinal_compute()>
<soot.JastAddJ.ParameterDeclaration: java.lang.Object next()>
<soot.JastAddJ.ParameterDeclaration: java.lang.String getID()>
<soot.JastAddJ.ParameterDeclaration: java.lang.String name()>
<soot.JastAddJ.ParameterDeclaration: java.lang.String name_compute()>
<soot.JastAddJ.ParameterDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.BodyDecl enclosingBodyDecl()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.ParameterDeclaration clone()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.ParameterDeclaration copy()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.ParameterDeclaration fullCopy()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.TypeDecl hostType()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ParameterDeclaration: soot.JastAddJ.VariableScope outerScope()>
<soot.JastAddJ.ParameterDeclaration: void <init>()>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void <init>(soot.JastAddJ.TypeDecl,java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ParameterDeclaration: void nameCheck()>
<soot.JastAddJ.ParameterDeclaration: void setID(beaver.Symbol)>
<soot.JastAddJ.ParameterDeclaration: void setID(java.lang.String)>
<soot.JastAddJ.ParameterDeclaration: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ParameterDeclaration: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ParameterDeclarationSubstituted: java.lang.String getID()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ParameterDeclaration fullCopy()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ParameterDeclarationSubstituted clone()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ParameterDeclarationSubstituted copy()>
<soot.JastAddJ.ParameterDeclarationSubstituted: soot.JastAddJ.ParameterDeclarationSubstituted fullCopy()>
<soot.JastAddJ.ParameterDeclarationSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.ParameterDeclaration)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void setID(java.lang.String)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void setOriginal(soot.JastAddJ.ParameterDeclaration)>
<soot.JastAddJ.ParameterDeclarationSubstituted: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.ParseName: java.lang.String getID()>
<soot.JastAddJ.ParseName: java.lang.String name()>
<soot.JastAddJ.ParseName: java.lang.String name_compute()>
<soot.JastAddJ.ParseName: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ParseName: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ParseName: soot.JastAddJ.Access rewriteRule0()>
<soot.JastAddJ.ParseName: soot.JastAddJ.ParseName clone()>
<soot.JastAddJ.ParseName: soot.JastAddJ.ParseName copy()>
<soot.JastAddJ.ParseName: soot.JastAddJ.ParseName fullCopy()>
<soot.JastAddJ.ParseName: soot.JastAddJ.SimpleSet qualifiedLookupType(java.lang.String)>
<soot.JastAddJ.ParseName: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.ParseName: void <init>(beaver.Symbol)>
<soot.JastAddJ.ParseName: void <init>(java.lang.String)>
<soot.JastAddJ.ParseName: void setID(beaver.Symbol)>
<soot.JastAddJ.ParseName: void setID(java.lang.String)>
<soot.JastAddJ.PlusExpr: boolean isConstant()>
<soot.JastAddJ.PlusExpr: boolean isConstant_compute()>
<soot.JastAddJ.PlusExpr: java.lang.String printPreOp()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.PlusExpr clone()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.PlusExpr copy()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.PlusExpr fullCopy()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.PlusExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.PlusExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.PlusExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PlusExpr: void typeCheck()>
<soot.JastAddJ.PostDecExpr: java.lang.String printPostOp()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.PostDecExpr clone()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.PostDecExpr copy()>
<soot.JastAddJ.PostDecExpr: soot.JastAddJ.PostDecExpr fullCopy()>
<soot.JastAddJ.PostDecExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.PostDecExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PostIncExpr: java.lang.String printPostOp()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.PostIncExpr clone()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.PostIncExpr copy()>
<soot.JastAddJ.PostIncExpr: soot.JastAddJ.PostIncExpr fullCopy()>
<soot.JastAddJ.PostIncExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.PostIncExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PostfixExpr: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.PostfixExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PostfixExpr: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.PostfixExpr: soot.JastAddJ.PostfixExpr clone()>
<soot.JastAddJ.PostfixExpr: void <init>()>
<soot.JastAddJ.PostfixExpr: void definiteAssignment()>
<soot.JastAddJ.PostfixExpr: void typeCheck()>
<soot.JastAddJ.PreDecExpr: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.PreDecExpr: java.lang.String printPreOp()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.PreDecExpr clone()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.PreDecExpr copy()>
<soot.JastAddJ.PreDecExpr: soot.JastAddJ.PreDecExpr fullCopy()>
<soot.JastAddJ.PreDecExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.PreDecExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PreDecExpr: void definiteAssignment()>
<soot.JastAddJ.PreDecExpr: void typeCheck()>
<soot.JastAddJ.PreIncExpr: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.PreIncExpr: java.lang.String printPreOp()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.Expr getOperand()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.Expr getOperandNoTransform()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.PreIncExpr clone()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.PreIncExpr copy()>
<soot.JastAddJ.PreIncExpr: soot.JastAddJ.PreIncExpr fullCopy()>
<soot.JastAddJ.PreIncExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.PreIncExpr: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.PreIncExpr: void definiteAssignment()>
<soot.JastAddJ.PreIncExpr: void typeCheck()>
<soot.JastAddJ.PrimaryExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PrimaryExpr: soot.JastAddJ.PrimaryExpr clone()>
<soot.JastAddJ.PrimaryExpr: void <init>()>
<soot.JastAddJ.PrimitiveTypeAccess: java.lang.String getID()>
<soot.JastAddJ.PrimitiveTypeAccess: java.lang.String getID_compute()>
<soot.JastAddJ.PrimitiveTypeAccess: java.lang.String getName()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.PrimitiveTypeAccess clone()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.PrimitiveTypeAccess copy()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.PrimitiveTypeAccess fullCopy()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.PrimitiveTypeAccess: soot.JastAddJ.SimpleSet decls_compute()>
<soot.JastAddJ.PrimitiveTypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.PrimitiveTypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.PrimitiveTypeAccess: void setName(java.lang.String)>
<soot.JastAddJ.PrimitiveTypeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,int,int,int,soot.JastAddJ.Problem$Severity,soot.JastAddJ.Problem$Kind)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,soot.JastAddJ.Problem$Severity)>
<soot.JastAddJ.Problem: void <init>(java.lang.String,java.lang.String,int,soot.JastAddJ.Problem$Severity,soot.JastAddJ.Problem$Kind)>
<soot.JastAddJ.Program$1: java.lang.Object next()>
<soot.JastAddJ.Program$1: void <init>(soot.JastAddJ.Program)>
<soot.JastAddJ.RShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.RShiftExpr clone()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.RShiftExpr copy()>
<soot.JastAddJ.RShiftExpr: soot.JastAddJ.RShiftExpr fullCopy()>
<soot.JastAddJ.RShiftExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.RShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.RShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.RelationalExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.RelationalExpr: soot.JastAddJ.RelationalExpr clone()>
<soot.JastAddJ.RelationalExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.RelationalExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.RelationalExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.RelationalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.RelationalExpr: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.RelationalExpr: void <init>()>
<soot.JastAddJ.RelationalExpr: void emitEvalBranch(soot.JastAddJ.Body)>
<soot.JastAddJ.RelationalExpr: void typeCheck()>
<soot.JastAddJ.ReturnStmt: boolean hasResult()>
<soot.JastAddJ.ReturnStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ReturnStmt: boolean isDAafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.ReturnStmt: boolean isDAafterReachedFinallyBlocks_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.ReturnStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ReturnStmt: boolean isDUafterReachedFinallyBlocks(soot.JastAddJ.Variable)>
<soot.JastAddJ.ReturnStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.ReturnStmt: java.util.ArrayList finallyList()>
<soot.JastAddJ.ReturnStmt: java.util.ArrayList finallyList_compute()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.Expr getResult()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.Opt getResultOpt()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.Opt getResultOptNoTransform()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.ReturnStmt clone()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.ReturnStmt copy()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.ReturnStmt fullCopy()>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.TypeDecl Define_TypeDecl_assignConvertedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ReturnStmt: soot.JastAddJ.TypeDecl returnType()>
<soot.JastAddJ.ReturnStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ReturnStmt: void <init>(soot.JastAddJ.Opt)>
<soot.JastAddJ.ReturnStmt: void collectBranches(java.util.Collection)>
<soot.JastAddJ.ReturnStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ReturnStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ReturnStmt: void typeCheck()>
<soot.JastAddJ.ShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ShiftExpr: soot.JastAddJ.ShiftExpr clone()>
<soot.JastAddJ.ShiftExpr: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ShiftExpr: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ShiftExpr: void <init>()>
<soot.JastAddJ.ShiftExpr: void typeCheck()>
<soot.JastAddJ.Signatures$FieldSignature: soot.JastAddJ.Access fieldTypeAccess()>
<soot.JastAddJ.Signatures$FieldSignature: void <init>(java.lang.String)>
<soot.JastAddJ.Signatures: java.lang.String identifier()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access arrayTypeSignature()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access baseType()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access classTypeSignature()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access classTypeSignatureSuffix()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access fieldTypeSignature()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access typeArgument()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access typeSignature()>
<soot.JastAddJ.Signatures: soot.JastAddJ.Access typeVariableSignature()>
<soot.JastAddJ.Signatures: soot.JastAddJ.List typeArguments()>
<soot.JastAddJ.Signatures: void <init>(java.lang.String)>
<soot.JastAddJ.Signatures: void error(java.lang.String)>
<soot.JastAddJ.SimpleSet$1: java.util.Iterator iterator()>
<soot.JastAddJ.SimpleSet$1: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: boolean contains(java.lang.Object)>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: java.util.Iterator iterator()>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: void <init>()>
<soot.JastAddJ.SimpleSet$SimpleSetImpl: void <init>(soot.JastAddJ.SimpleSet$SimpleSetImpl)>
<soot.JastAddJ.SingleStaticImportDecl: java.lang.String getID()>
<soot.JastAddJ.SingleStaticImportDecl: java.lang.String name()>
<soot.JastAddJ.SingleStaticImportDecl: java.lang.String name_compute()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.SingleStaticImportDecl clone()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.SingleStaticImportDecl copy()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.SingleStaticImportDecl fullCopy()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.SingleStaticImportDecl: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.SingleStaticImportDecl: void <init>(soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.SingleStaticImportDecl: void nameCheck()>
<soot.JastAddJ.SingleStaticImportDecl: void setID(beaver.Symbol)>
<soot.JastAddJ.SingleStaticImportDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.SingleStaticImportDecl: void typeCheck()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SimpleSet allImportedTypes(java.lang.String)>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SimpleSet importedTypes(java.lang.String)>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SimpleSet importedTypes_compute(java.lang.String)>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SingleTypeImportDecl clone()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SingleTypeImportDecl copy()>
<soot.JastAddJ.SingleTypeImportDecl: soot.JastAddJ.SingleTypeImportDecl fullCopy()>
<soot.JastAddJ.SingleTypeImportDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.SingleTypeImportDecl: void nameCheck()>
<soot.JastAddJ.SingleTypeImportDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.StaticImportDecl: java.util.Collection importedMethods(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: java.util.Collection importedMethods_compute(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.SimpleSet importedFields(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.SimpleSet importedFields_compute(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.SimpleSet importedTypes(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.SimpleSet importedTypes_compute(java.lang.String)>
<soot.JastAddJ.StaticImportDecl: soot.JastAddJ.StaticImportDecl clone()>
<soot.JastAddJ.StaticImportDecl: void <init>()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.StaticImportOnDemandDecl clone()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.StaticImportOnDemandDecl copy()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.StaticImportOnDemandDecl fullCopy()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.StaticImportOnDemandDecl: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.StaticImportOnDemandDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.StaticImportOnDemandDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.StaticInitializer: boolean Define_boolean_handlesException(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.StaticInitializer: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.StaticInitializer: boolean handlesException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.StaticInitializer: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.StaticInitializer: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.StaticInitializer: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.StaticInitializer: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.Block getBlock()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.Block getBlockNoTransform()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.StaticInitializer clone()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.StaticInitializer copy()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.StaticInitializer fullCopy()>
<soot.JastAddJ.StaticInitializer: soot.JastAddJ.TypeDecl Define_TypeDecl_enclosingInstance(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.StaticInitializer: void <init>(soot.JastAddJ.Block)>
<soot.JastAddJ.StaticInitializer: void checkModifiers()>
<soot.JastAddJ.StaticInitializer: void checkUnreachableStmt()>
<soot.JastAddJ.StaticInitializer: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.Stmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Stmt: boolean isDAbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Stmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Stmt: boolean isDUbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.Stmt: boolean reachable()>
<soot.JastAddJ.Stmt: boolean reportUnreachable()>
<soot.JastAddJ.Stmt: int localNum()>
<soot.JastAddJ.Stmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Stmt: soot.JastAddJ.BodyDecl enclosingBodyDecl()>
<soot.JastAddJ.Stmt: soot.JastAddJ.SimpleSet lookupVariable(java.lang.String)>
<soot.JastAddJ.Stmt: soot.JastAddJ.Stmt clone()>
<soot.JastAddJ.Stmt: soot.JastAddJ.TypeDecl hostType()>
<soot.JastAddJ.Stmt: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.Stmt: void <init>()>
<soot.JastAddJ.Stmt: void checkUnreachableStmt()>
<soot.JastAddJ.StringLiteral: java.lang.String getLITERAL()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.StringLiteral clone()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.StringLiteral copy()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.StringLiteral fullCopy()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.StringLiteral: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.StringLiteral: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.StringLiteral: void <init>(java.lang.String)>
<soot.JastAddJ.StringLiteral: void setLITERAL(java.lang.String)>
<soot.JastAddJ.SubExpr: java.lang.String printOp()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.SubExpr clone()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.SubExpr copy()>
<soot.JastAddJ.SubExpr: soot.JastAddJ.SubExpr fullCopy()>
<soot.JastAddJ.SubExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.SubExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.SuperAccess clone()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.SuperAccess copy()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.SuperAccess fullCopy()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl decl_compute()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl refined_LookupType_decl()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.SuperAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.SuperAccess: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.SuperAccess: void <init>(java.lang.String)>
<soot.JastAddJ.SuperAccess: void nameCheck()>
<soot.JastAddJ.SuperAccess: void setID(java.lang.String)>
<soot.JastAddJ.SynchronizedStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: boolean canCompleteNormally()>
<soot.JastAddJ.SynchronizedStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.SynchronizedStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.SynchronizedStmt: java.util.ArrayList Define_ArrayList_exceptionRanges(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.SynchronizedStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.SynchronizedStmt: java.util.ArrayList exceptionRanges_compute()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.Block getBlock()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.Block getBlockNoTransform()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.SynchronizedStmt clone()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.SynchronizedStmt copy()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.SynchronizedStmt fullCopy()>
<soot.JastAddJ.SynchronizedStmt: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.SynchronizedStmt: soot.Local monitor(soot.JastAddJ.Body)>
<soot.JastAddJ.SynchronizedStmt: soot.Local monitor_compute(soot.JastAddJ.Body)>
<soot.JastAddJ.SynchronizedStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Block)>
<soot.JastAddJ.SynchronizedStmt: void collectFinally(soot.JastAddJ.Stmt,java.util.ArrayList)>
<soot.JastAddJ.SynchronizedStmt: void emitFinallyCode(soot.JastAddJ.Body)>
<soot.JastAddJ.SynchronizedStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.SynchronizedStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.SynchronizedStmt: void typeCheck()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.ThisAccess clone()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.ThisAccess copy()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.ThisAccess fullCopy()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl decl_compute()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl refined_LookupType_decl()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.ThisAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.ThisAccess: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.ThisAccess: void <init>(java.lang.String)>
<soot.JastAddJ.ThisAccess: void nameCheck()>
<soot.JastAddJ.ThisAccess: void setID(java.lang.String)>
<soot.JastAddJ.ThrowStmt: boolean handlesException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ThrowStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ThrowStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.ThrowStmt: boolean reachedException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.Expr getExpr()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.Expr getExprNoTransform()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.ThrowStmt clone()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.ThrowStmt copy()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.ThrowStmt fullCopy()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeNull()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeNullPointerException()>
<soot.JastAddJ.ThrowStmt: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.ThrowStmt: void <init>(soot.JastAddJ.Expr)>
<soot.JastAddJ.ThrowStmt: void collectExceptions(java.util.Collection,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.ThrowStmt: void exceptionHandling()>
<soot.JastAddJ.ThrowStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.ThrowStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.ThrowStmt: void typeCheck()>
<soot.JastAddJ.TryStmt: boolean Define_boolean_handlesException(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TryStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean Define_boolean_reachableCatchClause(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TryStmt: boolean canCompleteNormally()>
<soot.JastAddJ.TryStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.TryStmt: boolean handlesException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TryStmt: boolean hasFinally()>
<soot.JastAddJ.TryStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDAafterFinally(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDAafterFinally_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUafterFinally(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUafterFinally_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUbefore(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean isDUbefore_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.TryStmt: boolean reachableThrow(soot.JastAddJ.CatchClause)>
<soot.JastAddJ.TryStmt: boolean reachableThrow_compute(soot.JastAddJ.CatchClause)>
<soot.JastAddJ.TryStmt: boolean reachedException(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.TryStmt: int getNumCatchClause()>
<soot.JastAddJ.TryStmt: java.util.ArrayList Define_ArrayList_exceptionRanges(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TryStmt: java.util.ArrayList exceptionRanges()>
<soot.JastAddJ.TryStmt: java.util.ArrayList exceptionRanges_compute()>
<soot.JastAddJ.TryStmt: java.util.Collection branches()>
<soot.JastAddJ.TryStmt: java.util.Collection branchesFromFinally()>
<soot.JastAddJ.TryStmt: java.util.Collection branchesFromFinally_compute()>
<soot.JastAddJ.TryStmt: java.util.Collection branches_compute()>
<soot.JastAddJ.TryStmt: java.util.Collection escapedBranches()>
<soot.JastAddJ.TryStmt: java.util.Collection escapedBranches_compute()>
<soot.JastAddJ.TryStmt: java.util.Collection targetBranches()>
<soot.JastAddJ.TryStmt: java.util.Collection targetBranches_compute()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Block getBlock()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Block getBlockNoTransform()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Block getFinally()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.CatchClause getCatchClause(int)>
<soot.JastAddJ.TryStmt: soot.JastAddJ.List getCatchClauseList()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.List getCatchClauseListNoTransform()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Opt getFinallyOpt()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Opt getFinallyOptNoTransform()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.Stmt branchTarget(soot.JastAddJ.Stmt)>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TryStmt clone()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TryStmt copy()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TryStmt fullCopy()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TypeDecl typeError()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TypeDecl typeRuntimeException()>
<soot.JastAddJ.TryStmt: soot.JastAddJ.TypeDecl typeThrowable()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.TryStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.TryStmt: void <init>(soot.JastAddJ.Block,soot.JastAddJ.List,soot.JastAddJ.Opt)>
<soot.JastAddJ.TryStmt: void collectBranches(java.util.Collection)>
<soot.JastAddJ.TryStmt: void collectFinally(soot.JastAddJ.Stmt,java.util.ArrayList)>
<soot.JastAddJ.TryStmt: void emitExceptionHandler(soot.JastAddJ.Body)>
<soot.JastAddJ.TryStmt: void emitFinallyCode(soot.JastAddJ.Body)>
<soot.JastAddJ.TryStmt: void flushCache()>
<soot.JastAddJ.TryStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.TryStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.TypeAccess: boolean usesTypeVariable()>
<soot.JastAddJ.TypeAccess: boolean usesTypeVariable_compute()>
<soot.JastAddJ.TypeAccess: java.lang.String getID()>
<soot.JastAddJ.TypeAccess: java.lang.String getPackage()>
<soot.JastAddJ.TypeAccess: java.lang.String name()>
<soot.JastAddJ.TypeAccess: java.lang.String nameWithPackage()>
<soot.JastAddJ.TypeAccess: java.lang.String nameWithPackage_compute()>
<soot.JastAddJ.TypeAccess: java.lang.String name_compute()>
<soot.JastAddJ.TypeAccess: java.lang.String packageName()>
<soot.JastAddJ.TypeAccess: java.lang.String packageName_compute()>
<soot.JastAddJ.TypeAccess: java.lang.String typeName()>
<soot.JastAddJ.TypeAccess: java.lang.String typeName_compute()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.SimpleSet decls_compute()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.SimpleSet qualifiedLookupVariable(java.lang.String)>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.SimpleSet qualifiedLookupVariable_compute(java.lang.String)>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeAccess clone()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeAccess copy()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeAccess fullCopy()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl decl()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl decl_compute()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl refined_LookupType_decl()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.TypeAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.TypeAccess: void <init>()>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String)>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.TypeAccess: void <init>(java.lang.String,java.lang.String)>
<soot.JastAddJ.TypeAccess: void accessControl()>
<soot.JastAddJ.TypeAccess: void checkModifiers()>
<soot.JastAddJ.TypeAccess: void nameCheck()>
<soot.JastAddJ.TypeAccess: void setID(java.lang.String)>
<soot.JastAddJ.TypeAccess: void setPackage(java.lang.String)>
<soot.JastAddJ.TypeAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.TypeAccess: void transformation()>
<soot.JastAddJ.TypeAccess: void typeCheck()>
<soot.JastAddJ.TypeDescriptor: java.lang.String arrayTypeList(java.lang.String,soot.JastAddJ.ArrayTypeAccess)>
<soot.JastAddJ.TypeDescriptor: java.lang.String typeList(java.lang.String,soot.JastAddJ.List)>
<soot.JastAddJ.TypeDescriptor: soot.JastAddJ.Access type()>
<soot.JastAddJ.TypeDescriptor: soot.JastAddJ.Access type(java.lang.String)>
<soot.JastAddJ.TypeDescriptor: soot.JastAddJ.List parameterList()>
<soot.JastAddJ.TypeDescriptor: soot.JastAddJ.List parameterListSkipFirst()>
<soot.JastAddJ.TypeDescriptor: void <init>(soot.JastAddJ.BytecodeParser,java.lang.String)>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.Access getAccessNoTransform()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.SimpleSet importedTypes(java.lang.String)>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.SimpleSet importedTypes_compute(java.lang.String)>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.TypeDecl lookupType(java.lang.String,java.lang.String)>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.TypeImportOnDemandDecl clone()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.TypeImportOnDemandDecl copy()>
<soot.JastAddJ.TypeImportOnDemandDecl: soot.JastAddJ.TypeImportOnDemandDecl fullCopy()>
<soot.JastAddJ.TypeImportOnDemandDecl: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.TypeImportOnDemandDecl: void nameCheck()>
<soot.JastAddJ.TypeImportOnDemandDecl: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.TypeVariable$1: soot.JastAddJ.TypeDecl substitute(soot.JastAddJ.TypeVariable)>
<soot.JastAddJ.TypeVariable$1: void <init>(soot.JastAddJ.TypeVariable,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.URShiftExpr: java.lang.String printOp()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.URShiftExpr clone()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.URShiftExpr copy()>
<soot.JastAddJ.URShiftExpr: soot.JastAddJ.URShiftExpr fullCopy()>
<soot.JastAddJ.URShiftExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.URShiftExpr: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.URShiftExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JastAddJ.Unary: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Unary: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Unary: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.Unary: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.Unary: java.lang.String printPostOp()>
<soot.JastAddJ.Unary: java.lang.String printPreOp()>
<soot.JastAddJ.Unary: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Unary: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Unary: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.Unary: soot.JastAddJ.Unary clone()>
<soot.JastAddJ.Unary: soot.Value emitPostfix(soot.JastAddJ.Body,int)>
<soot.JastAddJ.Unary: soot.Value emitPrefix(soot.JastAddJ.Body,int)>
<soot.JastAddJ.Unary: void <init>()>
<soot.JastAddJ.Unary: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.VarAccess: boolean checkDUeverywhere(soot.JastAddJ.Variable)>
<soot.JastAddJ.VarAccess: boolean inDeclaringClass()>
<soot.JastAddJ.VarAccess: boolean inDeclaringClass_compute()>
<soot.JastAddJ.VarAccess: boolean inSameInitializer()>
<soot.JastAddJ.VarAccess: boolean inSameInitializer_compute()>
<soot.JastAddJ.VarAccess: boolean isConstant()>
<soot.JastAddJ.VarAccess: boolean isConstant_compute()>
<soot.JastAddJ.VarAccess: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.VarAccess: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.VarAccess: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.VarAccess: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.VarAccess: boolean requiresAccessor()>
<soot.JastAddJ.VarAccess: boolean requiresAccessor_compute()>
<soot.JastAddJ.VarAccess: boolean unassignedEverywhere(soot.JastAddJ.Variable,soot.JastAddJ.TryStmt)>
<soot.JastAddJ.VarAccess: boolean unassignedEverywhere_compute(soot.JastAddJ.Variable,soot.JastAddJ.TryStmt)>
<soot.JastAddJ.VarAccess: java.lang.String getID()>
<soot.JastAddJ.VarAccess: java.lang.String name()>
<soot.JastAddJ.VarAccess: java.lang.String name_compute()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.BodyDecl closestBodyDecl(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.NameType predNameType()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.SimpleSet decls()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.SimpleSet decls_compute()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl fieldQualifierType()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl refined_GenericsCodegen_fieldQualifierType()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl refined_InnerClasses_fieldQualifierType()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.VarAccess clone()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.VarAccess copy()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.VarAccess fullCopy()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Variable decl()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Variable decl_compute()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Variable varDecl()>
<soot.JastAddJ.VarAccess: soot.JastAddJ.Variable varDecl_compute()>
<soot.JastAddJ.VarAccess: soot.Local base(soot.JastAddJ.Body)>
<soot.JastAddJ.VarAccess: soot.Local base_compute(soot.JastAddJ.Body)>
<soot.JastAddJ.VarAccess: soot.Local createLoadQualifier(soot.JastAddJ.Body)>
<soot.JastAddJ.VarAccess: soot.SootFieldRef sootRef()>
<soot.JastAddJ.VarAccess: soot.Value emitStore(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.VarAccess: soot.Value eval(soot.JastAddJ.Body)>
<soot.JastAddJ.VarAccess: soot.Value refined_Expressions_emitStore(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.VarAccess: soot.Value refined_Expressions_eval(soot.JastAddJ.Body)>
<soot.JastAddJ.VarAccess: void <init>()>
<soot.JastAddJ.VarAccess: void <init>(java.lang.String)>
<soot.JastAddJ.VarAccess: void <init>(java.lang.String,int,int)>
<soot.JastAddJ.VarAccess: void checkEnum(soot.JastAddJ.EnumDecl)>
<soot.JastAddJ.VarAccess: void checkModifiers()>
<soot.JastAddJ.VarAccess: void collectEnclosingVariables(java.util.HashSet,soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.VarAccess: void collectTypesToSignatures(java.util.Collection)>
<soot.JastAddJ.VarAccess: void definiteAssignment()>
<soot.JastAddJ.VarAccess: void nameCheck()>
<soot.JastAddJ.VarAccess: void setID(java.lang.String)>
<soot.JastAddJ.VarAccess: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.VarAccess: void transformation()>
<soot.JastAddJ.VarDeclStmt: int getNumVariableDecl()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.List createVariableDeclarationList()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.List getVariableDeclList()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.List getVariableDeclListNoTransform()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.List rewriteBlock_getStmt()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.List rewriteForStmt_getInitStmt()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.VarDeclStmt clone()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.VarDeclStmt copy()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.VarDeclStmt fullCopy()>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.VariableDecl getVariableDecl(int)>
<soot.JastAddJ.VarDeclStmt: soot.JastAddJ.VariableDeclaration rewriteRule0()>
<soot.JastAddJ.VarDeclStmt: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,soot.JastAddJ.List)>
<soot.JastAddJ.VariableArityParameterDeclaration: java.lang.String getID()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.ParameterDeclaration fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.VariableArityParameterDeclaration clone()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.VariableArityParameterDeclaration copy()>
<soot.JastAddJ.VariableArityParameterDeclaration: soot.JastAddJ.VariableArityParameterDeclaration fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>()>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol)>
<soot.JastAddJ.VariableArityParameterDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String)>
<soot.JastAddJ.VariableArityParameterDeclaration: void nameCheck()>
<soot.JastAddJ.VariableArityParameterDeclaration: void setID(beaver.Symbol)>
<soot.JastAddJ.VariableArityParameterDeclaration: void setID(java.lang.String)>
<soot.JastAddJ.VariableArityParameterDeclaration: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.VariableArityParameterDeclaration: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: java.lang.String getID()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.ParameterDeclaration fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.VariableArityParameterDeclarationSubstituted clone()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.VariableArityParameterDeclarationSubstituted copy()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: soot.JastAddJ.VariableArityParameterDeclarationSubstituted fullCopy()>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.VariableArityParameterDeclaration)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void setID(java.lang.String)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void setOriginal(soot.JastAddJ.VariableArityParameterDeclaration)>
<soot.JastAddJ.VariableArityParameterDeclarationSubstituted: void setTypeAccess(soot.JastAddJ.Access)>
<soot.JastAddJ.VariableDeclaration: boolean declaresVariable(java.lang.String)>
<soot.JastAddJ.VariableDeclaration: boolean declaresVariable_compute(java.lang.String)>
<soot.JastAddJ.VariableDeclaration: boolean hasInit()>
<soot.JastAddJ.VariableDeclaration: boolean isBlank()>
<soot.JastAddJ.VariableDeclaration: boolean isBlankFinal()>
<soot.JastAddJ.VariableDeclaration: boolean isBlankFinal_compute()>
<soot.JastAddJ.VariableDeclaration: boolean isBlank_compute()>
<soot.JastAddJ.VariableDeclaration: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.VariableDeclaration: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.VariableDeclaration: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.VariableDeclaration: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.VariableDeclaration: boolean isFinal()>
<soot.JastAddJ.VariableDeclaration: boolean isFinal_compute()>
<soot.JastAddJ.VariableDeclaration: boolean isValue()>
<soot.JastAddJ.VariableDeclaration: boolean isValue_compute()>
<soot.JastAddJ.VariableDeclaration: java.lang.Object next()>
<soot.JastAddJ.VariableDeclaration: java.lang.String getID()>
<soot.JastAddJ.VariableDeclaration: java.lang.String name()>
<soot.JastAddJ.VariableDeclaration: java.lang.String name_compute()>
<soot.JastAddJ.VariableDeclaration: java.util.Iterator iterator()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Access getTypeAccess()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Access getTypeAccessNoTransform()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Expr getInit()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Modifiers getModifiers()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Modifiers getModifiersNoTransform()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.NameType Define_NameType_nameType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Opt getInitOpt()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.Opt getInitOptNoTransform()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.SimpleSet add(java.lang.Object)>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl Define_TypeDecl_assignConvertedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl Define_TypeDecl_declType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl Define_TypeDecl_expectedType(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl hostType()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.VariableDeclaration clone()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.VariableDeclaration copy()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.VariableDeclaration fullCopy()>
<soot.JastAddJ.VariableDeclaration: soot.JastAddJ.VariableScope outerScope()>
<soot.JastAddJ.VariableDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,beaver.Symbol,soot.JastAddJ.Opt)>
<soot.JastAddJ.VariableDeclaration: void <init>(soot.JastAddJ.Modifiers,soot.JastAddJ.Access,java.lang.String,soot.JastAddJ.Opt)>
<soot.JastAddJ.VariableDeclaration: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.VariableDeclaration: void nameCheck()>
<soot.JastAddJ.VariableDeclaration: void setID(beaver.Symbol)>
<soot.JastAddJ.VariableDeclaration: void setID(java.lang.String)>
<soot.JastAddJ.VariableDeclaration: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.VariableDeclaration: void typeCheck()>
<soot.JastAddJ.WhileStmt: boolean Define_boolean_isDAbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean Define_boolean_isDUbefore(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode,soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean Define_boolean_reachable(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.WhileStmt: boolean canCompleteNormally()>
<soot.JastAddJ.WhileStmt: boolean canCompleteNormally_compute()>
<soot.JastAddJ.WhileStmt: boolean isDAafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean isDAafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean isDUafter(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean isDUafter_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean isDUbeforeCondition(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean isDUbeforeCondition_compute(soot.JastAddJ.Variable)>
<soot.JastAddJ.WhileStmt: boolean targetOf(soot.JastAddJ.BreakStmt)>
<soot.JastAddJ.WhileStmt: boolean targetOf(soot.JastAddJ.ContinueStmt)>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.Expr getCondition()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.Expr getConditionNoTransform()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.Stmt getStmt()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.Stmt getStmtNoTransform()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.WhileStmt clone()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.WhileStmt copy()>
<soot.JastAddJ.WhileStmt: soot.JastAddJ.WhileStmt fullCopy()>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_false_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt Define_soot_jimple_Stmt_condition_true_label(soot.JastAddJ.ASTNode,soot.JastAddJ.ASTNode)>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt break_label()>
<soot.JastAddJ.WhileStmt: soot.jimple.Stmt continue_label()>
<soot.JastAddJ.WhileStmt: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Stmt)>
<soot.JastAddJ.WhileStmt: void flushCache()>
<soot.JastAddJ.WhileStmt: void jimplify2(soot.JastAddJ.Body)>
<soot.JastAddJ.WhileStmt: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.WhileStmt: void typeCheck()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.TypeDecl typeWildcard()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.Wildcard clone()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.Wildcard copy()>
<soot.JastAddJ.Wildcard: soot.JastAddJ.Wildcard fullCopy()>
<soot.JastAddJ.Wildcard: void <init>()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.TypeDecl lookupWildcardExtends(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.WildcardExtends clone()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.WildcardExtends copy()>
<soot.JastAddJ.WildcardExtends: soot.JastAddJ.WildcardExtends fullCopy()>
<soot.JastAddJ.WildcardExtends: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardExtends: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.Access getAccess()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.TypeDecl lookupWildcardSuper(soot.JastAddJ.TypeDecl)>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.TypeDecl type()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.TypeDecl type_compute()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.WildcardSuper clone()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.WildcardSuper copy()>
<soot.JastAddJ.WildcardSuper: soot.JastAddJ.WildcardSuper fullCopy()>
<soot.JastAddJ.WildcardSuper: void <init>(soot.JastAddJ.Access)>
<soot.JastAddJ.WildcardSuper: void toString(java.lang.StringBuffer)>
<soot.JastAddJ.XorBitwiseExpr: java.lang.String printOp()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.ASTNode fullCopy()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.ASTNode rewriteTo()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.Constant constant()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.Constant constant_compute()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.Expr getLeftOperand()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.Expr getRightOperand()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.Expr getRightOperandNoTransform()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.XorBitwiseExpr clone()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.XorBitwiseExpr copy()>
<soot.JastAddJ.XorBitwiseExpr: soot.JastAddJ.XorBitwiseExpr fullCopy()>
<soot.JastAddJ.XorBitwiseExpr: soot.Value emitOperation(soot.JastAddJ.Body,soot.Value,soot.Value)>
<soot.JastAddJ.XorBitwiseExpr: void <init>(soot.JastAddJ.Expr,soot.JastAddJ.Expr)>
<soot.JavaClassProvider$JarException: void <init>(java.lang.String)>
<soot.JavaClassProvider: soot.ClassSource find(java.lang.String)>
<soot.JavaClassSource: void <init>(java.lang.String)>
<soot.JavaClassSource: void <init>(java.lang.String,java.io.File)>
<soot.JimpleClassProvider: soot.ClassSource find(java.lang.String)>
<soot.JimpleClassSource: void <init>(java.lang.String,java.io.InputStream)>
<soot.LabeledUnitPrinter: java.util.Map labels()>
<soot.LabeledUnitPrinter: java.util.Map references()>
<soot.LabeledUnitPrinter: void createLabelMaps(soot.Body)>
<soot.LabeledUnitPrinter: void unitRef(soot.Unit,boolean)>
<soot.MethodContext: soot.MethodOrMethodContext v(soot.SootMethod,soot.Context)>
<soot.MethodToContexts: java.util.List get(soot.SootMethod)>
<soot.MethodToContexts: void add(soot.MethodOrMethodContext)>
<soot.Modifier: java.lang.String toString(int)>
<soot.Pack: java.lang.String getPhaseName()>
<soot.Pack: java.util.Iterator iterator()>
<soot.Pack: soot.Transform get(java.lang.String)>
<soot.Pack: void <init>(java.lang.String)>
<soot.Pack: void add(soot.Transform)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain,java.lang.Object)>
<soot.PatchingChain$PatchingIterator: void <init>(soot.PatchingChain,soot.util.Chain,java.lang.Object,java.lang.Object)>
<soot.PatchingChain: java.lang.Object getFirst()>
<soot.PatchingChain: java.lang.Object getLast()>
<soot.PatchingChain: java.lang.Object getPredOf(java.lang.Object)>
<soot.PatchingChain: java.lang.Object getSuccOf(java.lang.Object)>
<soot.PatchingChain: java.util.Iterator iterator()>
<soot.PatchingChain: java.util.Iterator iterator(java.lang.Object)>
<soot.PatchingChain: java.util.Iterator iterator(java.lang.Object,java.lang.Object)>
<soot.PatchingChain: java.util.Iterator snapshotIterator()>
<soot.PatchingChain: soot.util.Chain getNonPatchingChain()>
<soot.PatchingChain: void <init>(soot.util.Chain)>
<soot.PatchingChain: void insertBefore(java.util.List,java.lang.Object)>
<soot.PhaseOptions: boolean getBoolean(java.util.Map,java.lang.String)>
<soot.PhaseOptions: boolean setPhaseOption(java.lang.String,java.lang.String)>
<soot.PhaseOptions: boolean setPhaseOption(soot.HasPhaseOptions,java.lang.String)>
<soot.PhaseOptions: java.lang.String getKey(java.lang.String)>
<soot.PhaseOptions: java.util.Map getPhaseOptions(java.lang.String)>
<soot.PhaseOptions: java.util.Map getPhaseOptions(soot.HasPhaseOptions)>
<soot.PhaseOptions: java.util.Map mapForPhase(soot.HasPhaseOptions)>
<soot.PhaseOptions: soot.PackManager getPM()>
<soot.PhaseOptions: void setPackManager(soot.PackManager)>
<soot.PhaseOptions: void setPhaseOptionIfUnset(java.lang.String,java.lang.String)>
<soot.RadioScenePack: void <init>(java.lang.String)>
<soot.RadioScenePack: void add(soot.Transform)>
<soot.RadioScenePack: void internalApply()>
<soot.RefLikeType: void <init>()>
<soot.RefType: java.lang.String getClassName()>
<soot.RefType: java.lang.String toString()>
<soot.RefType: soot.AnySubType getAnySubType()>
<soot.RefType: soot.RefType v(java.lang.String)>
<soot.RefType: soot.SootClass getSootClass()>
<soot.RefType: void <init>(java.lang.String)>
<soot.RefType: void apply(soot.util.Switch)>
<soot.RefType: void setAnySubType(soot.AnySubType)>
<soot.RefType: void setSootClass(soot.SootClass)>
<soot.ResolutionFailedException: void <init>(java.lang.String)>
<soot.Scene: boolean containsClass(java.lang.String)>
<soot.Scene: boolean containsMethod(java.lang.String)>
<soot.Scene: java.lang.String getSootClassPath()>
<soot.Scene: java.lang.String quotedNameOf(java.lang.String)>
<soot.Scene: java.lang.String signatureToClass(java.lang.String)>
<soot.Scene: java.lang.String signatureToSubsignature(java.lang.String)>
<soot.Scene: java.util.Collection dynamicClasses()>
<soot.Scene: java.util.List getClasses(int)>
<soot.Scene: java.util.List getEntryPoints()>
<soot.Scene: java.util.Set getReservedNames()>
<soot.Scene: soot.FastHierarchy getFastHierarchy()>
<soot.Scene: soot.FastHierarchy getOrMakeFastHierarchy()>
<soot.Scene: soot.Hierarchy getActiveHierarchy()>
<soot.Scene: soot.PointsToAnalysis getPointsToAnalysis()>
<soot.Scene: soot.RefType getObjectType()>
<soot.Scene: soot.RefType getRefType(java.lang.String)>
<soot.Scene: soot.SootClass getMainClass()>
<soot.Scene: soot.SootClass getSootClass(java.lang.String)>
<soot.Scene: soot.SootClass loadClassAndSupport(java.lang.String)>
<soot.Scene: soot.SootField getField(java.lang.String)>
<soot.Scene: soot.SootField grabField(java.lang.String)>
<soot.Scene: soot.SootFieldRef makeFieldRef(soot.SootClass,java.lang.String,soot.Type,boolean)>
<soot.Scene: soot.SootMethod getMethod(java.lang.String)>
<soot.Scene: soot.SootMethod grabMethod(java.lang.String)>
<soot.Scene: soot.SootMethodRef makeConstructorRef(soot.SootClass,java.util.List)>
<soot.Scene: soot.SootMethodRef makeMethodRef(soot.SootClass,java.lang.String,java.util.List,soot.Type,boolean)>
<soot.Scene: soot.jimple.toolkits.callgraph.CallGraph getCallGraph()>
<soot.Scene: soot.jimple.toolkits.callgraph.ReachableMethods getReachableMethods()>
<soot.Scene: soot.jimple.toolkits.pointer.SideEffectAnalysis getSideEffectAnalysis()>
<soot.Scene: soot.util.ArrayNumberer getFieldNumberer()>
<soot.Scene: soot.util.ArrayNumberer getLocalNumberer()>
<soot.Scene: soot.util.ArrayNumberer getMethodNumberer()>
<soot.Scene: soot.util.ArrayNumberer getTypeNumberer()>
<soot.Scene: soot.util.Chain getApplicationClasses()>
<soot.Scene: soot.util.Chain getClasses()>
<soot.Scene: soot.util.Chain getContainingChain(soot.SootClass)>
<soot.Scene: soot.util.Chain getLibraryClasses()>
<soot.Scene: soot.util.Chain getPhantomClasses()>
<soot.Scene: soot.util.StringNumberer getSubSigNumberer()>
<soot.Scene: void <init>(soot.Singletons$Global)>
<soot.Scene: void addBasicClass(java.lang.String)>
<soot.Scene: void addBasicClass(java.lang.String,int)>
<soot.Scene: void addClass(soot.SootClass)>
<soot.Scene: void addRefType(soot.RefType)>
<soot.Scene: void addSootBasicClasses()>
<soot.Scene: void loadDynamicClasses()>
<soot.Scene: void loadNecessaryClass(java.lang.String)>
<soot.Scene: void loadNecessaryClasses()>
<soot.Scene: void prepareClasses()>
<soot.Scene: void removeClass(soot.SootClass)>
<soot.Scene: void setActiveHierarchy(soot.Hierarchy)>
<soot.Scene: void setCallGraph(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.Scene: void setEntryPoints(java.util.List)>
<soot.Scene: void setFastHierarchy(soot.FastHierarchy)>
<soot.Scene: void setMainClass(soot.SootClass)>
<soot.Scene: void setMainClassFromOptions()>
<soot.Scene: void setPointsToAnalysis(soot.PointsToAnalysis)>
<soot.Scene: void setSideEffectAnalysis(soot.jimple.toolkits.pointer.SideEffectAnalysis)>
<soot.Scene: void setSootClassPath(java.lang.String)>
<soot.ScenePack: void <init>(java.lang.String)>
<soot.SootClass: boolean declaresField(java.lang.String)>
<soot.SootClass: boolean declaresField(java.lang.String,soot.Type)>
<soot.SootClass: boolean declaresFieldByName(java.lang.String)>
<soot.SootClass: boolean declaresMethod(java.lang.String)>
<soot.SootClass: boolean declaresMethod(java.lang.String,java.util.List)>
<soot.SootClass: boolean declaresMethod(java.lang.String,java.util.List,soot.Type)>
<soot.SootClass: boolean implementsInterface(java.lang.String)>
<soot.SootClass: boolean isApplicationClass()>
<soot.SootClass: boolean isLibraryClass()>
<soot.SootClass: boolean isPhantomClass()>
<soot.SootClass: java.lang.String getJavaPackageName()>
<soot.SootClass: java.lang.String getJavaStyleName()>
<soot.SootClass: java.lang.String getName()>
<soot.SootClass: java.lang.String getPackageName()>
<soot.SootClass: java.lang.String getShortJavaStyleName()>
<soot.SootClass: java.lang.String getShortName()>
<soot.SootClass: java.lang.String toString()>
<soot.SootClass: java.util.Iterator methodIterator()>
<soot.SootClass: java.util.List getMethods()>
<soot.SootClass: soot.RefType getType()>
<soot.SootClass: soot.SootClass getOuterClass()>
<soot.SootClass: soot.SootClass getSuperclass()>
<soot.SootClass: soot.SootField getField(java.lang.String)>
<soot.SootClass: soot.SootField getField(java.lang.String,soot.Type)>
<soot.SootClass: soot.SootField getFieldByName(java.lang.String)>
<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>
<soot.SootClass: soot.SootMethod getMethod(java.lang.String,java.util.List)>
<soot.SootClass: soot.SootMethod getMethod(java.lang.String,java.util.List,soot.Type)>
<soot.SootClass: soot.SootMethod getMethod(soot.util.NumberedString)>
<soot.SootClass: soot.SootMethod getMethodByName(java.lang.String)>
<soot.SootClass: soot.util.Chain getFields()>
<soot.SootClass: soot.util.Chain getInterfaces()>
<soot.SootClass: void <init>(java.lang.String)>
<soot.SootClass: void <init>(java.lang.String,int)>
<soot.SootClass: void addField(soot.SootField)>
<soot.SootClass: void addInterface(soot.SootClass)>
<soot.SootClass: void addMethod(soot.SootMethod)>
<soot.SootClass: void removeMethod(soot.SootMethod)>
<soot.SootClass: void setApplicationClass()>
<soot.SootClass: void setLibraryClass()>
<soot.SootClass: void setName(java.lang.String)>
<soot.SootClass: void setOuterClass(soot.SootClass)>
<soot.SootClass: void setPhantom(boolean)>
<soot.SootClass: void setPhantomClass()>
<soot.SootClass: void setSuperclass(soot.SootClass)>
<soot.SootField: java.lang.String getDeclaration()>
<soot.SootField: java.lang.String getName()>
<soot.SootField: java.lang.String getOriginalStyleDeclaration()>
<soot.SootField: java.lang.String getSignature()>
<soot.SootField: java.lang.String getSignature(soot.SootClass,java.lang.String,soot.Type)>
<soot.SootField: java.lang.String getSubSignature()>
<soot.SootField: soot.SootFieldRef makeRef()>
<soot.SootField: soot.Type getType()>
<soot.SootField: void <init>(java.lang.String,soot.Type,int)>
<soot.SootField: void setModifiers(int)>
<soot.SootMethod: boolean throwsException(soot.SootClass)>
<soot.SootMethod: java.lang.String getDavaDeclaration()>
<soot.SootMethod: java.lang.String getDeclaration()>
<soot.SootMethod: java.lang.String getName()>
<soot.SootMethod: java.lang.String getSignature()>
<soot.SootMethod: java.lang.String getSignature(soot.SootClass,java.lang.String,java.util.List,soot.Type)>
<soot.SootMethod: java.lang.String getSubSignature()>
<soot.SootMethod: java.lang.String getSubSignature(java.lang.String,java.util.List,soot.Type)>
<soot.SootMethod: java.lang.String getSubSignatureImpl(java.lang.String,java.util.List,soot.Type)>
<soot.SootMethod: java.util.List getExceptions()>
<soot.SootMethod: java.util.List getParameterTypes()>
<soot.SootMethod: soot.Body getActiveBody()>
<soot.SootMethod: soot.Body retrieveActiveBody()>
<soot.SootMethod: soot.MethodSource getSource()>
<soot.SootMethod: soot.SootClass getDeclaringClass()>
<soot.SootMethod: soot.SootMethod method()>
<soot.SootMethod: soot.SootMethodRef makeRef()>
<soot.SootMethod: soot.Type getParameterType(int)>
<soot.SootMethod: soot.Type getReturnType()>
<soot.SootMethod: soot.util.NumberedString getNumberedSubSignature()>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type)>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type,int)>
<soot.SootMethod: void <init>(java.lang.String,java.util.List,soot.Type,int,java.util.List)>
<soot.SootMethod: void addException(soot.SootClass)>
<soot.SootMethod: void addExceptionIfAbsent(soot.SootClass)>
<soot.SootMethod: void setActiveBody(soot.Body)>
<soot.SootMethod: void setDeclaringClass(soot.SootClass)>
<soot.SootMethod: void setModifiers(int)>
<soot.SootMethod: void setParameterTypes(java.util.List)>
<soot.SootMethod: void setSource(soot.MethodSource)>
<soot.Timer: java.lang.String toString()>
<soot.Timer: void <init>(java.lang.String)>
<soot.Timers: java.lang.String paddedLeftOf(java.lang.String,int)>
<soot.Transform: java.lang.String getPhaseName()>
<soot.Transform: void <init>(java.lang.String,soot.Transformer)>
<soot.Type: soot.ArrayType getArrayType()>
<soot.Type: soot.ArrayType makeArrayType()>
<soot.Type: void <init>()>
<soot.Type: void setArrayType(soot.ArrayType)>
<soot.TypeSwitch: java.lang.Object getResult()>
<soot.TypeSwitch: void caseAnySubType(soot.AnySubType)>
<soot.TypeSwitch: void caseArrayType(soot.ArrayType)>
<soot.TypeSwitch: void caseDoubleType(soot.DoubleType)>
<soot.TypeSwitch: void caseFloatType(soot.FloatType)>
<soot.TypeSwitch: void caseIntType(soot.IntType)>
<soot.TypeSwitch: void caseLongType(soot.LongType)>
<soot.TypeSwitch: void caseNullType(soot.NullType)>
<soot.TypeSwitch: void caseRefType(soot.RefType)>
<soot.TypeSwitch: void caseUnknownType(soot.UnknownType)>
<soot.TypeSwitch: void caseVoidType(soot.VoidType)>
<soot.TypeSwitch: void setResult(java.lang.Object)>
<soot.baf.Baf: soot.Type getDescriptorTypeOf(soot.Type)>
<soot.baf.InstBox: void <init>(soot.baf.Inst)>
<soot.baf.JasminClass$1: void caseLookupSwitchInst(soot.baf.LookupSwitchInst)>
<soot.baf.JasminClass$1: void caseTableSwitchInst(soot.baf.TableSwitchInst)>
<soot.baf.JasminClass: java.util.Map access$11100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$11900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$12900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$13800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$14800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$15800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$16900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$1700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$17900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$18800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$19800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$20800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$21900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22700(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$22900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$23800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$24800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$25800(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26000(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$26900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27300(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$27500(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$30100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$30900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31100(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31400(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$31600(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$3900(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$4200(soot.baf.JasminClass)>
<soot.baf.JasminClass: java.util.Map access$6700(soot.baf.JasminClass)>
<soot.baf.JasminClass: void calculateLogicalStackHeightCheck(soot.toolkits.graph.Block)>
<soot.baf.JasminClass: void calculateStackHeight(soot.toolkits.graph.Block)>
<soot.baf.JasminClass: void emitMethodBody(soot.SootMethod)>
<soot.baf.PlaceholderInst: java.lang.Object clone()>
<soot.baf.PlaceholderInst: soot.Unit getSource()>
<soot.baf.PlaceholderInst: void <init>(soot.Unit)>
<soot.baf.internal.AbstractBranchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.AbstractBranchInst: soot.Unit getTarget()>
<soot.baf.internal.AbstractBranchInst: void <init>(soot.UnitBox)>
<soot.baf.internal.AbstractInvokeInst: soot.SootMethod getMethod()>
<soot.baf.internal.AbstractInvokeInst: soot.SootMethodRef getMethodRef()>
<soot.baf.internal.AbstractOpTypeBranchInst: soot.Type getOpType()>
<soot.baf.internal.AbstractOpTypeBranchInst: void <init>(soot.Type,soot.UnitBox)>
<soot.baf.internal.AbstractOpTypeInst: soot.Type getOpType()>
<soot.baf.internal.AbstractOpTypeInst: void <init>(soot.Type)>
<soot.baf.internal.AbstractRefTypeInst: soot.RefType getBaseType()>
<soot.baf.internal.AbstractRefTypeInst: void <init>(soot.RefType)>
<soot.baf.internal.BAddInst: java.lang.Object clone()>
<soot.baf.internal.BAddInst: void <init>(soot.Type)>
<soot.baf.internal.BAndInst: java.lang.Object clone()>
<soot.baf.internal.BAndInst: void <init>(soot.Type)>
<soot.baf.internal.BArrayLengthInst: java.lang.Object clone()>
<soot.baf.internal.BArrayReadInst: java.lang.Object clone()>
<soot.baf.internal.BArrayReadInst: void <init>(soot.Type)>
<soot.baf.internal.BArrayWriteInst: java.lang.Object clone()>
<soot.baf.internal.BArrayWriteInst: void <init>(soot.Type)>
<soot.baf.internal.BCmpInst: java.lang.Object clone()>
<soot.baf.internal.BCmpInst: void <init>(soot.Type)>
<soot.baf.internal.BCmpgInst: java.lang.Object clone()>
<soot.baf.internal.BCmpgInst: void <init>(soot.Type)>
<soot.baf.internal.BCmplInst: java.lang.Object clone()>
<soot.baf.internal.BCmplInst: void <init>(soot.Type)>
<soot.baf.internal.BDivInst: java.lang.Object clone()>
<soot.baf.internal.BDivInst: void <init>(soot.Type)>
<soot.baf.internal.BDup1Inst: java.util.List getOpTypes()>
<soot.baf.internal.BDup1Inst: java.util.List getUnderTypes()>
<soot.baf.internal.BDup1Inst: soot.Type getOp1Type()>
<soot.baf.internal.BDup1Inst: void <init>(soot.Type)>
<soot.baf.internal.BEnterMonitorInst: java.lang.Object clone()>
<soot.baf.internal.BExitMonitorInst: java.lang.Object clone()>
<soot.baf.internal.BFieldGetInst: java.lang.Object clone()>
<soot.baf.internal.BFieldGetInst: soot.SootField getField()>
<soot.baf.internal.BFieldGetInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BFieldGetInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BFieldPutInst: java.lang.Object clone()>
<soot.baf.internal.BFieldPutInst: soot.SootField getField()>
<soot.baf.internal.BFieldPutInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BFieldPutInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BGotoInst: java.lang.Object clone()>
<soot.baf.internal.BIdentityInst: java.lang.Object clone()>
<soot.baf.internal.BIdentityInst: java.util.List getDefBoxes()>
<soot.baf.internal.BIdentityInst: java.util.List getUseBoxes()>
<soot.baf.internal.BIdentityInst: soot.Value getLeftOp()>
<soot.baf.internal.BIdentityInst: soot.Value getRightOp()>
<soot.baf.internal.BIdentityInst: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.baf.internal.BIfCmpEqInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpEqInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfCmpGeInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpGeInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfCmpGtInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpGtInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfCmpLeInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpLeInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfCmpLtInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpLtInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfCmpNeInst: java.lang.Object clone()>
<soot.baf.internal.BIfCmpNeInst: void <init>(soot.Type,soot.Unit)>
<soot.baf.internal.BIfEqInst: java.lang.Object clone()>
<soot.baf.internal.BIfGeInst: java.lang.Object clone()>
<soot.baf.internal.BIfGtInst: java.lang.Object clone()>
<soot.baf.internal.BIfLeInst: java.lang.Object clone()>
<soot.baf.internal.BIfLtInst: java.lang.Object clone()>
<soot.baf.internal.BIfNeInst: java.lang.Object clone()>
<soot.baf.internal.BIfNonNullInst: java.lang.Object clone()>
<soot.baf.internal.BIfNullInst: java.lang.Object clone()>
<soot.baf.internal.BIncInst: java.lang.Object clone()>
<soot.baf.internal.BIncInst: java.util.List getDefBoxes()>
<soot.baf.internal.BIncInst: java.util.List getUseBoxes()>
<soot.baf.internal.BIncInst: soot.Local getLocal()>
<soot.baf.internal.BIncInst: soot.jimple.Constant getConstant()>
<soot.baf.internal.BIncInst: void <init>(soot.Local,soot.jimple.Constant)>
<soot.baf.internal.BInstanceCastInst: java.lang.Object clone()>
<soot.baf.internal.BInstanceCastInst: soot.Type getCastType()>
<soot.baf.internal.BInstanceCastInst: void <init>(soot.Type)>
<soot.baf.internal.BInstanceOfInst: java.lang.Object clone()>
<soot.baf.internal.BInstanceOfInst: soot.Type getCheckType()>
<soot.baf.internal.BInstanceOfInst: void <init>(soot.Type)>
<soot.baf.internal.BInterfaceInvokeInst: java.lang.Object clone()>
<soot.baf.internal.BInterfaceInvokeInst: void <init>(soot.SootMethodRef,int)>
<soot.baf.internal.BLoadInst: java.lang.Object clone()>
<soot.baf.internal.BLoadInst: java.util.List getUseBoxes()>
<soot.baf.internal.BLoadInst: soot.Local getLocal()>
<soot.baf.internal.BLoadInst: void <init>(soot.Type,soot.Local)>
<soot.baf.internal.BLookupSwitchInst: java.lang.Object clone()>
<soot.baf.internal.BLookupSwitchInst: java.util.List getLookupValues()>
<soot.baf.internal.BLookupSwitchInst: java.util.List getTargets()>
<soot.baf.internal.BLookupSwitchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.BLookupSwitchInst: void <init>(soot.Unit,java.util.List,java.util.List)>
<soot.baf.internal.BMulInst: java.lang.Object clone()>
<soot.baf.internal.BMulInst: void <init>(soot.Type)>
<soot.baf.internal.BNegInst: java.lang.Object clone()>
<soot.baf.internal.BNegInst: void <init>(soot.Type)>
<soot.baf.internal.BNewArrayInst: java.lang.Object clone()>
<soot.baf.internal.BNewArrayInst: soot.Type getBaseType()>
<soot.baf.internal.BNewArrayInst: void <init>(soot.Type)>
<soot.baf.internal.BNewInst: java.lang.Object clone()>
<soot.baf.internal.BNewInst: void <init>(soot.RefType)>
<soot.baf.internal.BNewMultiArrayInst: java.lang.Object clone()>
<soot.baf.internal.BNewMultiArrayInst: soot.ArrayType getBaseType()>
<soot.baf.internal.BNewMultiArrayInst: void <init>(soot.ArrayType,int)>
<soot.baf.internal.BNopInst: java.lang.Object clone()>
<soot.baf.internal.BOrInst: java.lang.Object clone()>
<soot.baf.internal.BOrInst: void <init>(soot.Type)>
<soot.baf.internal.BPopInst: java.lang.Object clone()>
<soot.baf.internal.BPrimitiveCastInst: java.lang.Object clone()>
<soot.baf.internal.BPrimitiveCastInst: soot.Type getFromType()>
<soot.baf.internal.BPrimitiveCastInst: void <init>(soot.Type,soot.Type)>
<soot.baf.internal.BPushInst: java.lang.Object clone()>
<soot.baf.internal.BPushInst: soot.jimple.Constant getConstant()>
<soot.baf.internal.BPushInst: void <init>(soot.jimple.Constant)>
<soot.baf.internal.BRemInst: java.lang.Object clone()>
<soot.baf.internal.BRemInst: void <init>(soot.Type)>
<soot.baf.internal.BReturnInst: java.lang.Object clone()>
<soot.baf.internal.BReturnInst: void <init>(soot.Type)>
<soot.baf.internal.BReturnVoidInst: java.lang.Object clone()>
<soot.baf.internal.BShlInst: java.lang.Object clone()>
<soot.baf.internal.BShlInst: void <init>(soot.Type)>
<soot.baf.internal.BShrInst: java.lang.Object clone()>
<soot.baf.internal.BShrInst: void <init>(soot.Type)>
<soot.baf.internal.BSpecialInvokeInst: java.lang.Object clone()>
<soot.baf.internal.BSpecialInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BStaticGetInst: java.lang.Object clone()>
<soot.baf.internal.BStaticGetInst: soot.SootField getField()>
<soot.baf.internal.BStaticGetInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BStaticGetInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BStaticInvokeInst: java.lang.Object clone()>
<soot.baf.internal.BStaticInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BStaticPutInst: java.lang.Object clone()>
<soot.baf.internal.BStaticPutInst: soot.SootField getField()>
<soot.baf.internal.BStaticPutInst: soot.SootFieldRef getFieldRef()>
<soot.baf.internal.BStaticPutInst: void <init>(soot.SootFieldRef)>
<soot.baf.internal.BStoreInst: java.lang.Object clone()>
<soot.baf.internal.BStoreInst: java.util.List getDefBoxes()>
<soot.baf.internal.BStoreInst: soot.Local getLocal()>
<soot.baf.internal.BStoreInst: void <init>(soot.Type,soot.Local)>
<soot.baf.internal.BSubInst: java.lang.Object clone()>
<soot.baf.internal.BSubInst: void <init>(soot.Type)>
<soot.baf.internal.BTableSwitchInst: java.lang.Object clone()>
<soot.baf.internal.BTableSwitchInst: java.util.List getTargets()>
<soot.baf.internal.BTableSwitchInst: java.util.List getUnitBoxes()>
<soot.baf.internal.BTableSwitchInst: void <init>(soot.Unit,int,int,java.util.List)>
<soot.baf.internal.BThrowInst: java.lang.Object clone()>
<soot.baf.internal.BTrap: java.lang.Object clone()>
<soot.baf.internal.BTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.baf.internal.BUshrInst: java.lang.Object clone()>
<soot.baf.internal.BUshrInst: void <init>(soot.Type)>
<soot.baf.internal.BVirtualInvokeInst: java.lang.Object clone()>
<soot.baf.internal.BVirtualInvokeInst: void <init>(soot.SootMethodRef)>
<soot.baf.internal.BXorInst: java.lang.Object clone()>
<soot.baf.internal.BXorInst: void <init>(soot.Type)>
<soot.baf.internal.BafLocal: java.lang.Object clone()>
<soot.baf.internal.BafLocal: java.lang.String getName()>
<soot.baf.internal.BafLocal: java.lang.String toString()>
<soot.baf.internal.BafLocal: soot.Type getType()>
<soot.baf.internal.BafLocal: void <init>(java.lang.String,soot.Type)>
<soot.baf.internal.BafLocal: void setName(java.lang.String)>
<soot.baf.internal.BafLocal: void setType(soot.Type)>
<soot.baf.internal.BafLocalBox: void <init>(soot.Value)>
<soot.baf.toolkits.base.LoadStoreOptimizer: java.util.Map access$200(soot.baf.toolkits.base.LoadStoreOptimizer)>
<soot.baf.toolkits.base.LoadStoreOptimizer: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.coffi.BBQ: soot.coffi.BasicBlock pull()>
<soot.coffi.BBQ: void <init>()>
<soot.coffi.BBQ: void push(soot.coffi.BasicBlock)>
<soot.coffi.BasicBlock: void <init>(soot.coffi.Instruction,soot.coffi.Instruction)>
<soot.coffi.ByteCode: soot.coffi.Instruction disassemble_bytecode(byte[],int)>
<soot.coffi.ByteCode: soot.coffi.Instruction locateInst(int)>
<soot.coffi.ByteCode: soot.coffi.Instruction locateInstr(int,int,int)>
<soot.coffi.ByteCode: void build(soot.coffi.Instruction)>
<soot.coffi.CFG: boolean eliminateJsrRets()>
<soot.coffi.CFG: boolean findOutmostJsrs(soot.coffi.Instruction,soot.coffi.Instruction)>
<soot.coffi.CFG: boolean jimplify(soot.coffi.cp_info[],int,soot.jimple.JimpleBody)>
<soot.coffi.CFG: java.lang.String getClassName(soot.coffi.cp_info[],int)>
<soot.coffi.CFG: java.util.HashMap inliningJsrTargets()>
<soot.coffi.CFG: soot.Type byteCodeTypeOf(soot.Type)>
<soot.coffi.CFG: soot.Type jimpleReturnTypeOfInterfaceMethodRef(soot.Scene,soot.coffi.cp_info[],int)>
<soot.coffi.CFG: soot.Type jimpleReturnTypeOfMethodRef(soot.Scene,soot.coffi.cp_info[],int)>
<soot.coffi.CFG: soot.Type jimpleTypeOfFieldInFieldRef(soot.Scene,soot.coffi.cp_info[],int)>
<soot.coffi.CFG: soot.coffi.Instruction buildBasicBlock(soot.coffi.Instruction)>
<soot.coffi.CFG: soot.coffi.Instruction findMatchingRet(soot.coffi.Instruction,soot.coffi.Instruction,java.util.HashSet)>
<soot.coffi.CFG: soot.coffi.Instruction makeCopyOf(soot.coffi.Instruction,soot.coffi.Instruction,soot.coffi.Instruction)>
<soot.coffi.CFG: soot.coffi.OutFlow processCPEntry(soot.coffi.cp_info[],int,soot.coffi.TypeStack,soot.SootMethod)>
<soot.coffi.CFG: soot.coffi.OutFlow processFlow(soot.coffi.Instruction,soot.coffi.TypeStack,soot.coffi.cp_info[])>
<soot.coffi.CFG: soot.coffi.TypeStack popSafe(soot.coffi.TypeStack,soot.Type)>
<soot.coffi.CFG: soot.coffi.TypeStack popSafeRefType(soot.coffi.TypeStack)>
<soot.coffi.CFG: soot.coffi.TypeStack smartPush(soot.coffi.TypeStack,soot.Type)>
<soot.coffi.CFG: void <init>(soot.coffi.method_info)>
<soot.coffi.CFG: void adjustBranchTargets()>
<soot.coffi.CFG: void adjustExceptionTable()>
<soot.coffi.CFG: void adjustLineNumberTable()>
<soot.coffi.CFG: void buildBBCFG()>
<soot.coffi.CFG: void buildInsnCFGfromBBCFG()>
<soot.coffi.CFG: void complexity()>
<soot.coffi.CFG: void generateJimple(soot.coffi.Instruction,soot.coffi.TypeStack,soot.coffi.TypeStack,soot.coffi.cp_info[],java.util.List,soot.coffi.BasicBlock)>
<soot.coffi.CFG: void jimpleTargetFixup()>
<soot.coffi.CFG: void jimplify(soot.coffi.cp_info[],int)>
<soot.coffi.CFG: void processTargetFixup(soot.coffi.BBQ)>
<soot.coffi.CONSTANT_Utf8_collector: soot.coffi.CONSTANT_Utf8_info add(soot.coffi.CONSTANT_Utf8_info)>
<soot.coffi.CONSTANT_Utf8_info: java.lang.String convert()>
<soot.coffi.CONSTANT_Utf8_info: java.lang.String toString(soot.coffi.cp_info[])>
<soot.coffi.CONSTANT_Utf8_info: void fixConversion(java.lang.String)>
<soot.coffi.ClassFile: boolean readAttributes(java.io.DataInputStream,int,soot.coffi.attribute_info[])>
<soot.coffi.ClassFile: boolean readClass(java.io.DataInputStream)>
<soot.coffi.ClassFile: boolean readFields(java.io.DataInputStream)>
<soot.coffi.ClassFile: boolean readMethods(java.io.DataInputStream)>
<soot.coffi.ClassFile: java.lang.String parseDesc(java.lang.String,java.lang.String)>
<soot.coffi.ClassFile: java.lang.String parseMethodDesc_params(java.lang.String)>
<soot.coffi.ClassFile: soot.coffi.Instruction parseMethod(soot.coffi.method_info)>
<soot.coffi.CoffiMethodSource: soot.Body getBody(soot.SootMethod,java.lang.String)>
<soot.coffi.CoffiMethodSource: void <init>(soot.coffi.ClassFile,soot.coffi.method_info)>
<soot.coffi.FutureStmt: java.util.List getDefBoxes()>
<soot.coffi.FutureStmt: java.util.List getUnitBoxes()>
<soot.coffi.FutureStmt: java.util.List getUseBoxes()>
<soot.coffi.FutureStmt: void <init>()>
<soot.coffi.Instruction: java.lang.Object clone()>
<soot.coffi.Instruction_Goto: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Goto_w: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Jsr: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Jsr_w: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Lookupswitch: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Lookupswitch: void offsetToPointer(soot.coffi.ByteCode)>
<soot.coffi.Instruction_Tableswitch: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_Tableswitch: void offsetToPointer(soot.coffi.ByteCode)>
<soot.coffi.Instruction_branch: soot.coffi.Instruction[] branchpoints(soot.coffi.Instruction)>
<soot.coffi.Instruction_branch: void offsetToPointer(soot.coffi.ByteCode)>
<soot.coffi.OutFlow: void <init>(soot.coffi.TypeStack)>
<soot.coffi.TypeStack: soot.Type get(int)>
<soot.coffi.TypeStack: soot.Type top()>
<soot.coffi.TypeStack: soot.coffi.TypeStack merge(soot.coffi.TypeStack)>
<soot.coffi.TypeStack: soot.coffi.TypeStack pop()>
<soot.coffi.TypeStack: soot.coffi.TypeStack push(soot.Type)>
<soot.coffi.Util: java.util.ArrayList createElementTags(int,soot.coffi.ClassFile,soot.coffi.element_value[])>
<soot.coffi.Util: soot.Type jimpleReturnTypeOfMethodDescriptor(java.lang.String)>
<soot.coffi.Util: soot.Type jimpleTypeOfFieldDescriptor(java.lang.String)>
<soot.coffi.Util: soot.Type[] jimpleTypesOfFieldOrMethodDescriptor(java.lang.String)>
<soot.coffi.Util: void <init>(soot.Singletons$Global)>
<soot.coffi.Util: void addAnnotationVisibilityAttribute(soot.tagkit.Host,soot.coffi.attribute_info,soot.coffi.ClassFile,java.util.List)>
<soot.coffi.Util: void addAnnotationVisibilityParameterAttribute(soot.tagkit.Host,soot.coffi.attribute_info,soot.coffi.ClassFile,java.util.List)>
<soot.coffi.Util: void addAnnotations(int,soot.coffi.annotation[],soot.coffi.ClassFile,soot.tagkit.VisibilityAnnotationTag,java.util.List)>
<soot.coffi.Util: void resolveFromClassFile(soot.SootClass,java.io.InputStream,java.util.List)>
<soot.dava.DecompilationException: void <init>(java.lang.String)>
<soot.dava.MethodCallFinder: boolean replaceSubBody(soot.jimple.InvokeStmt,java.util.List,soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder)>
<soot.dava.MethodCallFinder: java.util.List createChangedBodyPart(soot.jimple.InvokeStmt,java.util.List,soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder)>
<soot.dava.MethodCallFinder: java.util.List createNewSubBody(java.util.List,java.util.List,java.lang.Object)>
<soot.dava.MethodCallFinder: java.util.List getSubBodyFromSingleSubBodyNode(soot.dava.internal.AST.ASTNode)>
<soot.dava.MethodCallFinder: void inInvokeStmt(soot.jimple.InvokeStmt)>
<soot.dava.internal.AST.ASTAggregatedCondition: soot.dava.internal.AST.ASTCondition getLeftOp()>
<soot.dava.internal.AST.ASTAggregatedCondition: soot.dava.internal.AST.ASTCondition getRightOp()>
<soot.dava.internal.AST.ASTAggregatedCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAggregatedCondition: void setLeftOp(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAggregatedCondition: void setRightOp(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTAndCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTBinaryCondition: java.lang.String toString()>
<soot.dava.internal.AST.ASTBinaryCondition: soot.jimple.ConditionExpr getConditionExpr()>
<soot.dava.internal.AST.ASTBinaryCondition: void <init>(soot.jimple.ConditionExpr)>
<soot.dava.internal.AST.ASTControlFlowNode: soot.dava.internal.AST.ASTCondition get_Condition()>
<soot.dava.internal.AST.ASTControlFlowNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTControlFlowNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr)>
<soot.dava.internal.AST.ASTControlFlowNode: void set_Condition(soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTDoWhileNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTDoWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTDoWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTDoWhileNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTForLoopNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTForLoopNode: java.util.List getInit()>
<soot.dava.internal.AST.ASTForLoopNode: java.util.List getUpdate()>
<soot.dava.internal.AST.ASTForLoopNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTForLoopNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTIfElseNode: java.util.List getElseBody()>
<soot.dava.internal.AST.ASTIfElseNode: java.util.List getIfBody()>
<soot.dava.internal.AST.ASTIfElseNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void replace(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void replaceBody(java.util.List,java.util.List)>
<soot.dava.internal.AST.ASTIfElseNode: void replaceElseBody(java.util.List)>
<soot.dava.internal.AST.ASTIfNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTIfNode: java.util.List getIfBody()>
<soot.dava.internal.AST.ASTIfNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void replace(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTIfNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTLabeledBlockNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTLabeledBlockNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List)>
<soot.dava.internal.AST.ASTLabeledBlockNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTLabeledNode: soot.dava.internal.SET.SETNodeLabel get_Label()>
<soot.dava.internal.AST.ASTLabeledNode: void <init>(soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.AST.ASTLabeledNode: void set_Label(soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.AST.ASTMethodNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTMethodNode: java.util.List getDeclaredLocals()>
<soot.dava.internal.AST.ASTMethodNode: soot.dava.DavaBody getDavaBody()>
<soot.dava.internal.AST.ASTMethodNode: soot.dava.internal.AST.ASTStatementSequenceNode getDeclarations()>
<soot.dava.internal.AST.ASTMethodNode: void <init>(java.util.List)>
<soot.dava.internal.AST.ASTMethodNode: void addToDontPrintLocalsList(soot.Local)>
<soot.dava.internal.AST.ASTMethodNode: void printDeclarationsFollowedByBody(soot.UnitPrinter,java.util.List)>
<soot.dava.internal.AST.ASTMethodNode: void removeDeclaredLocal(soot.Local)>
<soot.dava.internal.AST.ASTMethodNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTMethodNode: void setDavaBody(soot.dava.DavaBody)>
<soot.dava.internal.AST.ASTMethodNode: void setDeclarations(soot.dava.internal.AST.ASTStatementSequenceNode)>
<soot.dava.internal.AST.ASTMethodNode: void storeLocals(soot.Body)>
<soot.dava.internal.AST.ASTMethodNode: void toString(soot.UnitPrinter)>
<soot.dava.internal.AST.ASTNode: java.util.List get_SubBodies()>
<soot.dava.internal.AST.ASTNode: void <init>()>
<soot.dava.internal.AST.ASTOrCondition: void <init>(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTCondition)>
<soot.dava.internal.AST.ASTStatementSequenceNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTStatementSequenceNode: java.util.List getStatements()>
<soot.dava.internal.AST.ASTStatementSequenceNode: void <init>(java.util.List)>
<soot.dava.internal.AST.ASTStatementSequenceNode: void apply(soot.dava.toolkits.base.AST.analysis.Analysis)>
<soot.dava.internal.AST.ASTStatementSequenceNode: void setStatements(java.util.List)>
<soot.dava.internal.AST.ASTSwitchNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTSwitchNode: java.lang.String toString()>
<soot.dava.internal.AST.ASTSwitchNode: java.util.List getIndexList()>
<soot.dava.internal.AST.ASTSwitchNode: java.util.Map getIndex2BodyList()>
<soot.dava.internal.AST.ASTSwitchNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.Value,java.util.List,java.util.Map)>
<soot.dava.internal.AST.ASTSwitchNode: void replaceIndex2BodyList(java.util.Map)>
<soot.dava.internal.AST.ASTSwitchNode: void toString(soot.UnitPrinter)>
<soot.dava.internal.AST.ASTSynchronizedBlockNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTSynchronizedBlockNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,soot.Value)>
<soot.dava.internal.AST.ASTSynchronizedBlockNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTTryNode$container: void <init>(soot.dava.internal.AST.ASTTryNode,java.lang.Object)>
<soot.dava.internal.AST.ASTTryNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTTryNode: java.lang.String toString()>
<soot.dava.internal.AST.ASTTryNode: java.util.List get_CatchList()>
<soot.dava.internal.AST.ASTTryNode: java.util.List get_TryBody()>
<soot.dava.internal.AST.ASTTryNode: java.util.Map get_ExceptionMap()>
<soot.dava.internal.AST.ASTTryNode: java.util.Map get_ParamMap()>
<soot.dava.internal.AST.ASTTryNode: soot.dava.internal.AST.ASTTryNode$container get_TryBodyContainer()>
<soot.dava.internal.AST.ASTTryNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List,java.util.List,java.util.Map,java.util.Map)>
<soot.dava.internal.AST.ASTTryNode: void replaceTryBody(java.util.List)>
<soot.dava.internal.AST.ASTTryNode: void toString(soot.UnitPrinter)>
<soot.dava.internal.AST.ASTUnaryCondition: java.lang.String toString()>
<soot.dava.internal.AST.ASTUnaryCondition: soot.Value getValue()>
<soot.dava.internal.AST.ASTUnaryCondition: void <init>(soot.Value)>
<soot.dava.internal.AST.ASTUnaryCondition: void setValue(soot.Value)>
<soot.dava.internal.AST.ASTUnconditionalLoopNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTUnconditionalLoopNode: void <init>(soot.dava.internal.SET.SETNodeLabel,java.util.List)>
<soot.dava.internal.AST.ASTUnconditionalLoopNode: void replaceBody(java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: java.lang.Object clone()>
<soot.dava.internal.AST.ASTWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.dava.internal.AST.ASTCondition,java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: void <init>(soot.dava.internal.SET.SETNodeLabel,soot.jimple.ConditionExpr,java.util.List)>
<soot.dava.internal.AST.ASTWhileNode: void replaceBody(java.util.List)>
<soot.dava.internal.SET.SETBasicBlock: int get_Priority()>
<soot.dava.internal.SET.SETBasicBlock: soot.dava.internal.SET.SETNode get_EntryNode()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Body()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Predecessors()>
<soot.dava.internal.SET.SETBasicBlock: soot.util.IterableSet get_Successors()>
<soot.dava.internal.SET.SETBasicBlock: void <init>()>
<soot.dava.internal.SET.SETBasicBlock: void add(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETControlFlowNode: boolean resolve(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETControlFlowNode: soot.dava.internal.asg.AugmentedStmt get_CharacterizingStmt()>
<soot.dava.internal.SET.SETControlFlowNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETCycleNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETDagNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETDagNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETDoWhileNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETDoWhileNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETDoWhileNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETDoWhileNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.SET.SETIfElseNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETIfElseNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETIfElseNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet,soot.util.IterableSet,soot.util.IterableSet)>
<soot.dava.internal.SET.SETLabeledBlockNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETLabeledBlockNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETLabeledBlockNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETLabeledBlockNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean add_Child(soot.dava.internal.SET.SETNode,soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean contains(java.lang.Object)>
<soot.dava.internal.SET.SETNode: boolean insert_ChildBefore(soot.dava.internal.SET.SETNode,soot.dava.internal.SET.SETNode,soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: boolean nest(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETNode: boolean remove_Child(soot.dava.internal.SET.SETNode,soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: java.util.List emit_ASTBody(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: java.util.List get_SubBodies()>
<soot.dava.internal.SET.SETNode: java.util.Map get_Body2ChildChain()>
<soot.dava.internal.SET.SETNode: soot.dava.internal.SET.SETNode get_Parent()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Body()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Predecessors()>
<soot.dava.internal.SET.SETNode: soot.util.IterableSet get_Successors()>
<soot.dava.internal.SET.SETNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: void add_SubBody(soot.util.IterableSet)>
<soot.dava.internal.SET.SETNode: void find_AbruptEdges(soot.dava.toolkits.base.finders.AbruptEdgeFinder)>
<soot.dava.internal.SET.SETNode: void find_LabeledBlocks(soot.dava.toolkits.base.finders.LabeledBlockFinder)>
<soot.dava.internal.SET.SETNode: void find_SmallestSETNode(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.SET.SETNode: void find_StatementSequences(soot.dava.toolkits.base.finders.SequenceFinder,soot.dava.DavaBody)>
<soot.dava.internal.SET.SETNode: void remove_AugmentedStmt(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.SET.SETNodeLabel: java.lang.String toString()>
<soot.dava.internal.SET.SETNodeLabel: void set_Name(java.lang.String)>
<soot.dava.internal.SET.SETStatementSequenceNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETStatementSequenceNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETStatementSequenceNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETStatementSequenceNode: void <init>(soot.util.IterableSet,soot.dava.DavaBody)>
<soot.dava.internal.SET.SETStatementSequenceNode: void insert_AbruptStmt(soot.dava.internal.javaRep.DAbruptStmt)>
<soot.dava.internal.SET.SETSwitchNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETSwitchNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETSwitchNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETSwitchNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.Value,soot.util.IterableSet,java.util.List,soot.util.IterableSet)>
<soot.dava.internal.SET.SETSynchronizedBlockNode: boolean resolve(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETSynchronizedBlockNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETSynchronizedBlockNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETSynchronizedBlockNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETSynchronizedBlockNode: void <init>(soot.dava.toolkits.base.finders.ExceptionNode,soot.Value)>
<soot.dava.internal.SET.SETTopNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETTopNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETTopNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETTryNode: boolean resolve(soot.dava.internal.SET.SETNode)>
<soot.dava.internal.SET.SETTryNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETTryNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETTryNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETTryNode: void <init>(soot.util.IterableSet,soot.dava.toolkits.base.finders.ExceptionNode,soot.dava.internal.asg.AugmentedStmtGraph,soot.dava.DavaBody)>
<soot.dava.internal.SET.SETUnconditionalWhileNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETUnconditionalWhileNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETUnconditionalWhileNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETUnconditionalWhileNode: void <init>(soot.util.IterableSet)>
<soot.dava.internal.SET.SETWhileNode: soot.dava.internal.AST.ASTNode emit_AST()>
<soot.dava.internal.SET.SETWhileNode: soot.dava.internal.asg.AugmentedStmt get_EntryStmt()>
<soot.dava.internal.SET.SETWhileNode: soot.util.IterableSet get_NaturalExits()>
<soot.dava.internal.SET.SETWhileNode: void <init>(soot.dava.internal.asg.AugmentedStmt,soot.util.IterableSet)>
<soot.dava.internal.asg.AugmentedStmt: boolean add_BPred(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: boolean add_BSucc(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: boolean add_CPred(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: boolean add_CSucc(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: boolean remove_CPred(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: boolean remove_CSucc(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmt: java.lang.Object clone()>
<soot.dava.internal.asg.AugmentedStmt: soot.jimple.Stmt get_Stmt()>
<soot.dava.internal.asg.AugmentedStmt: soot.util.IterableSet get_Dominators()>
<soot.dava.internal.asg.AugmentedStmt: soot.util.IterableSet get_Reachers()>
<soot.dava.internal.asg.AugmentedStmt: void <init>(soot.jimple.Stmt)>
<soot.dava.internal.asg.AugmentedStmt: void reset_PredsSuccs()>
<soot.dava.internal.asg.AugmentedStmt: void set_Stmt(soot.jimple.Stmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: boolean remove_AugmentedStmt(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: java.lang.Object clone()>
<soot.dava.internal.asg.AugmentedStmtGraph: java.util.Iterator iterator()>
<soot.dava.internal.asg.AugmentedStmtGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.dava.internal.asg.AugmentedStmtGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.dava.internal.asg.AugmentedStmtGraph: soot.dava.internal.asg.AugmentedStmt get_AugStmt(soot.jimple.Stmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: soot.dava.internal.asg.AugmentedStmt get_CloneOf(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: soot.util.IterableSet clone_Body(soot.util.IterableSet)>
<soot.dava.internal.asg.AugmentedStmtGraph: soot.util.IterableSet get_ChainView()>
<soot.dava.internal.asg.AugmentedStmtGraph: void <init>()>
<soot.dava.internal.asg.AugmentedStmtGraph: void <init>(soot.dava.internal.asg.AugmentedStmtGraph)>
<soot.dava.internal.asg.AugmentedStmtGraph: void <init>(soot.toolkits.graph.BriefUnitGraph,soot.toolkits.graph.TrapUnitGraph)>
<soot.dava.internal.asg.AugmentedStmtGraph: void add_AugmentedStmt(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: void add_StmtBinding(soot.jimple.Stmt,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: void calculate_Reachability(java.util.Collection,java.util.HashSet,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: void calculate_Reachability(soot.dava.internal.asg.AugmentedStmt,java.util.HashSet,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: void calculate_Reachability(soot.dava.internal.asg.AugmentedStmt,soot.dava.internal.asg.AugmentedStmt,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.internal.asg.AugmentedStmtGraph: void check_List(java.util.List,java.util.List)>
<soot.dava.internal.asg.AugmentedStmtGraph: void find_Dominators()>
<soot.dava.internal.asg.AugmentedStmtGraph: void mirror_PredsSuccs(soot.dava.internal.asg.AugmentedStmt,java.util.List,java.util.List,java.util.Map)>
<soot.dava.internal.asg.AugmentedStmtGraph: void mirror_PredsSuccs(soot.dava.internal.asg.AugmentedStmt,soot.toolkits.graph.UnitGraph)>
<soot.dava.internal.javaRep.DAbruptStmt: java.lang.Object clone()>
<soot.dava.internal.javaRep.DAbruptStmt: soot.dava.internal.SET.SETNodeLabel getLabel()>
<soot.dava.internal.javaRep.DAbruptStmt: void <init>(java.lang.String,soot.dava.internal.SET.SETNodeLabel)>
<soot.dava.internal.javaRep.DArrayInitExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DArrayInitExpr: soot.Type getType()>
<soot.dava.internal.javaRep.DArrayInitExpr: void <init>(soot.ValueBox[],soot.Type)>
<soot.dava.internal.javaRep.DArrayInitValueBox: void <init>(soot.Value)>
<soot.dava.internal.javaRep.DAssignStmt: java.lang.Object clone()>
<soot.dava.internal.javaRep.DAssignStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.dava.internal.javaRep.DCmpExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DCmpExpr: soot.Type getType()>
<soot.dava.internal.javaRep.DCmpgExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DCmpgExpr: soot.Type getType()>
<soot.dava.internal.javaRep.DCmplExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DCmplExpr: soot.Type getType()>
<soot.dava.internal.javaRep.DDecrementStmt: java.lang.Object clone()>
<soot.dava.internal.javaRep.DIncrementStmt: java.lang.Object clone()>
<soot.dava.internal.javaRep.DInstanceFieldRef: java.lang.Object clone()>
<soot.dava.internal.javaRep.DInstanceFieldRef: java.lang.String toString()>
<soot.dava.internal.javaRep.DInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef,java.util.HashSet)>
<soot.dava.internal.javaRep.DInstanceFieldRef: void toString(soot.UnitPrinter)>
<soot.dava.internal.javaRep.DInterfaceInvokeExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DInterfaceInvokeExpr: java.lang.String toString()>
<soot.dava.internal.javaRep.DInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DLengthExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DNegExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DNewArrayExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.dava.internal.javaRep.DNewInvokeExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DNewInvokeExpr: void <init>(soot.RefType,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DNewMultiArrayExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.dava.internal.javaRep.DNotExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DShortcutAssignStmt: void <init>(soot.dava.internal.javaRep.DAssignStmt,soot.Type)>
<soot.dava.internal.javaRep.DShortcutIf: java.lang.Object clone()>
<soot.dava.internal.javaRep.DShortcutIf: java.util.List getUseBoxes()>
<soot.dava.internal.javaRep.DShortcutIf: void <init>(soot.ValueBox,soot.ValueBox,soot.ValueBox)>
<soot.dava.internal.javaRep.DSpecialInvokeExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DSpecialInvokeExpr: java.lang.String toString()>
<soot.dava.internal.javaRep.DSpecialInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DStaticFieldRef: java.lang.Object clone()>
<soot.dava.internal.javaRep.DStaticFieldRef: void <init>(soot.SootFieldRef,boolean)>
<soot.dava.internal.javaRep.DStaticFieldRef: void <init>(soot.SootFieldRef,java.lang.String)>
<soot.dava.internal.javaRep.DStaticInvokeExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.dava.internal.javaRep.DThisRef: java.lang.Object clone()>
<soot.dava.internal.javaRep.DThisRef: void <init>(soot.RefType)>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: java.lang.Object clone()>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: java.util.List getDeclarations()>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: soot.Type getType()>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: void <init>(soot.Type,soot.dava.DavaBody)>
<soot.dava.internal.javaRep.DVariableDeclarationStmt: void addLocal(soot.Local)>
<soot.dava.internal.javaRep.DVirtualInvokeExpr: java.lang.Object clone()>
<soot.dava.internal.javaRep.DVirtualInvokeExpr: java.lang.String toString()>
<soot.dava.internal.javaRep.DVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List,java.util.HashSet)>
<soot.dava.toolkits.base.AST.TryContentsFinder: boolean catches_Exception(soot.util.IterableSet,soot.SootClass)>
<soot.dava.toolkits.base.AST.TryContentsFinder: soot.util.IterableSet get_ExceptionSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.TryContentsFinder: soot.util.IterableSet remove_CurExceptionSet()>
<soot.dava.toolkits.base.AST.TryContentsFinder: void <init>(soot.Singletons$Global)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void add_ExceptionSet(java.lang.Object,soot.util.IterableSet)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void add_ThrownType(soot.Type)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void analyseASTNode(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void analyseInvokeExpr(soot.jimple.InvokeExpr)>
<soot.dava.toolkits.base.AST.TryContentsFinder: void set_CurExceptionSet(soot.util.IterableSet)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTIfNode(soot.dava.internal.AST.ASTIfNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTStatementSequenceNode(soot.dava.internal.AST.ASTStatementSequenceNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTTryNode(soot.dava.internal.AST.ASTTryNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseDVariableDeclarationStmt(soot.dava.internal.javaRep.DVariableDeclarationStmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseDefinitionStmt(soot.jimple.DefinitionStmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseInvokeStmt(soot.jimple.InvokeStmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseReturnStmt(soot.jimple.ReturnStmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseStmt(soot.jimple.Stmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void caseThrowStmt(soot.jimple.ThrowStmt)>
<soot.dava.toolkits.base.AST.analysis.DepthFirstAdapter: void normalRetrieving(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: java.lang.Object contains(java.lang.String,java.lang.String)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: soot.toolkits.scalar.FlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: void addIfNotPresent(soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet: void intersection(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: java.lang.Object clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: java.lang.Object getValue()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: java.lang.String getSootClassName()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable getVariable()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void <init>(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable,boolean)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void <init>(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPTuple: void setValue(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: soot.Local getLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: soot.SootField getSootField()>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: void <init>(soot.Local)>
<soot.dava.toolkits.base.AST.structuredAnalysis.CPVariable: void <init>(soot.SootField)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: boolean compareHashMaps(java.util.HashMap,java.util.HashMap)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: boolean compareLists(java.lang.Object,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: boolean contains(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: boolean equals(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: boolean internalDataMatchesTo(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.lang.Object emptySet()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.lang.String toString()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getBreakList()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getContinueList()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getImplicitBreaks()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.HashMap getImplicitContinues()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List addIfNotDuplicate(java.util.List,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List copyDavaFlowSetList(java.util.List,java.util.List)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List getBreakSet(java.lang.String)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List getContinueSet(java.lang.String)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List getImplicitlyBrokenSets(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List getImplicitlyContinuedSets(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: java.util.List toList()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: soot.toolkits.scalar.FlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void <init>()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void add(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void addToBreakList(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void addToContinueList(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void addToImplicitBreaks(soot.dava.internal.javaRep.DAbruptStmt,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void addToImplicitContinues(soot.dava.internal.javaRep.DAbruptStmt,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void copy(soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void copyInternalDataFrom(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void difference(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void doubleCapacity()>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void intersection(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void remove(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet: void union(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: boolean isMayInitialized(soot.SootField)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object cloneFlowSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object newInitialFlow()>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: java.util.List getDefs(soot.SootField)>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet emptyFlowSet()>
<soot.dava.toolkits.base.AST.structuredAnalysis.MustMayInitialize: void <init>(java.lang.Object,int)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: soot.Local getLeftLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: soot.Local getRightLocal()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies$LocalPair: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies,soot.Local,soot.Local)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object cloneFlowSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object newInitialFlow()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet emptyFlowSet()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet getReachingCopies(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: void <init>(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingCopies: void gen(soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet,soot.Local,soot.Local)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object cloneFlowSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object newInitialFlow()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processSwitchKey(soot.Value,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: java.util.List getReachingDefs(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet emptyFlowSet()>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: void <init>(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.ReachingDefs: void gen(soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet,soot.jimple.DefinitionStmt)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object getAfterSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object getBeforeSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object getMergedBreakList(java.lang.String,java.lang.Object,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object handleBreak(java.lang.String,java.lang.Object,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object handleContinue(java.lang.String,java.lang.Object,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object merge(java.lang.Object,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object mergeExplicitAndImplicit(java.lang.String,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet,java.util.List,java.util.List)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object process(java.lang.Object,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTIfNode(soot.dava.internal.AST.ASTIfNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTMethodNode(soot.dava.internal.AST.ASTMethodNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTNode(soot.dava.internal.AST.ASTNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTStatementSequenceNode(soot.dava.internal.AST.ASTStatementSequenceNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTTryNode(soot.dava.internal.AST.ASTTryNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processASTWhileNode(soot.dava.internal.AST.ASTWhileNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processAbruptStatements(soot.jimple.Stmt,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processCondition(soot.dava.internal.AST.ASTCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: java.lang.Object processSingleSubBodyNode(soot.dava.internal.AST.ASTNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.StructuredAnalysis: void <init>()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: soot.toolkits.scalar.FlowSet clone()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: void <init>(soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder$UnreachableCodeFlowSet: void intersection(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: boolean isConstructReachable(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object cloneFlowSet(java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object handleBreak(java.lang.String,java.lang.Object,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object ifNotReachableReturnInputElseProcessBodyAndReturnTrue(soot.dava.internal.AST.ASTNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object newInitialFlow()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTIfNode(soot.dava.internal.AST.ASTIfNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTStatementSequenceNode(soot.dava.internal.AST.ASTStatementSequenceNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTTryNode(soot.dava.internal.AST.ASTTryNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processASTWhileNode(soot.dava.internal.AST.ASTWhileNode,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processAbruptStatements(soot.jimple.Stmt,soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processStatement(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processSynchronizedLocal(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: java.lang.Object processUnaryBinaryCondition(soot.dava.internal.AST.ASTUnaryBinaryCondition,java.lang.Object)>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: soot.dava.toolkits.base.AST.structuredAnalysis.DavaFlowSet emptyFlowSet()>
<soot.dava.toolkits.base.AST.structuredAnalysis.UnreachableCodeFinder: void <init>(java.lang.Object)>
<soot.dava.toolkits.base.AST.transformations.CPApplication: soot.dava.internal.AST.ASTCondition changedCondition(soot.dava.internal.AST.ASTCondition,soot.dava.toolkits.base.AST.structuredAnalysis.CPFlowSet)>
<soot.dava.toolkits.base.AST.transformations.SimplifyConditions: soot.dava.internal.AST.ASTCondition applyDeMorgans(soot.dava.internal.AST.ASTAggregatedCondition)>
<soot.dava.toolkits.base.AST.transformations.SimplifyConditions: soot.dava.internal.AST.ASTCondition simplifyIfAtleastOneConstant(soot.dava.internal.AST.ASTAggregatedCondition)>
<soot.dava.toolkits.base.AST.transformations.SimplifyConditions: soot.dava.internal.AST.ASTCondition simplifyTheCondition(soot.dava.internal.AST.ASTCondition)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: java.lang.Object getParentOf(java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void <init>()>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTIfNode(soot.dava.internal.AST.ASTIfNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTMethodNode(soot.dava.internal.AST.ASTMethodNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTStatementSequenceNode(soot.dava.internal.AST.ASTStatementSequenceNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTTryNode(soot.dava.internal.AST.ASTTryNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inDVariableDeclarationStmt(soot.dava.internal.javaRep.DVariableDeclarationStmt)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inDefinitionStmt(soot.jimple.DefinitionStmt)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inInvokeStmt(soot.jimple.InvokeStmt)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inReturnStmt(soot.jimple.ReturnStmt)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inStmt(soot.jimple.Stmt)>
<soot.dava.toolkits.base.AST.traversals.ASTParentNodeFinder: void inThrowStmt(soot.jimple.ThrowStmt)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: java.util.HashMap getDUHashMap()>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: java.util.List getDUChain(java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: java.util.List getUseList(soot.dava.internal.AST.ASTCondition)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: java.util.List getUsesFromBoxes(java.util.List)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void <init>(soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void checkConditionalUses(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void checkStatementUses(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void createUDDUChain(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTIfNode(soot.dava.internal.AST.ASTIfNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode)>
<soot.dava.toolkits.base.AST.traversals.ASTUsesAndDefs: void inASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.traversals.AllDefinitionsFinder: java.util.List getAllDefs()>
<soot.dava.toolkits.base.AST.traversals.AllDefinitionsFinder: void <init>()>
<soot.dava.toolkits.base.AST.traversals.AllDefinitionsFinder: void inDefinitionStmt(soot.jimple.DefinitionStmt)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: java.util.List getUseList(soot.dava.internal.AST.ASTCondition)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: java.util.List getUsesForField(soot.SootField)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: java.util.List getUsesFromBoxes(java.util.List)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void addFieldUse(soot.SootField,java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void addLocalUse(soot.Local,java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void checkConditionalUses(soot.dava.internal.AST.ASTCondition,soot.dava.internal.AST.ASTNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void checkStatementUses(soot.jimple.Stmt,java.lang.Object)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTIfNode(soot.dava.internal.AST.ASTIfNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode)>
<soot.dava.toolkits.base.AST.traversals.AllVariableUses: void inASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: soot.dava.internal.AST.ASTNode getTarget(soot.dava.internal.javaRep.DAbruptStmt)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void <init>(soot.Singletons$Global)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.AST.traversals.ClosestAbruptTargetFinder: void inStmt(soot.jimple.Stmt)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: java.lang.Object getTarget(java.lang.String)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void addToMap(soot.dava.internal.AST.ASTLabeledNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTDoWhileNode(soot.dava.internal.AST.ASTDoWhileNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTForLoopNode(soot.dava.internal.AST.ASTForLoopNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTIfElseNode(soot.dava.internal.AST.ASTIfElseNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTIfNode(soot.dava.internal.AST.ASTIfNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTLabeledBlockNode(soot.dava.internal.AST.ASTLabeledBlockNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTSwitchNode(soot.dava.internal.AST.ASTSwitchNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTSynchronizedBlockNode(soot.dava.internal.AST.ASTSynchronizedBlockNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTTryNode(soot.dava.internal.AST.ASTTryNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTUnconditionalLoopNode(soot.dava.internal.AST.ASTUnconditionalLoopNode)>
<soot.dava.toolkits.base.AST.traversals.LabelToNodeMapper: void inASTWhileNode(soot.dava.internal.AST.ASTWhileNode)>
<soot.dava.toolkits.base.finders.ExceptionFinder: soot.util.IterableSet get_CatchBody(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.ExceptionFinder: void find(soot.dava.DavaBody,soot.dava.internal.asg.AugmentedStmtGraph,soot.dava.internal.SET.SETNode)>
<soot.dava.toolkits.base.finders.ExceptionFinder: void preprocess(soot.dava.DavaBody,soot.dava.internal.asg.AugmentedStmtGraph)>
<soot.dava.toolkits.base.finders.ExceptionNode: boolean add_TryStmt(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.ExceptionNode: boolean add_TryStmts(java.util.Collection)>
<soot.dava.toolkits.base.finders.ExceptionNode: boolean remove(soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.ExceptionNode: java.util.List get_CatchList()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.SootClass get_Exception()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.SootClass get_Exception(soot.util.IterableSet)>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_Body()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_CatchBody()>
<soot.dava.toolkits.base.finders.ExceptionNode: soot.util.IterableSet get_TryBody()>
<soot.dava.toolkits.base.finders.ExceptionNode: void <init>(soot.util.IterableSet,soot.SootClass,soot.dava.internal.asg.AugmentedStmt)>
<soot.dava.toolkits.base.finders.ExceptionNode: void add_CatchBody(soot.dava.toolkits.base.finders.ExceptionNode)>
<soot.dava.toolkits.base.finders.ExceptionNode: void add_CatchBody(soot.util.IterableSet,soot.SootClass)>
<soot.dava.toolkits.base.finders.ExceptionNode: void refresh_CatchBody(soot.dava.toolkits.base.finders.ExceptionFinder)>
<soot.dava.toolkits.base.finders.ExceptionNode: void splitOff_ExceptionNode(soot.util.IterableSet,soot.dava.internal.asg.AugmentedStmtGraph,soot.util.IterableSet)>
<soot.dava.toolkits.base.finders.SwitchNode: java.util.List get_Preds()>
<soot.dava.toolkits.base.finders.SwitchNode: java.util.List get_Succs()>
<soot.dava.toolkits.base.finders.SwitchNode: java.util.TreeSet get_IndexSet()>
<soot.dava.toolkits.base.finders.SwitchNode: soot.dava.internal.asg.AugmentedStmt get_AugStmt()>
<soot.dava.toolkits.base.finders.SwitchNode: soot.dava.toolkits.base.finders.SwitchNode reset()>
<soot.dava.toolkits.base.finders.SwitchNode: soot.util.IterableSet get_Body()>
<soot.dava.toolkits.base.finders.SwitchNode: void <init>(soot.dava.internal.asg.AugmentedStmt,java.util.TreeSet,soot.util.IterableSet)>
<soot.dava.toolkits.base.finders.SwitchNode: void setup_Graph(java.util.HashMap)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: boolean siblingClashes(java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: boolean verify_PackageName()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String get_ClassName()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String get_FixedName(java.util.StringTokenizer,boolean)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String get_OriginalName()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String get_OriginalPackageName(java.util.StringTokenizer)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String get_PackageName()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.lang.String retrieve_FixedName(java.util.StringTokenizer,boolean)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: java.util.ArrayList get_Children()>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: void <init>(soot.dava.toolkits.base.misc.PackageNamer,java.lang.String,soot.dava.toolkits.base.misc.PackageNamer$NameHolder,boolean)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: void fix_ClassNames(java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer$NameHolder: void fix_PackageNames()>
<soot.dava.toolkits.base.misc.PackageNamer: boolean package_ContainsClass(java.lang.String,java.lang.String,java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer: boolean use_ShortName(java.lang.String,java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer: java.lang.String get_FixedClassName(java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer: java.lang.String get_FixedPackageName(java.lang.String)>
<soot.dava.toolkits.base.misc.PackageNamer: java.util.ArrayList access$100(soot.dava.toolkits.base.misc.PackageNamer)>
<soot.dava.toolkits.base.misc.PackageNamer: java.util.HashSet access$000(soot.dava.toolkits.base.misc.PackageNamer)>
<soot.dava.toolkits.base.misc.PackageNamer: soot.util.IterableSet patch_PackageContext(soot.util.IterableSet)>
<soot.dava.toolkits.base.misc.PackageNamer: void <init>(soot.Singletons$Global)>
<soot.dava.toolkits.base.misc.PackageNamer: void add_ClassName(java.lang.String,java.util.ArrayList)>
<soot.dava.toolkits.base.misc.PackageNamer: void fixNames()>
<soot.dava.toolkits.base.renamer.RemoveFullyQualifiedName: boolean containsMultiple(java.util.Iterator,java.lang.String,soot.Type)>
<soot.dava.toolkits.base.renamer.RemoveFullyQualifiedName: java.lang.String getClassName(java.lang.String)>
<soot.dava.toolkits.base.renamer.RemoveFullyQualifiedName: java.lang.String getReducedName(soot.util.IterableSet,java.lang.String,soot.Type)>
<soot.dava.toolkits.base.renamer.heuristicSet: boolean contains(soot.Local)>
<soot.dava.toolkits.base.renamer.heuristicSet: boolean getHeuristic(soot.Local,int)>
<soot.dava.toolkits.base.renamer.heuristicSet: java.util.Iterator getLocalsIterator()>
<soot.dava.toolkits.base.renamer.heuristicSet: java.util.List getCastStrings(soot.Local)>
<soot.dava.toolkits.base.renamer.heuristicSet: java.util.List getFieldName(soot.Local)>
<soot.dava.toolkits.base.renamer.heuristicSet: java.util.List getObjectClassName(soot.Local)>
<soot.dava.toolkits.base.renamer.heuristicSet: soot.dava.toolkits.base.renamer.heuristicTuple getTuple(soot.Local)>
<soot.dava.toolkits.base.renamer.heuristicSet: void <init>()>
<soot.dava.toolkits.base.renamer.heuristicSet: void add(soot.Local,int)>
<soot.dava.toolkits.base.renamer.heuristicSet: void addCastString(soot.Local,java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicSet: void print()>
<soot.dava.toolkits.base.renamer.heuristicSet: void setFieldName(soot.Local,java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicSet: void setHeuristic(soot.Local,int)>
<soot.dava.toolkits.base.renamer.heuristicSet: void setMethodName(soot.Local,java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicSet: void setObjectClassName(soot.Local,java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.lang.String getPrint()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getCastStrings()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getFieldName()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getMethodName()>
<soot.dava.toolkits.base.renamer.heuristicTuple: java.util.List getObjectClassName()>
<soot.dava.toolkits.base.renamer.heuristicTuple: void <init>(int)>
<soot.dava.toolkits.base.renamer.heuristicTuple: void addCastString(java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicTuple: void setFieldName(java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicTuple: void setMethodName(java.lang.String)>
<soot.dava.toolkits.base.renamer.heuristicTuple: void setObjectClassName(java.lang.String)>
<soot.grimp.Grimp: soot.Value cloneIfNecessary(soot.Value)>
<soot.grimp.internal.AbstractGrimpFloatBinopExpr: java.lang.String toString()>
<soot.grimp.internal.AbstractGrimpFloatBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.AbstractGrimpIntBinopExpr: java.lang.String toString()>
<soot.grimp.internal.AbstractGrimpIntBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.AbstractGrimpIntLongBinopExpr: java.lang.String toString()>
<soot.grimp.internal.AbstractGrimpIntLongBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.grimp.internal.ExprBox: void <init>(soot.Value)>
<soot.grimp.internal.GAddExpr: java.lang.Object clone()>
<soot.grimp.internal.GAndExpr: java.lang.Object clone()>
<soot.grimp.internal.GArrayRef: java.lang.Object clone()>
<soot.grimp.internal.GArrayRef: java.lang.String toString()>
<soot.grimp.internal.GAssignStmt: java.lang.Object clone()>
<soot.grimp.internal.GCastExpr: java.lang.Object clone()>
<soot.grimp.internal.GCastExpr: java.lang.String toString()>
<soot.grimp.internal.GCastExpr: void <init>(soot.Value,soot.Type)>
<soot.grimp.internal.GCmpExpr: java.lang.Object clone()>
<soot.grimp.internal.GCmpgExpr: java.lang.Object clone()>
<soot.grimp.internal.GCmplExpr: java.lang.Object clone()>
<soot.grimp.internal.GDivExpr: java.lang.Object clone()>
<soot.grimp.internal.GEnterMonitorStmt: java.lang.Object clone()>
<soot.grimp.internal.GEqExpr: java.lang.Object clone()>
<soot.grimp.internal.GExitMonitorStmt: java.lang.Object clone()>
<soot.grimp.internal.GGeExpr: java.lang.Object clone()>
<soot.grimp.internal.GGtExpr: java.lang.Object clone()>
<soot.grimp.internal.GIdentityStmt: java.lang.Object clone()>
<soot.grimp.internal.GIfStmt: java.lang.Object clone()>
<soot.grimp.internal.GInstanceFieldRef: java.lang.Object clone()>
<soot.grimp.internal.GInstanceFieldRef: java.lang.String toString()>
<soot.grimp.internal.GInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef)>
<soot.grimp.internal.GInstanceOfExpr: java.lang.Object clone()>
<soot.grimp.internal.GInstanceOfExpr: void <init>(soot.Value,soot.Type)>
<soot.grimp.internal.GInterfaceInvokeExpr: java.lang.Object clone()>
<soot.grimp.internal.GInterfaceInvokeExpr: java.lang.String toString()>
<soot.grimp.internal.GInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GInvokeStmt: java.lang.Object clone()>
<soot.grimp.internal.GLeExpr: java.lang.Object clone()>
<soot.grimp.internal.GLengthExpr: java.lang.Object clone()>
<soot.grimp.internal.GLookupSwitchStmt: java.lang.Object clone()>
<soot.grimp.internal.GLtExpr: java.lang.Object clone()>
<soot.grimp.internal.GMulExpr: java.lang.Object clone()>
<soot.grimp.internal.GNeExpr: java.lang.Object clone()>
<soot.grimp.internal.GNegExpr: java.lang.Object clone()>
<soot.grimp.internal.GNewArrayExpr: java.lang.Object clone()>
<soot.grimp.internal.GNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.grimp.internal.GNewInvokeExpr: java.lang.Object clone()>
<soot.grimp.internal.GNewInvokeExpr: java.util.List getUseBoxes()>
<soot.grimp.internal.GNewInvokeExpr: soot.RefType getBaseType()>
<soot.grimp.internal.GNewInvokeExpr: soot.Type getType()>
<soot.grimp.internal.GNewInvokeExpr: void <init>(soot.RefType,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GNewMultiArrayExpr: java.lang.Object clone()>
<soot.grimp.internal.GNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.grimp.internal.GOrExpr: java.lang.Object clone()>
<soot.grimp.internal.GRValueBox: void <init>(soot.Value)>
<soot.grimp.internal.GRemExpr: java.lang.Object clone()>
<soot.grimp.internal.GReturnStmt: java.lang.Object clone()>
<soot.grimp.internal.GShlExpr: java.lang.Object clone()>
<soot.grimp.internal.GShrExpr: java.lang.Object clone()>
<soot.grimp.internal.GSpecialInvokeExpr: java.lang.Object clone()>
<soot.grimp.internal.GSpecialInvokeExpr: java.lang.String toString()>
<soot.grimp.internal.GSpecialInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GStaticInvokeExpr: java.lang.Object clone()>
<soot.grimp.internal.GStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GSubExpr: java.lang.Object clone()>
<soot.grimp.internal.GTableSwitchStmt: java.lang.Object clone()>
<soot.grimp.internal.GThrowStmt: java.lang.Object clone()>
<soot.grimp.internal.GTrap: java.lang.Object clone()>
<soot.grimp.internal.GTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.grimp.internal.GUshrExpr: java.lang.Object clone()>
<soot.grimp.internal.GVirtualInvokeExpr: java.lang.Object clone()>
<soot.grimp.internal.GVirtualInvokeExpr: java.lang.String toString()>
<soot.grimp.internal.GVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.grimp.internal.GXorExpr: java.lang.Object clone()>
<soot.grimp.internal.ObjExprBox: void <init>(soot.Value)>
<soot.javaToJimple.AbstractJimpleBodyBuilder: soot.javaToJimple.AbstractJimpleBodyBuilder base()>
<soot.javaToJimple.AbstractJimpleBodyBuilder: void <init>()>
<soot.javaToJimple.AnonClassInitMethodSource: polyglot.types.ClassType anonType()>
<soot.javaToJimple.AnonClassInitMethodSource: polyglot.types.ClassType polyglotType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type outerClassType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type superOuterType()>
<soot.javaToJimple.AnonClassInitMethodSource: soot.Type thisOuterType()>
<soot.javaToJimple.AnonClassInitMethodSource: void anonType(polyglot.types.ClassType)>
<soot.javaToJimple.AnonClassInitMethodSource: void outerClassType(soot.Type)>
<soot.javaToJimple.AnonClassInitMethodSource: void polyglotType(polyglot.types.ClassType)>
<soot.javaToJimple.AnonClassInitMethodSource: void superOuterType(soot.Type)>
<soot.javaToJimple.AnonClassInitMethodSource: void thisOuterType(soot.Type)>
<soot.javaToJimple.AnonConstructorFinder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.AnonConstructorFinder: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.javaToJimple.AnonInitBodyBuilder: soot.jimple.JimpleBody createBody(soot.SootMethod)>
<soot.javaToJimple.AnonInitBodyBuilder: void <init>()>
<soot.javaToJimple.AnonLocalClassInfo: java.util.ArrayList finalLocalsAvail()>
<soot.javaToJimple.AnonLocalClassInfo: java.util.ArrayList finalLocalsUsed()>
<soot.javaToJimple.AnonLocalClassInfo: void finalLocalsAvail(java.util.ArrayList)>
<soot.javaToJimple.AnonLocalClassInfo: void finalLocalsUsed(java.util.ArrayList)>
<soot.javaToJimple.AssertStmtChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.BiMap: java.lang.Object getKey(java.lang.Object)>
<soot.javaToJimple.BiMap: void put(java.lang.Object,java.lang.Object)>
<soot.javaToJimple.CastInsertionVisitor: polyglot.ast.Expr ascribe(polyglot.ast.Expr,polyglot.types.Type)>
<soot.javaToJimple.CastInsertionVisitor: polyglot.ast.Node leaveCall(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.CastInsertionVisitor: void <init>(polyglot.frontend.Job,polyglot.types.TypeSystem,polyglot.ast.NodeFactory)>
<soot.javaToJimple.ClassDeclFinder: java.util.ArrayList declsFound()>
<soot.javaToJimple.ClassDeclFinder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.ClassDeclFinder: void <init>()>
<soot.javaToJimple.ClassLiteralChecker: java.util.ArrayList getList()>
<soot.javaToJimple.ClassLiteralChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.ClassLiteralChecker: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.ClassLiteralChecker: void <init>()>
<soot.javaToJimple.IInitialResolver$Dependencies: void <init>()>
<soot.javaToJimple.InnerClassInfo: java.lang.String getSimpleName()>
<soot.javaToJimple.InnerClassInfo: soot.SootClass getOuterClass()>
<soot.javaToJimple.InnerClassInfo: void <init>(soot.SootClass,java.lang.String,int)>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList anonBodyList()>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList localClassDeclList()>
<soot.javaToJimple.InnerClassInfoFinder: java.util.ArrayList memberList()>
<soot.javaToJimple.InnerClassInfoFinder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.InnerClassInfoFinder: void <init>()>
<soot.javaToJimple.JimpleBodyBuilder: boolean needsOuterClassRef(polyglot.types.ClassType)>
<soot.javaToJimple.JimpleBodyBuilder: java.lang.String createStringConstant(polyglot.ast.Node)>
<soot.javaToJimple.JimpleBodyBuilder: java.lang.String createStringConstantBinary(polyglot.ast.Binary)>
<soot.javaToJimple.JimpleBodyBuilder: java.util.ArrayList getSootParams(polyglot.ast.ProcedureCall)>
<soot.javaToJimple.JimpleBodyBuilder: java.util.ArrayList getSootParamsTypes(polyglot.ast.ProcedureCall)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local createCatchFormal(polyglot.ast.Formal)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local createLocal(polyglot.types.LocalInstance)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local createStringBuffer(polyglot.ast.Expr)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local createToString(soot.Local,polyglot.ast.Expr)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local generateAppends(polyglot.ast.Expr,soot.Local)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local generateLocal(polyglot.types.Type)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getCallLocal(polyglot.ast.Call)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getLocal(polyglot.ast.Local)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getLocal(polyglot.types.LocalInstance)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getNewArrayLocal(polyglot.ast.NewArray)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getNewLocal(polyglot.ast.New)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getPrivateAccessFieldLocal(polyglot.ast.Field,soot.Value)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getSpecialClassLitLocal(polyglot.ast.ClassLit)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getSpecialLocal(polyglot.ast.Special)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getSpecialSuperQualifierLocal(polyglot.ast.Expr)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local getThis(soot.Type)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local handlePrivateFieldAssignSet(polyglot.ast.Assign)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local handlePrivateFieldSet(polyglot.ast.Expr,soot.Value,soot.Value)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Local handlePrivateFieldUnarySet(polyglot.ast.Unary)>
<soot.javaToJimple.JimpleBodyBuilder: soot.SootMethod addGetFieldAccessMeth(soot.SootClass,polyglot.ast.Field)>
<soot.javaToJimple.JimpleBodyBuilder: soot.SootMethod addGetMethodAccessMeth(soot.SootClass,polyglot.ast.Call)>
<soot.javaToJimple.JimpleBodyBuilder: soot.SootMethod addSetAccessMeth(soot.SootClass,polyglot.ast.Field,soot.Value)>
<soot.javaToJimple.JimpleBodyBuilder: soot.SootMethod makeLiFieldAccessMethod(soot.SootClass,polyglot.types.LocalInstance)>
<soot.javaToJimple.JimpleBodyBuilder: soot.SootMethod makeSuperAccessMethod(soot.SootClass,java.lang.Object)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value createAggressiveExpr(polyglot.ast.Expr,boolean,boolean)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value createLHS(polyglot.ast.Expr)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value createLiteral(polyglot.ast.Lit)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getAssignLocal(polyglot.ast.Assign)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getAssignRightLocal(polyglot.ast.Assign,soot.Local)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getBaseLocal(polyglot.ast.Receiver)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getBinaryLocal2(polyglot.ast.Binary,boolean)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getCastLocal(polyglot.ast.Cast)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getFieldLocal(polyglot.ast.Field)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getSimpleAssignLocal(polyglot.ast.Assign)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getSimpleAssignRightLocal(polyglot.ast.Assign)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getStrConAssignLocal(polyglot.ast.Assign)>
<soot.javaToJimple.JimpleBodyBuilder: soot.Value getUnaryLocal(polyglot.ast.Unary)>
<soot.javaToJimple.JimpleBodyBuilder: soot.jimple.Constant createConstant(polyglot.ast.Expr)>
<soot.javaToJimple.JimpleBodyBuilder: soot.jimple.Constant getConstant(java.lang.Object,polyglot.types.Type)>
<soot.javaToJimple.JimpleBodyBuilder: soot.jimple.Constant getReturnConstant(polyglot.ast.Field)>
<soot.javaToJimple.JimpleBodyBuilder: soot.jimple.JimpleBody createJimpleBody(polyglot.ast.Block,java.util.List,soot.SootMethod)>
<soot.javaToJimple.JimpleBodyBuilder: void <init>()>
<soot.javaToJimple.JimpleBodyBuilder: void addToExceptionList(soot.jimple.Stmt,soot.jimple.Stmt,soot.jimple.Stmt,soot.SootClass)>
<soot.javaToJimple.JimpleBodyBuilder: void createAssert(polyglot.ast.Assert)>
<soot.javaToJimple.JimpleBodyBuilder: void createBranch(polyglot.ast.Branch)>
<soot.javaToJimple.JimpleBodyBuilder: void createConstructorCall(polyglot.ast.ConstructorCall)>
<soot.javaToJimple.JimpleBodyBuilder: void createDo2(polyglot.ast.Do)>
<soot.javaToJimple.JimpleBodyBuilder: void createForLoop2(polyglot.ast.For)>
<soot.javaToJimple.JimpleBodyBuilder: void createLabeled(polyglot.ast.Labeled)>
<soot.javaToJimple.JimpleBodyBuilder: void createLocalClassDecl(polyglot.ast.LocalClassDecl)>
<soot.javaToJimple.JimpleBodyBuilder: void createReturn(polyglot.ast.Return)>
<soot.javaToJimple.JimpleBodyBuilder: void createStmt(polyglot.ast.Stmt)>
<soot.javaToJimple.JimpleBodyBuilder: void createSwitch(polyglot.ast.Switch)>
<soot.javaToJimple.JimpleBodyBuilder: void createSynchronized(polyglot.ast.Synchronized)>
<soot.javaToJimple.JimpleBodyBuilder: void createTry(polyglot.ast.Try)>
<soot.javaToJimple.JimpleBodyBuilder: void createTryCatch(polyglot.ast.Try)>
<soot.javaToJimple.JimpleBodyBuilder: void createTryCatchFinally(polyglot.ast.Try)>
<soot.javaToJimple.JimpleBodyBuilder: void createWhile2(polyglot.ast.While)>
<soot.javaToJimple.JimpleBodyBuilder: void handleFinalLocalParams(java.util.ArrayList,java.util.ArrayList,polyglot.types.ClassType)>
<soot.javaToJimple.JimpleBodyBuilder: void handleOuterClassParams(java.util.ArrayList,soot.Value,java.util.ArrayList,polyglot.types.ClassType)>
<soot.javaToJimple.LocalGenerator: void initLocalNames()>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getLocalDecls()>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getLocals()>
<soot.javaToJimple.LocalUsesChecker: java.util.ArrayList getNews()>
<soot.javaToJimple.LocalUsesChecker: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.LocalUsesChecker: void <init>()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList ccallList()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList finalLocals()>
<soot.javaToJimple.MethodFinalsChecker: java.util.ArrayList inners()>
<soot.javaToJimple.MethodFinalsChecker: java.util.HashMap typeToLocalsUsed()>
<soot.javaToJimple.MethodFinalsChecker: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.MethodFinalsChecker: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.MethodFinalsChecker: void <init>()>
<soot.javaToJimple.NestedClassListBuilder: java.util.ArrayList getClassDeclsList()>
<soot.javaToJimple.NestedClassListBuilder: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.javaToJimple.NestedClassListBuilder: void <init>()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getFieldInits()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getFinalsList()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getInitializerBlocks()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getStaticFieldInits()>
<soot.javaToJimple.PolyglotMethodSource: java.util.ArrayList getStaticInitializerBlocks()>
<soot.javaToJimple.PolyglotMethodSource: soot.Body getBody(soot.SootMethod,java.lang.String)>
<soot.javaToJimple.PolyglotMethodSource: void setFieldInits(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setFinalsList(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setInitializerBlocks(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setJBB(soot.javaToJimple.AbstractJimpleBodyBuilder)>
<soot.javaToJimple.PolyglotMethodSource: void setStaticFieldInits(java.util.ArrayList)>
<soot.javaToJimple.PolyglotMethodSource: void setStaticInitializerBlocks(java.util.ArrayList)>
<soot.javaToJimple.PrivateMethodAccMethodSource: boolean isCallParamType(soot.Type)>
<soot.javaToJimple.PrivateMethodAccMethodSource: soot.Body getBody(soot.SootMethod,java.lang.String)>
<soot.javaToJimple.SaveASTVisitor: void <init>(polyglot.frontend.Pass$ID,polyglot.frontend.Job,polyglot.frontend.ExtensionInfo)>
<soot.javaToJimple.StrictFPPropagator: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.TypeListBuilder: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.javaToJimple.Util: java.lang.String getFieldNameForClassLit(polyglot.types.Type)>
<soot.javaToJimple.Util: java.lang.String getParamNameForClassLit(polyglot.types.Type)>
<soot.javaToJimple.Util: soot.Local getThis(soot.Type,soot.Body,java.util.HashMap,soot.javaToJimple.LocalGenerator)>
<soot.javaToJimple.Util: soot.Local getThisGivenOuter(soot.Type,java.util.HashMap,soot.Body,soot.javaToJimple.LocalGenerator,soot.Local)>
<soot.javaToJimple.Util: soot.SootMethod makeOuterThisAccessMethod(soot.SootClass)>
<soot.javaToJimple.Util: soot.Type getSootType(polyglot.types.Type)>
<soot.javaToJimple.Util: void addInnerClassTag(soot.SootClass,java.lang.String,java.lang.String,java.lang.String,int)>
<soot.javaToJimple.jj.ast.JjArrayAccessAssign_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjArrayAccessAssign_c: void <init>(polyglot.util.Position,polyglot.ast.ArrayAccess,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjArrayInit_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjArrayInit_c: void <init>(polyglot.util.Position,java.util.List)>
<soot.javaToJimple.jj.ast.JjBinary_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjBinary_c: void <init>(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Binary$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjCast_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjCast_c: void <init>(polyglot.util.Position,polyglot.ast.TypeNode,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjFieldAssign_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjFieldAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Field,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjFieldDecl_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjFieldDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjLocalAssign_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjLocalAssign_c: void <init>(polyglot.util.Position,polyglot.ast.Local,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjLocalDecl_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjLocalDecl_c: void <init>(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.ArrayAccessAssign ArrayAccessAssign(polyglot.util.Position,polyglot.ast.ArrayAccess,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.ArrayInit ArrayInit(polyglot.util.Position,java.util.List)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.Assign Assign(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.Binary Binary(polyglot.util.Position,polyglot.ast.Expr,polyglot.ast.Binary$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.Cast Cast(polyglot.util.Position,polyglot.ast.TypeNode,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.FieldAssign FieldAssign(polyglot.util.Position,polyglot.ast.Field,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.FieldDecl FieldDecl(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.LocalAssign LocalAssign(polyglot.util.Position,polyglot.ast.Local,polyglot.ast.Assign$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.LocalDecl LocalDecl(polyglot.util.Position,polyglot.types.Flags,polyglot.ast.TypeNode,java.lang.String,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.NewArray NewArray(polyglot.util.Position,polyglot.ast.TypeNode,java.util.List,int,polyglot.ast.ArrayInit)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.Return Return(polyglot.util.Position,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjNodeFactory_c: polyglot.ast.Unary Unary(polyglot.util.Position,polyglot.ast.Unary$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjReturn_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjReturn_c: void <init>(polyglot.util.Position,polyglot.ast.Expr)>
<soot.javaToJimple.jj.ast.JjUnary_c: polyglot.types.Type childExpectedType(polyglot.ast.Expr,polyglot.visit.AscriptionVisitor)>
<soot.javaToJimple.jj.ast.JjUnary_c: void <init>(polyglot.util.Position,polyglot.ast.Unary$Operator,polyglot.ast.Expr)>
<soot.javaToJimple.jj.types.JjTypeSystem_c: void <init>()>
<soot.jimple.AbstractJimpleValueSwitch: java.lang.Object getResult()>
<soot.jimple.AbstractJimpleValueSwitch: void setResult(java.lang.Object)>
<soot.jimple.Constant: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.Jimple: java.util.List jimpleKeywordList()>
<soot.jimple.Jimple: soot.Value cloneIfNecessary(soot.Value)>
<soot.jimple.JimpleToBafContext: soot.Local getBafLocalOfJimpleLocal(soot.Local)>
<soot.jimple.JimpleToBafContext: soot.Unit getCurrentUnit()>
<soot.jimple.JimpleToBafContext: void setBafLocalOfJimpleLocal(soot.Local,soot.Local)>
<soot.jimple.JimpleToBafContext: void setCurrentUnit(soot.Unit)>
<soot.jimple.ParameterRef: java.lang.Object clone()>
<soot.jimple.ParameterRef: soot.Type getType()>
<soot.jimple.ParameterRef: void <init>(soot.Type,int)>
<soot.jimple.StaticFieldRef: java.lang.Object clone()>
<soot.jimple.StaticFieldRef: soot.SootField getField()>
<soot.jimple.StaticFieldRef: soot.SootFieldRef getFieldRef()>
<soot.jimple.StaticFieldRef: soot.Type getType()>
<soot.jimple.StaticFieldRef: void <init>(soot.SootFieldRef)>
<soot.jimple.StringConstant: soot.Type getType()>
<soot.jimple.StringConstant: soot.jimple.StringConstant v(java.lang.String)>
<soot.jimple.StringConstant: void <init>(java.lang.String)>
<soot.jimple.ThisRef: java.lang.Object clone()>
<soot.jimple.ThisRef: soot.Type getType()>
<soot.jimple.ThisRef: void <init>(soot.RefType)>
<soot.jimple.internal.AbstractBinopExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractBinopExpr: soot.Value getOp1()>
<soot.jimple.internal.AbstractBinopExpr: soot.Value getOp2()>
<soot.jimple.internal.AbstractBinopExpr: soot.ValueBox getOp1Box()>
<soot.jimple.internal.AbstractBinopExpr: soot.ValueBox getOp2Box()>
<soot.jimple.internal.AbstractCastExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractCastExpr: soot.Type getCastType()>
<soot.jimple.internal.AbstractCastExpr: soot.Type getType()>
<soot.jimple.internal.AbstractCastExpr: soot.Value getOp()>
<soot.jimple.internal.AbstractCastExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.AbstractCastExpr: void <init>(soot.ValueBox,soot.Type)>
<soot.jimple.internal.AbstractDefinitionStmt: java.util.List getDefBoxes()>
<soot.jimple.internal.AbstractDefinitionStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.Value getLeftOp()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.Value getRightOp()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.ValueBox getLeftOpBox()>
<soot.jimple.internal.AbstractDefinitionStmt: soot.ValueBox getRightOpBox()>
<soot.jimple.internal.AbstractInstanceFieldRef: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.SootField getField()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.SootFieldRef getFieldRef()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.Type getType()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.Value getBase()>
<soot.jimple.internal.AbstractInstanceFieldRef: soot.ValueBox getBaseBox()>
<soot.jimple.internal.AbstractInstanceFieldRef: void <init>(soot.ValueBox,soot.SootFieldRef)>
<soot.jimple.internal.AbstractInstanceInvokeExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractInstanceInvokeExpr: soot.Value getBase()>
<soot.jimple.internal.AbstractInstanceInvokeExpr: soot.ValueBox getBaseBox()>
<soot.jimple.internal.AbstractInstanceOfExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractInstanceOfExpr: soot.Type getCheckType()>
<soot.jimple.internal.AbstractInstanceOfExpr: soot.Value getOp()>
<soot.jimple.internal.AbstractInstanceOfExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.AbstractInstanceOfExpr: void <init>(soot.ValueBox,soot.Type)>
<soot.jimple.internal.AbstractInterfaceInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractInvokeExpr: java.util.List getArgs()>
<soot.jimple.internal.AbstractInvokeExpr: soot.SootMethod getMethod()>
<soot.jimple.internal.AbstractInvokeExpr: soot.SootMethodRef getMethodRef()>
<soot.jimple.internal.AbstractInvokeExpr: soot.Type getType()>
<soot.jimple.internal.AbstractJimpleFloatBinopExpr: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.AbstractLengthExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractNegExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractNewArrayExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.Type getBaseType()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.Type getType()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.Value getSize()>
<soot.jimple.internal.AbstractNewArrayExpr: soot.ValueBox getSizeBox()>
<soot.jimple.internal.AbstractNewArrayExpr: void <init>(soot.Type,soot.ValueBox)>
<soot.jimple.internal.AbstractNewExpr: soot.RefType getBaseType()>
<soot.jimple.internal.AbstractNewExpr: soot.Type getType()>
<soot.jimple.internal.AbstractNewMultiArrayExpr: soot.ArrayType getBaseType()>
<soot.jimple.internal.AbstractNewMultiArrayExpr: soot.Type getType()>
<soot.jimple.internal.AbstractNewMultiArrayExpr: void <init>(soot.ArrayType,soot.ValueBox[])>
<soot.jimple.internal.AbstractSpecialInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractStaticInvokeExpr: void <init>(soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.AbstractStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.AbstractUnopExpr: java.util.List getUseBoxes()>
<soot.jimple.internal.AbstractUnopExpr: soot.Value getOp()>
<soot.jimple.internal.AbstractUnopExpr: soot.ValueBox getOpBox()>
<soot.jimple.internal.AbstractUnopExpr: void <init>(soot.ValueBox)>
<soot.jimple.internal.AbstractVirtualInvokeExpr: void <init>(soot.ValueBox,soot.SootMethodRef,soot.ValueBox[])>
<soot.jimple.internal.ConditionExprBox: void <init>(soot.Value)>
<soot.jimple.internal.IdentityRefBox: void <init>(soot.Value)>
<soot.jimple.internal.ImmediateBox: void <init>(soot.Value)>
<soot.jimple.internal.InvokeExprBox: void <init>(soot.Value)>
<soot.jimple.internal.JAddExpr: java.lang.Object clone()>
<soot.jimple.internal.JArrayRef: java.lang.Object clone()>
<soot.jimple.internal.JArrayRef: java.util.List getUseBoxes()>
<soot.jimple.internal.JArrayRef: soot.Value getBase()>
<soot.jimple.internal.JArrayRef: soot.Value getIndex()>
<soot.jimple.internal.JArrayRef: soot.ValueBox getBaseBox()>
<soot.jimple.internal.JArrayRef: soot.ValueBox getIndexBox()>
<soot.jimple.internal.JArrayRef: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JAssignStmt$1: void caseArrayRef(soot.jimple.ArrayRef)>
<soot.jimple.internal.JAssignStmt$1: void caseInstanceFieldRef(soot.jimple.InstanceFieldRef)>
<soot.jimple.internal.JAssignStmt$1: void caseLocal(soot.Local)>
<soot.jimple.internal.JAssignStmt$1: void caseStaticFieldRef(soot.jimple.StaticFieldRef)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value,soot.jimple.internal.JAssignStmt$1)>
<soot.jimple.internal.JAssignStmt$LinkedRValueBox: void setOtherBox(soot.ValueBox)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void <init>(soot.jimple.internal.JAssignStmt,soot.Value,soot.jimple.internal.JAssignStmt$1)>
<soot.jimple.internal.JAssignStmt$LinkedVariableBox: void setOtherBox(soot.ValueBox)>
<soot.jimple.internal.JAssignStmt: java.lang.Object clone()>
<soot.jimple.internal.JAssignStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JAssignStmt: soot.ValueBox getInvokeExprBox()>
<soot.jimple.internal.JAssignStmt: soot.jimple.ArrayRef getArrayRef()>
<soot.jimple.internal.JAssignStmt: soot.jimple.FieldRef getFieldRef()>
<soot.jimple.internal.JAssignStmt: soot.jimple.InvokeExpr getInvokeExpr()>
<soot.jimple.internal.JAssignStmt: void <init>(soot.Value,soot.Value)>
<soot.jimple.internal.JAssignStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JAssignStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JAssignStmt: void setLeftOp(soot.Value)>
<soot.jimple.internal.JAssignStmt: void setRightOp(soot.Value)>
<soot.jimple.internal.JBreakpointStmt: java.lang.Object clone()>
<soot.jimple.internal.JCastExpr: java.lang.Object clone()>
<soot.jimple.internal.JCastExpr: void <init>(soot.Value,soot.Type)>
<soot.jimple.internal.JDivExpr: java.lang.Object clone()>
<soot.jimple.internal.JEnterMonitorStmt: java.lang.Object clone()>
<soot.jimple.internal.JEnterMonitorStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JEnterMonitorStmt: soot.Value getOp()>
<soot.jimple.internal.JEnterMonitorStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JEnterMonitorStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JEnterMonitorStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JExitMonitorStmt: java.lang.Object clone()>
<soot.jimple.internal.JExitMonitorStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JExitMonitorStmt: soot.Value getOp()>
<soot.jimple.internal.JExitMonitorStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JExitMonitorStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JExitMonitorStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JGotoStmt: java.lang.Object clone()>
<soot.jimple.internal.JGotoStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JGotoStmt: soot.Unit getTarget()>
<soot.jimple.internal.JGotoStmt: void <init>(soot.UnitBox)>
<soot.jimple.internal.JGotoStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JIdentityStmt: java.lang.Object clone()>
<soot.jimple.internal.JIdentityStmt: void <init>(soot.ValueBox,soot.ValueBox)>
<soot.jimple.internal.JIdentityStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JIfStmt$1: void add(soot.Unit)>
<soot.jimple.internal.JIfStmt$2: void add(soot.Unit)>
<soot.jimple.internal.JIfStmt$3: void add(soot.Unit)>
<soot.jimple.internal.JIfStmt: java.lang.Object clone()>
<soot.jimple.internal.JIfStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JIfStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JIfStmt: soot.UnitBox getTargetBox()>
<soot.jimple.internal.JIfStmt: soot.Value getCondition()>
<soot.jimple.internal.JIfStmt: soot.ValueBox getConditionBox()>
<soot.jimple.internal.JIfStmt: void <init>(soot.Value,soot.UnitBox)>
<soot.jimple.internal.JIfStmt: void <init>(soot.ValueBox,soot.UnitBox)>
<soot.jimple.internal.JIfStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JInstanceFieldRef: java.lang.Object clone()>
<soot.jimple.internal.JInstanceFieldRef: void <init>(soot.Value,soot.SootFieldRef)>
<soot.jimple.internal.JInstanceOfExpr: java.lang.Object clone()>
<soot.jimple.internal.JInstanceOfExpr: void <init>(soot.Value,soot.Type)>
<soot.jimple.internal.JInterfaceInvokeExpr: java.lang.Object clone()>
<soot.jimple.internal.JInterfaceInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JInvokeStmt: java.lang.Object clone()>
<soot.jimple.internal.JInvokeStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JInvokeStmt: soot.ValueBox getInvokeExprBox()>
<soot.jimple.internal.JInvokeStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JInvokeStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JLengthExpr: java.lang.Object clone()>
<soot.jimple.internal.JLookupSwitchStmt: java.lang.Object clone()>
<soot.jimple.internal.JLookupSwitchStmt: java.util.List getLookupValues()>
<soot.jimple.internal.JLookupSwitchStmt: java.util.List getTargets()>
<soot.jimple.internal.JLookupSwitchStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JLookupSwitchStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JLookupSwitchStmt: soot.Unit getDefaultTarget()>
<soot.jimple.internal.JLookupSwitchStmt: soot.Unit getTarget(int)>
<soot.jimple.internal.JLookupSwitchStmt: soot.UnitBox getDefaultTargetBox()>
<soot.jimple.internal.JLookupSwitchStmt: soot.UnitBox getTargetBox(int)>
<soot.jimple.internal.JLookupSwitchStmt: soot.UnitBox[] unitBoxListToArray(java.util.List)>
<soot.jimple.internal.JLookupSwitchStmt: soot.Value getKey()>
<soot.jimple.internal.JLookupSwitchStmt: soot.ValueBox getKeyBox()>
<soot.jimple.internal.JLookupSwitchStmt: void <init>(soot.Value,java.util.List,java.util.List,soot.UnitBox)>
<soot.jimple.internal.JLookupSwitchStmt: void <init>(soot.ValueBox,java.util.List,soot.UnitBox[],soot.UnitBox)>
<soot.jimple.internal.JLookupSwitchStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JLookupSwitchStmt: void setLookupValues(java.util.List)>
<soot.jimple.internal.JMulExpr: java.lang.Object clone()>
<soot.jimple.internal.JNegExpr: java.lang.Object clone()>
<soot.jimple.internal.JNewArrayExpr: java.lang.Object clone()>
<soot.jimple.internal.JNewArrayExpr: void <init>(soot.Type,soot.Value)>
<soot.jimple.internal.JNewExpr: java.lang.Object clone()>
<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>
<soot.jimple.internal.JNewMultiArrayExpr: java.lang.Object clone()>
<soot.jimple.internal.JNewMultiArrayExpr: void <init>(soot.ArrayType,java.util.List)>
<soot.jimple.internal.JNopStmt: java.lang.Object clone()>
<soot.jimple.internal.JNopStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JRemExpr: java.lang.Object clone()>
<soot.jimple.internal.JRetStmt: java.lang.Object clone()>
<soot.jimple.internal.JRetStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JRetStmt: soot.Value getStmtAddress()>
<soot.jimple.internal.JRetStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JReturnStmt: java.lang.Object clone()>
<soot.jimple.internal.JReturnStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JReturnStmt: soot.Value getOp()>
<soot.jimple.internal.JReturnStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JReturnStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JReturnStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JReturnVoidStmt: java.lang.Object clone()>
<soot.jimple.internal.JReturnVoidStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JSpecialInvokeExpr: java.lang.Object clone()>
<soot.jimple.internal.JSpecialInvokeExpr: void <init>(soot.Local,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JStaticInvokeExpr: java.lang.Object clone()>
<soot.jimple.internal.JStaticInvokeExpr: void <init>(soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JSubExpr: java.lang.Object clone()>
<soot.jimple.internal.JTableSwitchStmt: java.lang.Object clone()>
<soot.jimple.internal.JTableSwitchStmt: java.util.List getTargets()>
<soot.jimple.internal.JTableSwitchStmt: java.util.List getUnitBoxes()>
<soot.jimple.internal.JTableSwitchStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JTableSwitchStmt: soot.Unit getDefaultTarget()>
<soot.jimple.internal.JTableSwitchStmt: soot.Unit getTarget(int)>
<soot.jimple.internal.JTableSwitchStmt: soot.UnitBox getDefaultTargetBox()>
<soot.jimple.internal.JTableSwitchStmt: soot.UnitBox getTargetBox(int)>
<soot.jimple.internal.JTableSwitchStmt: soot.UnitBox[] unitBoxListToArray(java.util.List)>
<soot.jimple.internal.JTableSwitchStmt: soot.Value getKey()>
<soot.jimple.internal.JTableSwitchStmt: soot.ValueBox getKeyBox()>
<soot.jimple.internal.JTableSwitchStmt: void <init>(soot.Value,int,int,java.util.List,soot.UnitBox)>
<soot.jimple.internal.JTableSwitchStmt: void <init>(soot.ValueBox,int,int,soot.UnitBox[],soot.UnitBox)>
<soot.jimple.internal.JTableSwitchStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JThrowStmt: java.lang.Object clone()>
<soot.jimple.internal.JThrowStmt: java.util.List getUseBoxes()>
<soot.jimple.internal.JThrowStmt: soot.Value getOp()>
<soot.jimple.internal.JThrowStmt: soot.ValueBox getOpBox()>
<soot.jimple.internal.JThrowStmt: void <init>(soot.ValueBox)>
<soot.jimple.internal.JThrowStmt: void convertToBaf(soot.jimple.JimpleToBafContext,java.util.List)>
<soot.jimple.internal.JTrap: java.lang.Object clone()>
<soot.jimple.internal.JTrap: void <init>(soot.SootClass,soot.Unit,soot.Unit,soot.Unit)>
<soot.jimple.internal.JTrap: void <init>(soot.SootClass,soot.UnitBox,soot.UnitBox,soot.UnitBox)>
<soot.jimple.internal.JVirtualInvokeExpr: java.lang.Object clone()>
<soot.jimple.internal.JVirtualInvokeExpr: void <init>(soot.Value,soot.SootMethodRef,java.util.List)>
<soot.jimple.internal.JimpleLocal: java.lang.Object clone()>
<soot.jimple.internal.JimpleLocal: java.lang.String getName()>
<soot.jimple.internal.JimpleLocal: java.lang.String toString()>
<soot.jimple.internal.JimpleLocal: soot.Type getType()>
<soot.jimple.internal.JimpleLocal: void <init>(java.lang.String,soot.Type)>
<soot.jimple.internal.JimpleLocal: void setName(java.lang.String)>
<soot.jimple.internal.JimpleLocal: void setType(soot.Type)>
<soot.jimple.internal.JimpleLocalBox: void <init>(soot.Value)>
<soot.jimple.internal.RValueBox: void <init>(soot.Value)>
<soot.jimple.internal.StmtBox: void <init>(soot.jimple.Stmt)>
<soot.jimple.internal.VariableBox: void <init>(soot.Value)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token getToken()>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new0(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new1(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new10(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new11(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new12(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new13(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new14(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new15(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new16(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new17(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new18(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new19(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new2(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new20(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new21(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new22(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new23(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new24(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new25(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new26(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new27(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new28(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new29(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new3(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new30(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new31(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new32(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new33(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new34(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new35(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new36(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new37(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new38(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new39(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new4(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new40(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new41(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new42(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new43(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new44(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new45(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new46(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new47(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new48(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new49(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new5(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new50(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new51(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new52(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new53(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new54(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new55(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new56(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new57(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new58(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new59(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new6(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new60(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new61(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new62(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new63(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new64(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new65(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new66(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new67(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new68(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new69(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new7(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new70(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new71(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new72(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new73(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new74(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new75(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new76(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new77(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new78(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new79(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new8(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new80(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new81(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new82(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new83(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new84(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new85(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new86(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new87(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new88(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new89(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new9(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new90(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new91(int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new92(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new93(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new94(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new95(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new96(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new97(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new98(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token new99(java.lang.String,int,int)>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token next()>
<soot.jimple.parser.lexer.Lexer: soot.jimple.parser.node.Token peek()>
<soot.jimple.parser.lexer.LexerException: void <init>(java.lang.String)>
<soot.jimple.parser.node.AAbstractModifier: java.lang.String toString()>
<soot.jimple.parser.node.AAbstractModifier: soot.jimple.parser.node.TAbstract getAbstract()>
<soot.jimple.parser.node.AAbstractModifier: void <init>(soot.jimple.parser.node.TAbstract)>
<soot.jimple.parser.node.AAbstractModifier: void setAbstract(soot.jimple.parser.node.TAbstract)>
<soot.jimple.parser.node.AAndBinop: java.lang.String toString()>
<soot.jimple.parser.node.AAndBinop: soot.jimple.parser.node.TAnd getAnd()>
<soot.jimple.parser.node.AAndBinop: void <init>(soot.jimple.parser.node.TAnd)>
<soot.jimple.parser.node.AAndBinop: void setAnd(soot.jimple.parser.node.TAnd)>
<soot.jimple.parser.node.AAnnotationModifier: java.lang.String toString()>
<soot.jimple.parser.node.AAnnotationModifier: soot.jimple.parser.node.TAnnotation getAnnotation()>
<soot.jimple.parser.node.AAnnotationModifier: void <init>(soot.jimple.parser.node.TAnnotation)>
<soot.jimple.parser.node.AAnnotationModifier: void setAnnotation(soot.jimple.parser.node.TAnnotation)>
<soot.jimple.parser.node.AArrayBrackets: java.lang.String toString()>
<soot.jimple.parser.node.AArrayBrackets: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AArrayBrackets: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AArrayBrackets: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayBrackets: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AArrayBrackets: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayDescriptor: java.lang.String toString()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AArrayDescriptor: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AArrayDescriptor: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayDescriptor: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AArrayDescriptor: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AArrayDescriptor: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AArrayNewExpr: java.lang.String toString()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.PFixedArrayDescriptor getFixedArrayDescriptor()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TNewarray getNewarray()>
<soot.jimple.parser.node.AArrayNewExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AArrayNewExpr: void <init>(soot.jimple.parser.node.TNewarray,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PNonvoidType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayNewExpr: void setFixedArrayDescriptor(soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayNewExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AArrayNewExpr: void setNewarray(soot.jimple.parser.node.TNewarray)>
<soot.jimple.parser.node.AArrayNewExpr: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AArrayNewExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AArrayRef: java.lang.String toString()>
<soot.jimple.parser.node.AArrayRef: soot.jimple.parser.node.PFixedArrayDescriptor getFixedArrayDescriptor()>
<soot.jimple.parser.node.AArrayRef: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AArrayRef: void <init>(soot.jimple.parser.node.TIdentifier,soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayRef: void setFixedArrayDescriptor(soot.jimple.parser.node.PFixedArrayDescriptor)>
<soot.jimple.parser.node.AArrayRef: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AArrayReference: java.lang.String toString()>
<soot.jimple.parser.node.AArrayReference: soot.jimple.parser.node.PArrayRef getArrayRef()>
<soot.jimple.parser.node.AArrayReference: void <init>(soot.jimple.parser.node.PArrayRef)>
<soot.jimple.parser.node.AArrayReference: void setArrayRef(soot.jimple.parser.node.PArrayRef)>
<soot.jimple.parser.node.AAssignStatement: java.lang.String toString()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.PExpression getExpression()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.PVariable getVariable()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.TEquals getEquals()>
<soot.jimple.parser.node.AAssignStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AAssignStatement: void <init>(soot.jimple.parser.node.PVariable,soot.jimple.parser.node.TEquals,soot.jimple.parser.node.PExpression,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AAssignStatement: void setEquals(soot.jimple.parser.node.TEquals)>
<soot.jimple.parser.node.AAssignStatement: void setExpression(soot.jimple.parser.node.PExpression)>
<soot.jimple.parser.node.AAssignStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AAssignStatement: void setVariable(soot.jimple.parser.node.PVariable)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.ABaseNonvoidType)>
<soot.jimple.parser.node.ABaseNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.ABaseNonvoidType,soot.jimple.parser.node.ABaseNonvoidType$1)>
<soot.jimple.parser.node.ABaseNonvoidType: java.lang.String toString()>
<soot.jimple.parser.node.ABaseNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.ABaseNonvoidType: soot.jimple.parser.node.PBaseTypeNoName getBaseTypeNoName()>
<soot.jimple.parser.node.ABaseNonvoidType: void <init>(soot.jimple.parser.node.PBaseTypeNoName,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.ABaseNonvoidType: void setBaseTypeNoName(soot.jimple.parser.node.PBaseTypeNoName)>
<soot.jimple.parser.node.ABinopBoolExpr: java.lang.String toString()>
<soot.jimple.parser.node.ABinopBoolExpr: soot.jimple.parser.node.PBinopExpr getBinopExpr()>
<soot.jimple.parser.node.ABinopBoolExpr: void <init>(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopBoolExpr: void setBinopExpr(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopExpr: java.lang.String toString()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PBinop getBinop()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PImmediate getLeft()>
<soot.jimple.parser.node.ABinopExpr: soot.jimple.parser.node.PImmediate getRight()>
<soot.jimple.parser.node.ABinopExpr: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.PBinop,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpr: void setBinop(soot.jimple.parser.node.PBinop)>
<soot.jimple.parser.node.ABinopExpr: void setLeft(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpr: void setRight(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ABinopExpression: java.lang.String toString()>
<soot.jimple.parser.node.ABinopExpression: soot.jimple.parser.node.PBinopExpr getBinopExpr()>
<soot.jimple.parser.node.ABinopExpression: void <init>(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABinopExpression: void setBinopExpr(soot.jimple.parser.node.PBinopExpr)>
<soot.jimple.parser.node.ABooleanBaseType: java.lang.String toString()>
<soot.jimple.parser.node.ABooleanBaseType: soot.jimple.parser.node.TBoolean getBoolean()>
<soot.jimple.parser.node.ABooleanBaseType: void <init>(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseType: void setBoolean(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: soot.jimple.parser.node.TBoolean getBoolean()>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: void <init>(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABooleanBaseTypeNoName: void setBoolean(soot.jimple.parser.node.TBoolean)>
<soot.jimple.parser.node.ABreakpointStatement: java.lang.String toString()>
<soot.jimple.parser.node.ABreakpointStatement: soot.jimple.parser.node.TBreakpoint getBreakpoint()>
<soot.jimple.parser.node.ABreakpointStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ABreakpointStatement: void <init>(soot.jimple.parser.node.TBreakpoint,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ABreakpointStatement: void setBreakpoint(soot.jimple.parser.node.TBreakpoint)>
<soot.jimple.parser.node.ABreakpointStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AByteBaseType: java.lang.String toString()>
<soot.jimple.parser.node.AByteBaseType: soot.jimple.parser.node.TByte getByte()>
<soot.jimple.parser.node.AByteBaseType: void <init>(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseType: void setByte(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.AByteBaseTypeNoName: soot.jimple.parser.node.TByte getByte()>
<soot.jimple.parser.node.AByteBaseTypeNoName: void <init>(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.AByteBaseTypeNoName: void setByte(soot.jimple.parser.node.TByte)>
<soot.jimple.parser.node.ACaseStmt: java.lang.String toString()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.PCaseLabel getCaseLabel()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.ACaseStmt: soot.jimple.parser.node.TColon getColon()>
<soot.jimple.parser.node.ACaseStmt: void <init>(soot.jimple.parser.node.PCaseLabel,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.ACaseStmt: void setCaseLabel(soot.jimple.parser.node.PCaseLabel)>
<soot.jimple.parser.node.ACaseStmt: void setColon(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ACaseStmt: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.ACastExpression: java.lang.String toString()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ACastExpression: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ACastExpression: void <init>(soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PNonvoidType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ACastExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ACastExpression: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ACastExpression: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ACastExpression: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ACatchClause: java.lang.String toString()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PClassName getName()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getFromLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getToLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.PLabelName getWithLabel()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TCatch getCatch()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TFrom getFrom()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TTo getTo()>
<soot.jimple.parser.node.ACatchClause: soot.jimple.parser.node.TWith getWith()>
<soot.jimple.parser.node.ACatchClause: void <init>(soot.jimple.parser.node.TCatch,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TFrom,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TTo,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TWith,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ACatchClause: void setCatch(soot.jimple.parser.node.TCatch)>
<soot.jimple.parser.node.ACatchClause: void setFrom(soot.jimple.parser.node.TFrom)>
<soot.jimple.parser.node.ACatchClause: void setFromLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACatchClause: void setName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.ACatchClause: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ACatchClause: void setTo(soot.jimple.parser.node.TTo)>
<soot.jimple.parser.node.ACatchClause: void setToLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACatchClause: void setWith(soot.jimple.parser.node.TWith)>
<soot.jimple.parser.node.ACatchClause: void setWithLabel(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ACharBaseType: java.lang.String toString()>
<soot.jimple.parser.node.ACharBaseType: soot.jimple.parser.node.TChar getChar()>
<soot.jimple.parser.node.ACharBaseType: void <init>(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseType: void setChar(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.ACharBaseTypeNoName: soot.jimple.parser.node.TChar getChar()>
<soot.jimple.parser.node.ACharBaseTypeNoName: void <init>(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.ACharBaseTypeNoName: void setChar(soot.jimple.parser.node.TChar)>
<soot.jimple.parser.node.AClassFileType: soot.jimple.parser.node.TClass getTheclass()>
<soot.jimple.parser.node.AClassFileType: void <init>(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClassFileType: void setTheclass(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClassNameBaseType: java.lang.String toString()>
<soot.jimple.parser.node.AClassNameBaseType: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClassNameBaseType: void <init>(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameBaseType: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: java.lang.String toString()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void <init>(soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AClassNameMultiClassNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AClassNameSingleClassNameList: java.lang.String toString()>
<soot.jimple.parser.node.AClassNameSingleClassNameList: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AClassNameSingleClassNameList: void <init>(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClassNameSingleClassNameList: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AClzzConstant: java.lang.String toString()>
<soot.jimple.parser.node.AClzzConstant: soot.jimple.parser.node.TClass getId()>
<soot.jimple.parser.node.AClzzConstant: soot.jimple.parser.node.TStringConstant getStringConstant()>
<soot.jimple.parser.node.AClzzConstant: void <init>(soot.jimple.parser.node.TClass,soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.AClzzConstant: void setId(soot.jimple.parser.node.TClass)>
<soot.jimple.parser.node.AClzzConstant: void setStringConstant(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.ACmpBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpBinop: soot.jimple.parser.node.TCmp getCmp()>
<soot.jimple.parser.node.ACmpBinop: void <init>(soot.jimple.parser.node.TCmp)>
<soot.jimple.parser.node.ACmpBinop: void setCmp(soot.jimple.parser.node.TCmp)>
<soot.jimple.parser.node.ACmpeqBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpeqBinop: soot.jimple.parser.node.TCmpeq getCmpeq()>
<soot.jimple.parser.node.ACmpeqBinop: void <init>(soot.jimple.parser.node.TCmpeq)>
<soot.jimple.parser.node.ACmpeqBinop: void setCmpeq(soot.jimple.parser.node.TCmpeq)>
<soot.jimple.parser.node.ACmpgBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpgBinop: soot.jimple.parser.node.TCmpg getCmpg()>
<soot.jimple.parser.node.ACmpgBinop: void <init>(soot.jimple.parser.node.TCmpg)>
<soot.jimple.parser.node.ACmpgBinop: void setCmpg(soot.jimple.parser.node.TCmpg)>
<soot.jimple.parser.node.ACmpgeBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpgeBinop: soot.jimple.parser.node.TCmpge getCmpge()>
<soot.jimple.parser.node.ACmpgeBinop: void <init>(soot.jimple.parser.node.TCmpge)>
<soot.jimple.parser.node.ACmpgeBinop: void setCmpge(soot.jimple.parser.node.TCmpge)>
<soot.jimple.parser.node.ACmpgtBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpgtBinop: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.ACmpgtBinop: void <init>(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.ACmpgtBinop: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.ACmplBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmplBinop: soot.jimple.parser.node.TCmpl getCmpl()>
<soot.jimple.parser.node.ACmplBinop: void <init>(soot.jimple.parser.node.TCmpl)>
<soot.jimple.parser.node.ACmplBinop: void setCmpl(soot.jimple.parser.node.TCmpl)>
<soot.jimple.parser.node.ACmpleBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpleBinop: soot.jimple.parser.node.TCmple getCmple()>
<soot.jimple.parser.node.ACmpleBinop: void <init>(soot.jimple.parser.node.TCmple)>
<soot.jimple.parser.node.ACmpleBinop: void setCmple(soot.jimple.parser.node.TCmple)>
<soot.jimple.parser.node.ACmpltBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpltBinop: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.ACmpltBinop: void <init>(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.ACmpltBinop: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.ACmpneBinop: java.lang.String toString()>
<soot.jimple.parser.node.ACmpneBinop: soot.jimple.parser.node.TCmpne getCmpne()>
<soot.jimple.parser.node.ACmpneBinop: void <init>(soot.jimple.parser.node.TCmpne)>
<soot.jimple.parser.node.ACmpneBinop: void setCmpne(soot.jimple.parser.node.TCmpne)>
<soot.jimple.parser.node.AConstantCaseLabel: java.lang.String toString()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TCase getCase()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TIntegerConstant getIntegerConstant()>
<soot.jimple.parser.node.AConstantCaseLabel: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AConstantCaseLabel: void <init>(soot.jimple.parser.node.TCase,soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AConstantCaseLabel: void setCase(soot.jimple.parser.node.TCase)>
<soot.jimple.parser.node.AConstantCaseLabel: void setIntegerConstant(soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AConstantCaseLabel: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AConstantImmediate: java.lang.String toString()>
<soot.jimple.parser.node.AConstantImmediate: soot.jimple.parser.node.PConstant getConstant()>
<soot.jimple.parser.node.AConstantImmediate: void <init>(soot.jimple.parser.node.PConstant)>
<soot.jimple.parser.node.AConstantImmediate: void setConstant(soot.jimple.parser.node.PConstant)>
<soot.jimple.parser.node.ADeclaration: java.lang.String toString()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.PJimpleType getJimpleType()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.PLocalNameList getLocalNameList()>
<soot.jimple.parser.node.ADeclaration: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ADeclaration: void <init>(soot.jimple.parser.node.PJimpleType,soot.jimple.parser.node.PLocalNameList,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ADeclaration: void setJimpleType(soot.jimple.parser.node.PJimpleType)>
<soot.jimple.parser.node.ADeclaration: void setLocalNameList(soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.ADeclaration: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ADefaultCaseLabel: java.lang.String toString()>
<soot.jimple.parser.node.ADefaultCaseLabel: soot.jimple.parser.node.TDefault getDefault()>
<soot.jimple.parser.node.ADefaultCaseLabel: void <init>(soot.jimple.parser.node.TDefault)>
<soot.jimple.parser.node.ADefaultCaseLabel: void setDefault(soot.jimple.parser.node.TDefault)>
<soot.jimple.parser.node.ADivBinop: java.lang.String toString()>
<soot.jimple.parser.node.ADivBinop: soot.jimple.parser.node.TDiv getDiv()>
<soot.jimple.parser.node.ADivBinop: void <init>(soot.jimple.parser.node.TDiv)>
<soot.jimple.parser.node.ADivBinop: void setDiv(soot.jimple.parser.node.TDiv)>
<soot.jimple.parser.node.ADoubleBaseType: java.lang.String toString()>
<soot.jimple.parser.node.ADoubleBaseType: soot.jimple.parser.node.TDouble getDouble()>
<soot.jimple.parser.node.ADoubleBaseType: void <init>(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseType: void setDouble(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: soot.jimple.parser.node.TDouble getDouble()>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: void <init>(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.ADoubleBaseTypeNoName: void setDouble(soot.jimple.parser.node.TDouble)>
<soot.jimple.parser.node.AEmptyMethodBody: java.lang.String toString()>
<soot.jimple.parser.node.AEmptyMethodBody: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AEmptyMethodBody: void <init>(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEmptyMethodBody: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEntermonitorStatement: java.lang.String toString()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.TEntermonitor getEntermonitor()>
<soot.jimple.parser.node.AEntermonitorStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AEntermonitorStatement: void <init>(soot.jimple.parser.node.TEntermonitor,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEntermonitorStatement: void setEntermonitor(soot.jimple.parser.node.TEntermonitor)>
<soot.jimple.parser.node.AEntermonitorStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AEntermonitorStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AEnumModifier: java.lang.String toString()>
<soot.jimple.parser.node.AEnumModifier: soot.jimple.parser.node.TEnum getEnum()>
<soot.jimple.parser.node.AEnumModifier: void <init>(soot.jimple.parser.node.TEnum)>
<soot.jimple.parser.node.AEnumModifier: void setEnum(soot.jimple.parser.node.TEnum)>
<soot.jimple.parser.node.AExitmonitorStatement: java.lang.String toString()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.TExitmonitor getExitmonitor()>
<soot.jimple.parser.node.AExitmonitorStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AExitmonitorStatement: void <init>(soot.jimple.parser.node.TExitmonitor,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AExitmonitorStatement: void setExitmonitor(soot.jimple.parser.node.TExitmonitor)>
<soot.jimple.parser.node.AExitmonitorStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AExitmonitorStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AExtendsClause: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AExtendsClause: soot.jimple.parser.node.TExtends getExtends()>
<soot.jimple.parser.node.AExtendsClause: void <init>(soot.jimple.parser.node.TExtends,soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AExtendsClause: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AExtendsClause: void setExtends(soot.jimple.parser.node.TExtends)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AFieldMember)>
<soot.jimple.parser.node.AFieldMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AFieldMember,soot.jimple.parser.node.AFieldMember$1)>
<soot.jimple.parser.node.AFieldMember: java.lang.String toString()>
<soot.jimple.parser.node.AFieldMember: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AFieldMember: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AFieldMember: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AFieldMember: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AFieldMember: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AFieldMember: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AFieldReference: java.lang.String toString()>
<soot.jimple.parser.node.AFieldReference: soot.jimple.parser.node.PFieldRef getFieldRef()>
<soot.jimple.parser.node.AFieldReference: void <init>(soot.jimple.parser.node.PFieldRef)>
<soot.jimple.parser.node.AFieldReference: void setFieldRef(soot.jimple.parser.node.PFieldRef)>
<soot.jimple.parser.node.AFieldSignature: java.lang.String toString()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PName getFieldName()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.AFieldSignature: soot.jimple.parser.node.TColon getFirst()>
<soot.jimple.parser.node.AFieldSignature: void <init>(soot.jimple.parser.node.TCmplt,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AFieldSignature: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AFieldSignature: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AFieldSignature: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.AFieldSignature: void setFieldName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AFieldSignature: void setFirst(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.AFieldSignature: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AFile$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFile$Modifier_Cast: void <init>(soot.jimple.parser.node.AFile)>
<soot.jimple.parser.node.AFile$Modifier_Cast: void <init>(soot.jimple.parser.node.AFile,soot.jimple.parser.node.AFile$1)>
<soot.jimple.parser.node.AFile: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PExtendsClause getExtendsClause()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PFileBody getFileBody()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PFileType getFileType()>
<soot.jimple.parser.node.AFile: soot.jimple.parser.node.PImplementsClause getImplementsClause()>
<soot.jimple.parser.node.AFile: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PFileType,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.PExtendsClause,soot.jimple.parser.node.PImplementsClause,soot.jimple.parser.node.PFileBody)>
<soot.jimple.parser.node.AFile: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AFile: void setExtendsClause(soot.jimple.parser.node.PExtendsClause)>
<soot.jimple.parser.node.AFile: void setFileBody(soot.jimple.parser.node.PFileBody)>
<soot.jimple.parser.node.AFile: void setFileType(soot.jimple.parser.node.PFileType)>
<soot.jimple.parser.node.AFile: void setImplementsClause(soot.jimple.parser.node.PImplementsClause)>
<soot.jimple.parser.node.AFileBody$Member_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFileBody$Member_Cast: void <init>(soot.jimple.parser.node.AFileBody)>
<soot.jimple.parser.node.AFileBody$Member_Cast: void <init>(soot.jimple.parser.node.AFileBody,soot.jimple.parser.node.AFileBody$1)>
<soot.jimple.parser.node.AFileBody: java.util.LinkedList getMember()>
<soot.jimple.parser.node.AFileBody: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.AFileBody: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.AFileBody: void <init>(soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPMember,soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFileBody: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.AFileBody: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFinalModifier: java.lang.String toString()>
<soot.jimple.parser.node.AFinalModifier: soot.jimple.parser.node.TFinal getFinal()>
<soot.jimple.parser.node.AFinalModifier: void <init>(soot.jimple.parser.node.TFinal)>
<soot.jimple.parser.node.AFinalModifier: void setFinal(soot.jimple.parser.node.TFinal)>
<soot.jimple.parser.node.AFixedArrayDescriptor: java.lang.String toString()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.TLBracket getLBracket()>
<soot.jimple.parser.node.AFixedArrayDescriptor: soot.jimple.parser.node.TRBracket getRBracket()>
<soot.jimple.parser.node.AFixedArrayDescriptor: void <init>(soot.jimple.parser.node.TLBracket,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setLBracket(soot.jimple.parser.node.TLBracket)>
<soot.jimple.parser.node.AFixedArrayDescriptor: void setRBracket(soot.jimple.parser.node.TRBracket)>
<soot.jimple.parser.node.AFloatBaseType: java.lang.String toString()>
<soot.jimple.parser.node.AFloatBaseType: soot.jimple.parser.node.TFloat getFloat()>
<soot.jimple.parser.node.AFloatBaseType: void <init>(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseType: void setFloat(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.AFloatBaseTypeNoName: soot.jimple.parser.node.TFloat getFloat()>
<soot.jimple.parser.node.AFloatBaseTypeNoName: void <init>(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatBaseTypeNoName: void setFloat(soot.jimple.parser.node.TFloat)>
<soot.jimple.parser.node.AFloatConstant: java.lang.String toString()>
<soot.jimple.parser.node.AFloatConstant: soot.jimple.parser.node.TFloatConstant getFloatConstant()>
<soot.jimple.parser.node.AFloatConstant: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AFloatConstant: void <init>(soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TFloatConstant)>
<soot.jimple.parser.node.AFloatConstant: void setFloatConstant(soot.jimple.parser.node.TFloatConstant)>
<soot.jimple.parser.node.AFloatConstant: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AFullIdentClassName: java.lang.String toString()>
<soot.jimple.parser.node.AFullIdentClassName: soot.jimple.parser.node.TFullIdentifier getFullIdentifier()>
<soot.jimple.parser.node.AFullIdentClassName: void <init>(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullIdentClassName: void setFullIdentifier(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AFullIdentNonvoidType)>
<soot.jimple.parser.node.AFullIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AFullIdentNonvoidType,soot.jimple.parser.node.AFullIdentNonvoidType$1)>
<soot.jimple.parser.node.AFullIdentNonvoidType: java.lang.String toString()>
<soot.jimple.parser.node.AFullIdentNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AFullIdentNonvoidType: soot.jimple.parser.node.TFullIdentifier getFullIdentifier()>
<soot.jimple.parser.node.AFullIdentNonvoidType: void <init>(soot.jimple.parser.node.TFullIdentifier,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AFullIdentNonvoidType: void setFullIdentifier(soot.jimple.parser.node.TFullIdentifier)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$CatchClause_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$Declaration_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody)>
<soot.jimple.parser.node.AFullMethodBody$Statement_Cast: void <init>(soot.jimple.parser.node.AFullMethodBody,soot.jimple.parser.node.AFullMethodBody$1)>
<soot.jimple.parser.node.AFullMethodBody: java.lang.String toString()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getCatchClause()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getDeclaration()>
<soot.jimple.parser.node.AFullMethodBody: java.util.LinkedList getStatement()>
<soot.jimple.parser.node.AFullMethodBody: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.AFullMethodBody: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.AFullMethodBody: void <init>(soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPDeclaration,soot.jimple.parser.node.XPStatement,soot.jimple.parser.node.XPCatchClause,soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AFullMethodBody: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.AFullMethodBody: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.AGotoStatement: java.lang.String toString()>
<soot.jimple.parser.node.AGotoStatement: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.AGotoStatement: void <init>(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AGotoStatement: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AGotoStmt: java.lang.String toString()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.PLabelName getLabelName()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.TGoto getGoto()>
<soot.jimple.parser.node.AGotoStmt: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AGotoStmt: void <init>(soot.jimple.parser.node.TGoto,soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AGotoStmt: void setGoto(soot.jimple.parser.node.TGoto)>
<soot.jimple.parser.node.AGotoStmt: void setLabelName(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.AGotoStmt: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentClassName: java.lang.String toString()>
<soot.jimple.parser.node.AIdentClassName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentClassName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentClassName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentName: java.lang.String toString()>
<soot.jimple.parser.node.AIdentName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AIdentNonvoidType)>
<soot.jimple.parser.node.AIdentNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AIdentNonvoidType,soot.jimple.parser.node.AIdentNonvoidType$1)>
<soot.jimple.parser.node.AIdentNonvoidType: java.lang.String toString()>
<soot.jimple.parser.node.AIdentNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AIdentNonvoidType: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.AIdentNonvoidType: void <init>(soot.jimple.parser.node.TIdentifier,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AIdentNonvoidType: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: java.lang.String toString()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TAtIdentifier getAtIdentifier()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TColonEquals getColonEquals()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TColonEquals,soot.jimple.parser.node.TAtIdentifier,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setAtIdentifier(soot.jimple.parser.node.TAtIdentifier)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setColonEquals(soot.jimple.parser.node.TColonEquals)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AIdentityNoTypeStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: java.lang.String toString()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TAtIdentifier getAtIdentifier()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TColonEquals getColonEquals()>
<soot.jimple.parser.node.AIdentityStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AIdentityStatement: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TColonEquals,soot.jimple.parser.node.TAtIdentifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: void setAtIdentifier(soot.jimple.parser.node.TAtIdentifier)>
<soot.jimple.parser.node.AIdentityStatement: void setColonEquals(soot.jimple.parser.node.TColonEquals)>
<soot.jimple.parser.node.AIdentityStatement: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AIdentityStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AIdentityStatement: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AIfStatement: java.lang.String toString()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.PBoolExpr getBoolExpr()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.PGotoStmt getGotoStmt()>
<soot.jimple.parser.node.AIfStatement: soot.jimple.parser.node.TIf getIf()>
<soot.jimple.parser.node.AIfStatement: void <init>(soot.jimple.parser.node.TIf,soot.jimple.parser.node.PBoolExpr,soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AIfStatement: void setBoolExpr(soot.jimple.parser.node.PBoolExpr)>
<soot.jimple.parser.node.AIfStatement: void setGotoStmt(soot.jimple.parser.node.PGotoStmt)>
<soot.jimple.parser.node.AIfStatement: void setIf(soot.jimple.parser.node.TIf)>
<soot.jimple.parser.node.AImmediateExpression: java.lang.String toString()>
<soot.jimple.parser.node.AImmediateExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AImmediateExpression: void <init>(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AImmediateExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AImplementsClause: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AImplementsClause: soot.jimple.parser.node.TImplements getImplements()>
<soot.jimple.parser.node.AImplementsClause: void <init>(soot.jimple.parser.node.TImplements,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AImplementsClause: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AImplementsClause: void setImplements(soot.jimple.parser.node.TImplements)>
<soot.jimple.parser.node.AInstanceofExpression: java.lang.String toString()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.AInstanceofExpression: soot.jimple.parser.node.TInstanceof getInstanceof()>
<soot.jimple.parser.node.AInstanceofExpression: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TInstanceof,soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AInstanceofExpression: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AInstanceofExpression: void setInstanceof(soot.jimple.parser.node.TInstanceof)>
<soot.jimple.parser.node.AInstanceofExpression: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AIntBaseType: java.lang.String toString()>
<soot.jimple.parser.node.AIntBaseType: soot.jimple.parser.node.TInt getInt()>
<soot.jimple.parser.node.AIntBaseType: void <init>(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseType: void setInt(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.AIntBaseTypeNoName: soot.jimple.parser.node.TInt getInt()>
<soot.jimple.parser.node.AIntBaseTypeNoName: void <init>(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntBaseTypeNoName: void setInt(soot.jimple.parser.node.TInt)>
<soot.jimple.parser.node.AIntegerConstant: java.lang.String toString()>
<soot.jimple.parser.node.AIntegerConstant: soot.jimple.parser.node.TIntegerConstant getIntegerConstant()>
<soot.jimple.parser.node.AIntegerConstant: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AIntegerConstant: void <init>(soot.jimple.parser.node.TMinus,soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AIntegerConstant: void setIntegerConstant(soot.jimple.parser.node.TIntegerConstant)>
<soot.jimple.parser.node.AIntegerConstant: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AInterfaceFileType: soot.jimple.parser.node.TInterface getInterface()>
<soot.jimple.parser.node.AInterfaceFileType: void <init>(soot.jimple.parser.node.TInterface)>
<soot.jimple.parser.node.AInterfaceFileType: void setInterface(soot.jimple.parser.node.TInterface)>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: java.lang.String toString()>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: soot.jimple.parser.node.TInterfaceinvoke getInterfaceinvoke()>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: void <init>(soot.jimple.parser.node.TInterfaceinvoke)>
<soot.jimple.parser.node.AInterfaceNonstaticInvoke: void setInterfaceinvoke(soot.jimple.parser.node.TInterfaceinvoke)>
<soot.jimple.parser.node.AInvokeExpression: java.lang.String toString()>
<soot.jimple.parser.node.AInvokeExpression: soot.jimple.parser.node.PInvokeExpr getInvokeExpr()>
<soot.jimple.parser.node.AInvokeExpression: void <init>(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeExpression: void setInvokeExpr(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeStatement: java.lang.String toString()>
<soot.jimple.parser.node.AInvokeStatement: soot.jimple.parser.node.PInvokeExpr getInvokeExpr()>
<soot.jimple.parser.node.AInvokeStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AInvokeStatement: void <init>(soot.jimple.parser.node.PInvokeExpr,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AInvokeStatement: void setInvokeExpr(soot.jimple.parser.node.PInvokeExpr)>
<soot.jimple.parser.node.AInvokeStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ALabelName: java.lang.String toString()>
<soot.jimple.parser.node.ALabelName: soot.jimple.parser.node.TIdentifier getIdentifier()>
<soot.jimple.parser.node.ALabelName: void <init>(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.ALabelName: void setIdentifier(soot.jimple.parser.node.TIdentifier)>
<soot.jimple.parser.node.ALabelStatement: java.lang.String toString()>
<soot.jimple.parser.node.ALabelStatement: soot.jimple.parser.node.PLabelName getLabelName()>
<soot.jimple.parser.node.ALabelStatement: soot.jimple.parser.node.TColon getColon()>
<soot.jimple.parser.node.ALabelStatement: void <init>(soot.jimple.parser.node.PLabelName,soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ALabelStatement: void setColon(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.ALabelStatement: void setLabelName(soot.jimple.parser.node.PLabelName)>
<soot.jimple.parser.node.ALengthofUnop: java.lang.String toString()>
<soot.jimple.parser.node.ALengthofUnop: soot.jimple.parser.node.TLengthof getLengthof()>
<soot.jimple.parser.node.ALengthofUnop: void <init>(soot.jimple.parser.node.TLengthof)>
<soot.jimple.parser.node.ALengthofUnop: void setLengthof(soot.jimple.parser.node.TLengthof)>
<soot.jimple.parser.node.ALocalFieldRef: java.lang.String toString()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.PFieldSignature getFieldSignature()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALocalFieldRef: soot.jimple.parser.node.TDot getDot()>
<soot.jimple.parser.node.ALocalFieldRef: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TDot,soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ALocalFieldRef: void setDot(soot.jimple.parser.node.TDot)>
<soot.jimple.parser.node.ALocalFieldRef: void setFieldSignature(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ALocalFieldRef: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalImmediate: java.lang.String toString()>
<soot.jimple.parser.node.ALocalImmediate: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALocalImmediate: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalImmediate: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalName: java.lang.String toString()>
<soot.jimple.parser.node.ALocalName: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.ALocalName: void <init>(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ALocalName: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ALocalVariable: java.lang.String toString()>
<soot.jimple.parser.node.ALocalVariable: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ALocalVariable: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALocalVariable: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ALongBaseType: java.lang.String toString()>
<soot.jimple.parser.node.ALongBaseType: soot.jimple.parser.node.TLong getLong()>
<soot.jimple.parser.node.ALongBaseType: void <init>(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseType: void setLong(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.ALongBaseTypeNoName: soot.jimple.parser.node.TLong getLong()>
<soot.jimple.parser.node.ALongBaseTypeNoName: void <init>(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALongBaseTypeNoName: void setLong(soot.jimple.parser.node.TLong)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ALookupswitchStatement)>
<soot.jimple.parser.node.ALookupswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ALookupswitchStatement,soot.jimple.parser.node.ALookupswitchStatement$1)>
<soot.jimple.parser.node.ALookupswitchStatement: java.lang.String toString()>
<soot.jimple.parser.node.ALookupswitchStatement: java.util.LinkedList getCaseStmt()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TLookupswitch getLookupswitch()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ALookupswitchStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ALookupswitchStatement: void <init>(soot.jimple.parser.node.TLookupswitch,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.TRBrace,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ALookupswitchStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ALookupswitchStatement: void setLookupswitch(soot.jimple.parser.node.TLookupswitch)>
<soot.jimple.parser.node.ALookupswitchStatement: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.ALookupswitchStatement: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ALookupswitchStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AMethodMember)>
<soot.jimple.parser.node.AMethodMember$Modifier_Cast: void <init>(soot.jimple.parser.node.AMethodMember,soot.jimple.parser.node.AMethodMember$1)>
<soot.jimple.parser.node.AMethodMember: java.lang.String toString()>
<soot.jimple.parser.node.AMethodMember: java.util.LinkedList getModifier()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PMethodBody getMethodBody()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PName getName()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PThrowsClause getThrowsClause()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMethodMember: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMethodMember: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PParameterList,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.PThrowsClause,soot.jimple.parser.node.PMethodBody)>
<soot.jimple.parser.node.AMethodMember: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMethodMember: void setMethodBody(soot.jimple.parser.node.PMethodBody)>
<soot.jimple.parser.node.AMethodMember: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMethodMember: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMethodMember: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMethodMember: void setThrowsClause(soot.jimple.parser.node.PThrowsClause)>
<soot.jimple.parser.node.AMethodMember: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AMethodSignature: java.lang.String toString()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PClassName getClassName()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PName getMethodName()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.PType getType()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TCmpgt getCmpgt()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TCmplt getCmplt()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TColon getFirst()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMethodSignature: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMethodSignature: void <init>(soot.jimple.parser.node.TCmplt,soot.jimple.parser.node.PClassName,soot.jimple.parser.node.TColon,soot.jimple.parser.node.PType,soot.jimple.parser.node.PName,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PParameterList,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AMethodSignature: void setClassName(soot.jimple.parser.node.PClassName)>
<soot.jimple.parser.node.AMethodSignature: void setCmpgt(soot.jimple.parser.node.TCmpgt)>
<soot.jimple.parser.node.AMethodSignature: void setCmplt(soot.jimple.parser.node.TCmplt)>
<soot.jimple.parser.node.AMethodSignature: void setFirst(soot.jimple.parser.node.TColon)>
<soot.jimple.parser.node.AMethodSignature: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMethodSignature: void setMethodName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMethodSignature: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMethodSignature: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMethodSignature: void setType(soot.jimple.parser.node.PType)>
<soot.jimple.parser.node.AMinusBinop: java.lang.String toString()>
<soot.jimple.parser.node.AMinusBinop: soot.jimple.parser.node.TMinus getMinus()>
<soot.jimple.parser.node.AMinusBinop: void <init>(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AMinusBinop: void setMinus(soot.jimple.parser.node.TMinus)>
<soot.jimple.parser.node.AModBinop: java.lang.String toString()>
<soot.jimple.parser.node.AModBinop: soot.jimple.parser.node.TMod getMod()>
<soot.jimple.parser.node.AModBinop: void <init>(soot.jimple.parser.node.TMod)>
<soot.jimple.parser.node.AModBinop: void setMod(soot.jimple.parser.node.TMod)>
<soot.jimple.parser.node.AMultBinop: java.lang.String toString()>
<soot.jimple.parser.node.AMultBinop: soot.jimple.parser.node.TMult getMult()>
<soot.jimple.parser.node.AMultBinop: void <init>(soot.jimple.parser.node.TMult)>
<soot.jimple.parser.node.AMultBinop: void setMult(soot.jimple.parser.node.TMult)>
<soot.jimple.parser.node.AMultiArgList: java.lang.String toString()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AMultiArgList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AMultiArgList: void <init>(soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AMultiArgList: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AMultiArgList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiArgList: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AMultiLocalNameList: java.lang.String toString()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.PLocalNameList getLocalNameList()>
<soot.jimple.parser.node.AMultiLocalNameList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AMultiLocalNameList: void <init>(soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.AMultiLocalNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiLocalNameList: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.AMultiLocalNameList: void setLocalNameList(soot.jimple.parser.node.PLocalNameList)>
<soot.jimple.parser.node.AMultiNameList: void <init>(soot.jimple.parser.node.PName,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PNameList)>
<soot.jimple.parser.node.AMultiNameList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiNameList: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.AMultiNameList: void setNameList(soot.jimple.parser.node.PNameList)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: void <init>(soot.jimple.parser.node.AMultiNewExpr)>
<soot.jimple.parser.node.AMultiNewExpr$ArrayDescriptor_Cast: void <init>(soot.jimple.parser.node.AMultiNewExpr,soot.jimple.parser.node.AMultiNewExpr$1)>
<soot.jimple.parser.node.AMultiNewExpr: java.lang.String toString()>
<soot.jimple.parser.node.AMultiNewExpr: java.util.LinkedList getArrayDescriptor()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.PBaseType getBaseType()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TNewmultiarray getNewmultiarray()>
<soot.jimple.parser.node.AMultiNewExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AMultiNewExpr: void <init>(soot.jimple.parser.node.TNewmultiarray,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PBaseType,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.XPArrayDescriptor)>
<soot.jimple.parser.node.AMultiNewExpr: void setBaseType(soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.AMultiNewExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AMultiNewExpr: void setNewmultiarray(soot.jimple.parser.node.TNewmultiarray)>
<soot.jimple.parser.node.AMultiNewExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AMultiParameterList: java.lang.String toString()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.PParameter getParameter()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.PParameterList getParameterList()>
<soot.jimple.parser.node.AMultiParameterList: soot.jimple.parser.node.TComma getComma()>
<soot.jimple.parser.node.AMultiParameterList: void <init>(soot.jimple.parser.node.PParameter,soot.jimple.parser.node.TComma,soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.AMultiParameterList: void setComma(soot.jimple.parser.node.TComma)>
<soot.jimple.parser.node.AMultiParameterList: void setParameter(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.AMultiParameterList: void setParameterList(soot.jimple.parser.node.PParameterList)>
<soot.jimple.parser.node.ANativeModifier: java.lang.String toString()>
<soot.jimple.parser.node.ANativeModifier: soot.jimple.parser.node.TNative getNative()>
<soot.jimple.parser.node.ANativeModifier: void <init>(soot.jimple.parser.node.TNative)>
<soot.jimple.parser.node.ANativeModifier: void setNative(soot.jimple.parser.node.TNative)>
<soot.jimple.parser.node.ANegUnop: java.lang.String toString()>
<soot.jimple.parser.node.ANegUnop: soot.jimple.parser.node.TNeg getNeg()>
<soot.jimple.parser.node.ANegUnop: void <init>(soot.jimple.parser.node.TNeg)>
<soot.jimple.parser.node.ANegUnop: void setNeg(soot.jimple.parser.node.TNeg)>
<soot.jimple.parser.node.ANewExpression: java.lang.String toString()>
<soot.jimple.parser.node.ANewExpression: soot.jimple.parser.node.PNewExpr getNewExpr()>
<soot.jimple.parser.node.ANewExpression: void <init>(soot.jimple.parser.node.PNewExpr)>
<soot.jimple.parser.node.ANewExpression: void setNewExpr(soot.jimple.parser.node.PNewExpr)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: java.lang.String toString()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PMethodSignature getMethodSignature()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.PNonstaticInvoke getNonstaticInvoke()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TDot getDot()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void <init>(soot.jimple.parser.node.PNonstaticInvoke,soot.jimple.parser.node.PLocalName,soot.jimple.parser.node.TDot,soot.jimple.parser.node.PMethodSignature,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PArgList,soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setDot(soot.jimple.parser.node.TDot)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setMethodSignature(soot.jimple.parser.node.PMethodSignature)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setNonstaticInvoke(soot.jimple.parser.node.PNonstaticInvoke)>
<soot.jimple.parser.node.ANonstaticInvokeExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ANonvoidJimpleType: java.lang.String toString()>
<soot.jimple.parser.node.ANonvoidJimpleType: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ANonvoidJimpleType: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANonvoidJimpleType: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANopStatement: java.lang.String toString()>
<soot.jimple.parser.node.ANopStatement: soot.jimple.parser.node.TNop getNop()>
<soot.jimple.parser.node.ANopStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ANopStatement: void <init>(soot.jimple.parser.node.TNop,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ANopStatement: void setNop(soot.jimple.parser.node.TNop)>
<soot.jimple.parser.node.ANopStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ANovoidType: java.lang.String toString()>
<soot.jimple.parser.node.ANovoidType: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.ANovoidType: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANovoidType: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.ANullBaseType: java.lang.String toString()>
<soot.jimple.parser.node.ANullBaseType: soot.jimple.parser.node.TNullType getNullType()>
<soot.jimple.parser.node.ANullBaseType: void <init>(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseType: void setNullType(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.ANullBaseTypeNoName: soot.jimple.parser.node.TNullType getNullType()>
<soot.jimple.parser.node.ANullBaseTypeNoName: void <init>(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullBaseTypeNoName: void setNullType(soot.jimple.parser.node.TNullType)>
<soot.jimple.parser.node.ANullConstant: java.lang.String toString()>
<soot.jimple.parser.node.ANullConstant: soot.jimple.parser.node.TNull getNull()>
<soot.jimple.parser.node.ANullConstant: void <init>(soot.jimple.parser.node.TNull)>
<soot.jimple.parser.node.ANullConstant: void setNull(soot.jimple.parser.node.TNull)>
<soot.jimple.parser.node.AOrBinop: java.lang.String toString()>
<soot.jimple.parser.node.AOrBinop: soot.jimple.parser.node.TOr getOr()>
<soot.jimple.parser.node.AOrBinop: void <init>(soot.jimple.parser.node.TOr)>
<soot.jimple.parser.node.AOrBinop: void setOr(soot.jimple.parser.node.TOr)>
<soot.jimple.parser.node.AParameter: java.lang.String toString()>
<soot.jimple.parser.node.AParameter: soot.jimple.parser.node.PNonvoidType getNonvoidType()>
<soot.jimple.parser.node.AParameter: void <init>(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.AParameter: void setNonvoidType(soot.jimple.parser.node.PNonvoidType)>
<soot.jimple.parser.node.APlusBinop: java.lang.String toString()>
<soot.jimple.parser.node.APlusBinop: soot.jimple.parser.node.TPlus getPlus()>
<soot.jimple.parser.node.APlusBinop: void <init>(soot.jimple.parser.node.TPlus)>
<soot.jimple.parser.node.APlusBinop: void setPlus(soot.jimple.parser.node.TPlus)>
<soot.jimple.parser.node.APrivateModifier: java.lang.String toString()>
<soot.jimple.parser.node.APrivateModifier: soot.jimple.parser.node.TPrivate getPrivate()>
<soot.jimple.parser.node.APrivateModifier: void <init>(soot.jimple.parser.node.TPrivate)>
<soot.jimple.parser.node.APrivateModifier: void setPrivate(soot.jimple.parser.node.TPrivate)>
<soot.jimple.parser.node.AProtectedModifier: java.lang.String toString()>
<soot.jimple.parser.node.AProtectedModifier: soot.jimple.parser.node.TProtected getProtected()>
<soot.jimple.parser.node.AProtectedModifier: void <init>(soot.jimple.parser.node.TProtected)>
<soot.jimple.parser.node.AProtectedModifier: void setProtected(soot.jimple.parser.node.TProtected)>
<soot.jimple.parser.node.APublicModifier: java.lang.String toString()>
<soot.jimple.parser.node.APublicModifier: soot.jimple.parser.node.TPublic getPublic()>
<soot.jimple.parser.node.APublicModifier: void <init>(soot.jimple.parser.node.TPublic)>
<soot.jimple.parser.node.APublicModifier: void setPublic(soot.jimple.parser.node.TPublic)>
<soot.jimple.parser.node.AQuotedClassName: java.lang.String toString()>
<soot.jimple.parser.node.AQuotedClassName: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AQuotedClassName: void <init>(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedClassName: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedName: java.lang.String toString()>
<soot.jimple.parser.node.AQuotedName: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AQuotedName: void <init>(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedName: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AQuotedNonvoidType)>
<soot.jimple.parser.node.AQuotedNonvoidType$ArrayBrackets_Cast: void <init>(soot.jimple.parser.node.AQuotedNonvoidType,soot.jimple.parser.node.AQuotedNonvoidType$1)>
<soot.jimple.parser.node.AQuotedNonvoidType: java.lang.String toString()>
<soot.jimple.parser.node.AQuotedNonvoidType: java.util.LinkedList getArrayBrackets()>
<soot.jimple.parser.node.AQuotedNonvoidType: soot.jimple.parser.node.TQuotedName getQuotedName()>
<soot.jimple.parser.node.AQuotedNonvoidType: void <init>(soot.jimple.parser.node.TQuotedName,soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.AQuotedNonvoidType: void setQuotedName(soot.jimple.parser.node.TQuotedName)>
<soot.jimple.parser.node.AReferenceExpression: java.lang.String toString()>
<soot.jimple.parser.node.AReferenceExpression: soot.jimple.parser.node.PReference getReference()>
<soot.jimple.parser.node.AReferenceExpression: void <init>(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceExpression: void setReference(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceVariable: java.lang.String toString()>
<soot.jimple.parser.node.AReferenceVariable: soot.jimple.parser.node.PReference getReference()>
<soot.jimple.parser.node.AReferenceVariable: void <init>(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.AReferenceVariable: void setReference(soot.jimple.parser.node.PReference)>
<soot.jimple.parser.node.ARetStatement: java.lang.String toString()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.TRet getRet()>
<soot.jimple.parser.node.ARetStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ARetStatement: void <init>(soot.jimple.parser.node.TRet,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ARetStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ARetStatement: void setRet(soot.jimple.parser.node.TRet)>
<soot.jimple.parser.node.ARetStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AReturnStatement: java.lang.String toString()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.TReturn getReturn()>
<soot.jimple.parser.node.AReturnStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AReturnStatement: void <init>(soot.jimple.parser.node.TReturn,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AReturnStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AReturnStatement: void setReturn(soot.jimple.parser.node.TReturn)>
<soot.jimple.parser.node.AReturnStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AShlBinop: java.lang.String toString()>
<soot.jimple.parser.node.AShlBinop: soot.jimple.parser.node.TShl getShl()>
<soot.jimple.parser.node.AShlBinop: void <init>(soot.jimple.parser.node.TShl)>
<soot.jimple.parser.node.AShlBinop: void setShl(soot.jimple.parser.node.TShl)>
<soot.jimple.parser.node.AShortBaseType: java.lang.String toString()>
<soot.jimple.parser.node.AShortBaseType: soot.jimple.parser.node.TShort getShort()>
<soot.jimple.parser.node.AShortBaseType: void <init>(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseType: void setShort(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseTypeNoName: java.lang.String toString()>
<soot.jimple.parser.node.AShortBaseTypeNoName: soot.jimple.parser.node.TShort getShort()>
<soot.jimple.parser.node.AShortBaseTypeNoName: void <init>(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShortBaseTypeNoName: void setShort(soot.jimple.parser.node.TShort)>
<soot.jimple.parser.node.AShrBinop: java.lang.String toString()>
<soot.jimple.parser.node.AShrBinop: soot.jimple.parser.node.TShr getShr()>
<soot.jimple.parser.node.AShrBinop: void <init>(soot.jimple.parser.node.TShr)>
<soot.jimple.parser.node.AShrBinop: void setShr(soot.jimple.parser.node.TShr)>
<soot.jimple.parser.node.ASigFieldRef: java.lang.String toString()>
<soot.jimple.parser.node.ASigFieldRef: soot.jimple.parser.node.PFieldSignature getFieldSignature()>
<soot.jimple.parser.node.ASigFieldRef: void <init>(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ASigFieldRef: void setFieldSignature(soot.jimple.parser.node.PFieldSignature)>
<soot.jimple.parser.node.ASimpleNewExpr: java.lang.String toString()>
<soot.jimple.parser.node.ASimpleNewExpr: soot.jimple.parser.node.PBaseType getBaseType()>
<soot.jimple.parser.node.ASimpleNewExpr: soot.jimple.parser.node.TNew getNew()>
<soot.jimple.parser.node.ASimpleNewExpr: void <init>(soot.jimple.parser.node.TNew,soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.ASimpleNewExpr: void setBaseType(soot.jimple.parser.node.PBaseType)>
<soot.jimple.parser.node.ASimpleNewExpr: void setNew(soot.jimple.parser.node.TNew)>
<soot.jimple.parser.node.ASingleArgList: java.lang.String toString()>
<soot.jimple.parser.node.ASingleArgList: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ASingleArgList: void <init>(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ASingleArgList: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ASingleLocalNameList: java.lang.String toString()>
<soot.jimple.parser.node.ASingleLocalNameList: soot.jimple.parser.node.PLocalName getLocalName()>
<soot.jimple.parser.node.ASingleLocalNameList: void <init>(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ASingleLocalNameList: void setLocalName(soot.jimple.parser.node.PLocalName)>
<soot.jimple.parser.node.ASingleNameList: void <init>(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ASingleNameList: void setName(soot.jimple.parser.node.PName)>
<soot.jimple.parser.node.ASingleParameterList: java.lang.String toString()>
<soot.jimple.parser.node.ASingleParameterList: soot.jimple.parser.node.PParameter getParameter()>
<soot.jimple.parser.node.ASingleParameterList: void <init>(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.ASingleParameterList: void setParameter(soot.jimple.parser.node.PParameter)>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: java.lang.String toString()>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: soot.jimple.parser.node.TSpecialinvoke getSpecialinvoke()>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: void <init>(soot.jimple.parser.node.TSpecialinvoke)>
<soot.jimple.parser.node.ASpecialNonstaticInvoke: void setSpecialinvoke(soot.jimple.parser.node.TSpecialinvoke)>
<soot.jimple.parser.node.AStaticInvokeExpr: java.lang.String toString()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.PArgList getArgList()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.PMethodSignature getMethodSignature()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.AStaticInvokeExpr: soot.jimple.parser.node.TStaticinvoke getStaticinvoke()>
<soot.jimple.parser.node.AStaticInvokeExpr: void <init>(soot.jimple.parser.node.TStaticinvoke,soot.jimple.parser.node.PMethodSignature,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PArgList,soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setArgList(soot.jimple.parser.node.PArgList)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setMethodSignature(soot.jimple.parser.node.PMethodSignature)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.AStaticInvokeExpr: void setStaticinvoke(soot.jimple.parser.node.TStaticinvoke)>
<soot.jimple.parser.node.AStaticModifier: java.lang.String toString()>
<soot.jimple.parser.node.AStaticModifier: soot.jimple.parser.node.TStatic getStatic()>
<soot.jimple.parser.node.AStaticModifier: void <init>(soot.jimple.parser.node.TStatic)>
<soot.jimple.parser.node.AStaticModifier: void setStatic(soot.jimple.parser.node.TStatic)>
<soot.jimple.parser.node.AStrictfpModifier: java.lang.String toString()>
<soot.jimple.parser.node.AStrictfpModifier: soot.jimple.parser.node.TStrictfp getStrictfp()>
<soot.jimple.parser.node.AStrictfpModifier: void <init>(soot.jimple.parser.node.TStrictfp)>
<soot.jimple.parser.node.AStrictfpModifier: void setStrictfp(soot.jimple.parser.node.TStrictfp)>
<soot.jimple.parser.node.AStringConstant: java.lang.String toString()>
<soot.jimple.parser.node.AStringConstant: soot.jimple.parser.node.TStringConstant getStringConstant()>
<soot.jimple.parser.node.AStringConstant: void <init>(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.AStringConstant: void setStringConstant(soot.jimple.parser.node.TStringConstant)>
<soot.jimple.parser.node.ASynchronizedModifier: java.lang.String toString()>
<soot.jimple.parser.node.ASynchronizedModifier: soot.jimple.parser.node.TSynchronized getSynchronized()>
<soot.jimple.parser.node.ASynchronizedModifier: void <init>(soot.jimple.parser.node.TSynchronized)>
<soot.jimple.parser.node.ASynchronizedModifier: void setSynchronized(soot.jimple.parser.node.TSynchronized)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ATableswitchStatement)>
<soot.jimple.parser.node.ATableswitchStatement$CaseStmt_Cast: void <init>(soot.jimple.parser.node.ATableswitchStatement,soot.jimple.parser.node.ATableswitchStatement$1)>
<soot.jimple.parser.node.ATableswitchStatement: java.lang.String toString()>
<soot.jimple.parser.node.ATableswitchStatement: java.util.LinkedList getCaseStmt()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TLBrace getLBrace()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TLParen getLParen()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TRBrace getRBrace()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TRParen getRParen()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.ATableswitchStatement: soot.jimple.parser.node.TTableswitch getTableswitch()>
<soot.jimple.parser.node.ATableswitchStatement: void <init>(soot.jimple.parser.node.TTableswitch,soot.jimple.parser.node.TLParen,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TRParen,soot.jimple.parser.node.TLBrace,soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.TRBrace,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ATableswitchStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.ATableswitchStatement: void setLBrace(soot.jimple.parser.node.TLBrace)>
<soot.jimple.parser.node.ATableswitchStatement: void setLParen(soot.jimple.parser.node.TLParen)>
<soot.jimple.parser.node.ATableswitchStatement: void setRBrace(soot.jimple.parser.node.TRBrace)>
<soot.jimple.parser.node.ATableswitchStatement: void setRParen(soot.jimple.parser.node.TRParen)>
<soot.jimple.parser.node.ATableswitchStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.ATableswitchStatement: void setTableswitch(soot.jimple.parser.node.TTableswitch)>
<soot.jimple.parser.node.AThrowStatement: java.lang.String toString()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.TSemicolon getSemicolon()>
<soot.jimple.parser.node.AThrowStatement: soot.jimple.parser.node.TThrow getThrow()>
<soot.jimple.parser.node.AThrowStatement: void <init>(soot.jimple.parser.node.TThrow,soot.jimple.parser.node.PImmediate,soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AThrowStatement: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AThrowStatement: void setSemicolon(soot.jimple.parser.node.TSemicolon)>
<soot.jimple.parser.node.AThrowStatement: void setThrow(soot.jimple.parser.node.TThrow)>
<soot.jimple.parser.node.AThrowsClause: java.lang.String toString()>
<soot.jimple.parser.node.AThrowsClause: soot.jimple.parser.node.PClassNameList getClassNameList()>
<soot.jimple.parser.node.AThrowsClause: soot.jimple.parser.node.TThrows getThrows()>
<soot.jimple.parser.node.AThrowsClause: void <init>(soot.jimple.parser.node.TThrows,soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AThrowsClause: void setClassNameList(soot.jimple.parser.node.PClassNameList)>
<soot.jimple.parser.node.AThrowsClause: void setThrows(soot.jimple.parser.node.TThrows)>
<soot.jimple.parser.node.ATransientModifier: java.lang.String toString()>
<soot.jimple.parser.node.ATransientModifier: soot.jimple.parser.node.TTransient getTransient()>
<soot.jimple.parser.node.ATransientModifier: void <init>(soot.jimple.parser.node.TTransient)>
<soot.jimple.parser.node.ATransientModifier: void setTransient(soot.jimple.parser.node.TTransient)>
<soot.jimple.parser.node.AUnknownJimpleType: java.lang.String toString()>
<soot.jimple.parser.node.AUnknownJimpleType: soot.jimple.parser.node.TUnknown getUnknown()>
<soot.jimple.parser.node.AUnknownJimpleType: void <init>(soot.jimple.parser.node.TUnknown)>
<soot.jimple.parser.node.AUnknownJimpleType: void setUnknown(soot.jimple.parser.node.TUnknown)>
<soot.jimple.parser.node.AUnopBoolExpr: java.lang.String toString()>
<soot.jimple.parser.node.AUnopBoolExpr: soot.jimple.parser.node.PUnopExpr getUnopExpr()>
<soot.jimple.parser.node.AUnopBoolExpr: void <init>(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopBoolExpr: void setUnopExpr(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopExpr: java.lang.String toString()>
<soot.jimple.parser.node.AUnopExpr: soot.jimple.parser.node.PImmediate getImmediate()>
<soot.jimple.parser.node.AUnopExpr: soot.jimple.parser.node.PUnop getUnop()>
<soot.jimple.parser.node.AUnopExpr: void <init>(soot.jimple.parser.node.PUnop,soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AUnopExpr: void setImmediate(soot.jimple.parser.node.PImmediate)>
<soot.jimple.parser.node.AUnopExpr: void setUnop(soot.jimple.parser.node.PUnop)>
<soot.jimple.parser.node.AUnopExpression: java.lang.String toString()>
<soot.jimple.parser.node.AUnopExpression: soot.jimple.parser.node.PUnopExpr getUnopExpr()>
<soot.jimple.parser.node.AUnopExpression: void <init>(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUnopExpression: void setUnopExpr(soot.jimple.parser.node.PUnopExpr)>
<soot.jimple.parser.node.AUshrBinop: java.lang.String toString()>
<soot.jimple.parser.node.AUshrBinop: soot.jimple.parser.node.TUshr getUshr()>
<soot.jimple.parser.node.AUshrBinop: void <init>(soot.jimple.parser.node.TUshr)>
<soot.jimple.parser.node.AUshrBinop: void setUshr(soot.jimple.parser.node.TUshr)>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: java.lang.String toString()>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: soot.jimple.parser.node.TVirtualinvoke getVirtualinvoke()>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: void <init>(soot.jimple.parser.node.TVirtualinvoke)>
<soot.jimple.parser.node.AVirtualNonstaticInvoke: void setVirtualinvoke(soot.jimple.parser.node.TVirtualinvoke)>
<soot.jimple.parser.node.AVoidType: java.lang.String toString()>
<soot.jimple.parser.node.AVoidType: soot.jimple.parser.node.TVoid getVoid()>
<soot.jimple.parser.node.AVoidType: void <init>(soot.jimple.parser.node.TVoid)>
<soot.jimple.parser.node.AVoidType: void setVoid(soot.jimple.parser.node.TVoid)>
<soot.jimple.parser.node.AVolatileModifier: java.lang.String toString()>
<soot.jimple.parser.node.AVolatileModifier: soot.jimple.parser.node.TVolatile getVolatile()>
<soot.jimple.parser.node.AVolatileModifier: void <init>(soot.jimple.parser.node.TVolatile)>
<soot.jimple.parser.node.AVolatileModifier: void setVolatile(soot.jimple.parser.node.TVolatile)>
<soot.jimple.parser.node.AXorBinop: java.lang.String toString()>
<soot.jimple.parser.node.AXorBinop: soot.jimple.parser.node.TXor getXor()>
<soot.jimple.parser.node.AXorBinop: void <init>(soot.jimple.parser.node.TXor)>
<soot.jimple.parser.node.AXorBinop: void setXor(soot.jimple.parser.node.TXor)>
<soot.jimple.parser.node.Node: java.lang.String toString(soot.jimple.parser.node.Node)>
<soot.jimple.parser.node.Node: soot.jimple.parser.node.Node parent()>
<soot.jimple.parser.node.Node: void parent(soot.jimple.parser.node.Node)>
<soot.jimple.parser.node.NodeCast: java.lang.Object cast(java.lang.Object)>
<soot.jimple.parser.node.Start: soot.jimple.parser.node.EOF getEOF()>
<soot.jimple.parser.node.Start: soot.jimple.parser.node.PFile getPFile()>
<soot.jimple.parser.node.Start: void <init>(soot.jimple.parser.node.PFile,soot.jimple.parser.node.EOF)>
<soot.jimple.parser.node.Start: void setEOF(soot.jimple.parser.node.EOF)>
<soot.jimple.parser.node.Start: void setPFile(soot.jimple.parser.node.PFile)>
<soot.jimple.parser.node.TAtIdentifier: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TBoolConstant: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TFloatConstant: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TFullIdentifier: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TIdentifier: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TIgnored: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TIntegerConstant: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TQuotedName: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.TStringConstant: void <init>(java.lang.String,int,int)>
<soot.jimple.parser.node.Token: java.lang.String getText()>
<soot.jimple.parser.node.Token: void setText(java.lang.String)>
<soot.jimple.parser.node.TypedLinkedList$TypedLinkedListIterator: java.lang.Object next()>
<soot.jimple.parser.node.TypedLinkedList$TypedLinkedListIterator: java.lang.Object previous()>
<soot.jimple.parser.node.TypedLinkedList$TypedLinkedListIterator: void <init>(soot.jimple.parser.node.TypedLinkedList,java.util.ListIterator)>
<soot.jimple.parser.node.TypedLinkedList: boolean addAll(int,java.util.Collection)>
<soot.jimple.parser.node.TypedLinkedList: java.util.ListIterator listIterator(int)>
<soot.jimple.parser.node.TypedLinkedList: void <init>(soot.jimple.parser.node.Cast)>
<soot.jimple.parser.node.X1PArrayBrackets: soot.jimple.parser.node.PArrayBrackets getPArrayBrackets()>
<soot.jimple.parser.node.X1PArrayBrackets: soot.jimple.parser.node.XPArrayBrackets getXPArrayBrackets()>
<soot.jimple.parser.node.X1PArrayBrackets: void <init>(soot.jimple.parser.node.XPArrayBrackets,soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X1PArrayBrackets: void setPArrayBrackets(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X1PArrayBrackets: void setXPArrayBrackets(soot.jimple.parser.node.XPArrayBrackets)>
<soot.jimple.parser.node.X1PArrayDescriptor: soot.jimple.parser.node.PArrayDescriptor getPArrayDescriptor()>
<soot.jimple.parser.node.X1PArrayDescriptor: soot.jimple.parser.node.XPArrayDescriptor getXPArrayDescriptor()>
<soot.jimple.parser.node.X1PArrayDescriptor: void <init>(soot.jimple.parser.node.XPArrayDescriptor,soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X1PArrayDescriptor: void setPArrayDescriptor(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X1PArrayDescriptor: void setXPArrayDescriptor(soot.jimple.parser.node.XPArrayDescriptor)>
<soot.jimple.parser.node.X1PCaseStmt: soot.jimple.parser.node.PCaseStmt getPCaseStmt()>
<soot.jimple.parser.node.X1PCaseStmt: soot.jimple.parser.node.XPCaseStmt getXPCaseStmt()>
<soot.jimple.parser.node.X1PCaseStmt: void <init>(soot.jimple.parser.node.XPCaseStmt,soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X1PCaseStmt: void setPCaseStmt(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X1PCaseStmt: void setXPCaseStmt(soot.jimple.parser.node.XPCaseStmt)>
<soot.jimple.parser.node.X1PCatchClause: soot.jimple.parser.node.PCatchClause getPCatchClause()>
<soot.jimple.parser.node.X1PCatchClause: soot.jimple.parser.node.XPCatchClause getXPCatchClause()>
<soot.jimple.parser.node.X1PCatchClause: void <init>(soot.jimple.parser.node.XPCatchClause,soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X1PCatchClause: void setPCatchClause(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X1PCatchClause: void setXPCatchClause(soot.jimple.parser.node.XPCatchClause)>
<soot.jimple.parser.node.X1PDeclaration: soot.jimple.parser.node.PDeclaration getPDeclaration()>
<soot.jimple.parser.node.X1PDeclaration: soot.jimple.parser.node.XPDeclaration getXPDeclaration()>
<soot.jimple.parser.node.X1PDeclaration: void <init>(soot.jimple.parser.node.XPDeclaration,soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X1PDeclaration: void setPDeclaration(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X1PDeclaration: void setXPDeclaration(soot.jimple.parser.node.XPDeclaration)>
<soot.jimple.parser.node.X1PMember: soot.jimple.parser.node.PMember getPMember()>
<soot.jimple.parser.node.X1PMember: soot.jimple.parser.node.XPMember getXPMember()>
<soot.jimple.parser.node.X1PMember: void <init>(soot.jimple.parser.node.XPMember,soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X1PMember: void setPMember(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X1PMember: void setXPMember(soot.jimple.parser.node.XPMember)>
<soot.jimple.parser.node.X1PModifier: soot.jimple.parser.node.PModifier getPModifier()>
<soot.jimple.parser.node.X1PModifier: soot.jimple.parser.node.XPModifier getXPModifier()>
<soot.jimple.parser.node.X1PModifier: void <init>(soot.jimple.parser.node.XPModifier,soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X1PModifier: void setPModifier(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X1PModifier: void setXPModifier(soot.jimple.parser.node.XPModifier)>
<soot.jimple.parser.node.X1PStatement: soot.jimple.parser.node.PStatement getPStatement()>
<soot.jimple.parser.node.X1PStatement: soot.jimple.parser.node.XPStatement getXPStatement()>
<soot.jimple.parser.node.X1PStatement: void <init>(soot.jimple.parser.node.XPStatement,soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X1PStatement: void setPStatement(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X1PStatement: void setXPStatement(soot.jimple.parser.node.XPStatement)>
<soot.jimple.parser.node.X2PArrayBrackets: soot.jimple.parser.node.PArrayBrackets getPArrayBrackets()>
<soot.jimple.parser.node.X2PArrayBrackets: void <init>(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X2PArrayBrackets: void setPArrayBrackets(soot.jimple.parser.node.PArrayBrackets)>
<soot.jimple.parser.node.X2PArrayDescriptor: soot.jimple.parser.node.PArrayDescriptor getPArrayDescriptor()>
<soot.jimple.parser.node.X2PArrayDescriptor: void <init>(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X2PArrayDescriptor: void setPArrayDescriptor(soot.jimple.parser.node.PArrayDescriptor)>
<soot.jimple.parser.node.X2PCaseStmt: soot.jimple.parser.node.PCaseStmt getPCaseStmt()>
<soot.jimple.parser.node.X2PCaseStmt: void <init>(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X2PCaseStmt: void setPCaseStmt(soot.jimple.parser.node.PCaseStmt)>
<soot.jimple.parser.node.X2PCatchClause: soot.jimple.parser.node.PCatchClause getPCatchClause()>
<soot.jimple.parser.node.X2PCatchClause: void <init>(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X2PCatchClause: void setPCatchClause(soot.jimple.parser.node.PCatchClause)>
<soot.jimple.parser.node.X2PDeclaration: soot.jimple.parser.node.PDeclaration getPDeclaration()>
<soot.jimple.parser.node.X2PDeclaration: void <init>(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X2PDeclaration: void setPDeclaration(soot.jimple.parser.node.PDeclaration)>
<soot.jimple.parser.node.X2PMember: soot.jimple.parser.node.PMember getPMember()>
<soot.jimple.parser.node.X2PMember: void <init>(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X2PMember: void setPMember(soot.jimple.parser.node.PMember)>
<soot.jimple.parser.node.X2PModifier: soot.jimple.parser.node.PModifier getPModifier()>
<soot.jimple.parser.node.X2PModifier: void <init>(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X2PModifier: void setPModifier(soot.jimple.parser.node.PModifier)>
<soot.jimple.parser.node.X2PStatement: soot.jimple.parser.node.PStatement getPStatement()>
<soot.jimple.parser.node.X2PStatement: void <init>(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.node.X2PStatement: void setPStatement(soot.jimple.parser.node.PStatement)>
<soot.jimple.parser.parser.ParserException: void <init>(soot.jimple.parser.node.Token,java.lang.String)>
<soot.jimple.spark.builder.ContextInsensitiveBuilder: soot.jimple.spark.pag.PAG setup(soot.options.SparkOptions)>
<soot.jimple.spark.builder.ContextInsensitiveBuilder: void build()>
<soot.jimple.spark.builder.ContextInsensitiveBuilder: void handleClass(soot.SootClass)>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseArgv()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseCanonicalPath()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseDefaultClassLoader()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseFinalizeQueue()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseMainClassNameString()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseMainThread()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseMainThreadGroup()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseNewInstance(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node casePrivilegedActionException()>
<soot.jimple.spark.builder.GlobalNodeFactory: soot.jimple.spark.pag.Node caseThrow()>
<soot.jimple.spark.builder.GlobalNodeFactory: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.builder.MethodNodeFactory$1: void caseAssignStmt(soot.jimple.AssignStmt)>
<soot.jimple.spark.builder.MethodNodeFactory$1: void caseIdentityStmt(soot.jimple.IdentityStmt)>
<soot.jimple.spark.builder.MethodNodeFactory$1: void caseReturnStmt(soot.jimple.ReturnStmt)>
<soot.jimple.spark.builder.MethodNodeFactory$1: void caseThrowStmt(soot.jimple.ThrowStmt)>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node caseArray(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node caseParm(int)>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node caseRet()>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node caseThis()>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node getNode()>
<soot.jimple.spark.builder.MethodNodeFactory: soot.jimple.spark.pag.Node getNode(soot.Value)>
<soot.jimple.spark.builder.MethodNodeFactory: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.MethodPAG)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseArrayRef(soot.jimple.ArrayRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseCastExpr(soot.jimple.CastExpr)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseCaughtExceptionRef(soot.jimple.CaughtExceptionRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseClassConstant(soot.jimple.ClassConstant)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseInstanceFieldRef(soot.jimple.InstanceFieldRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseLocal(soot.Local)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseNewArrayExpr(soot.jimple.NewArrayExpr)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseNewExpr(soot.jimple.NewExpr)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseParameterRef(soot.jimple.ParameterRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void casePhiExpr(soot.shimple.PhiExpr)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseStaticFieldRef(soot.jimple.StaticFieldRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseStringConstant(soot.jimple.StringConstant)>
<soot.jimple.spark.builder.MethodNodeFactory: void caseThisRef(soot.jimple.ThisRef)>
<soot.jimple.spark.builder.MethodNodeFactory: void setCurrentMethod(soot.SootMethod)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable arrayElementOfImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable cloneObjectImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable newInstanceOfImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable staticFieldImpl(java.lang.String,java.lang.String)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable tempFieldImpl(java.lang.String)>
<soot.jimple.spark.internal.SparkNativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable tempLocalVariableImpl(soot.SootMethod)>
<soot.jimple.spark.internal.SparkNativeHelper: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.internal.SparkNativeHelper: void assignImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.spark.internal.SparkNativeHelper: void assignObjectToImpl(soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.AbstractObject)>
<soot.jimple.spark.internal.SparkNativeHelper: void throwExceptionImpl(soot.jimple.toolkits.pointer.representations.AbstractObject)>
<soot.jimple.spark.internal.TypeManager: soot.FastHierarchy getFastHierarchy()>
<soot.jimple.spark.internal.TypeManager: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.internal.TypeManager: void makeTypeMask()>
<soot.jimple.spark.internal.TypeManager: void setFastHierarchy(soot.FastHierarchy)>
<soot.jimple.spark.ondemand.AllocAndContext: void <init>(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.AllocAndContextSet$1: void <init>(soot.jimple.spark.ondemand.AllocAndContextSet)>
<soot.jimple.spark.ondemand.AllocAndContextSet$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.ondemand.AllocAndContextSet: boolean hasNonEmptyIntersection(soot.PointsToSet)>
<soot.jimple.spark.ondemand.AllocAndContextSet: boolean nonEmptyHelper(soot.jimple.spark.ondemand.AllocAndContextSet)>
<soot.jimple.spark.ondemand.AllocAndContextSet: boolean pointsToSetEquals(java.lang.Object)>
<soot.jimple.spark.ondemand.AllocAndContextSet: boolean superSetOf(soot.jimple.spark.ondemand.AllocAndContextSet,soot.jimple.spark.ondemand.AllocAndContextSet)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1UpContextEdgeHandler: void <init>(soot.jimple.spark.ondemand.DemandCSPointsTo,soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack,soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet,soot.jimple.spark.ondemand.genericutil.Propagator)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1UpContextEdgeHandler: void handleAssignSrc(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.pautil.AssignEdge)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$1UpContextEdgeHandler: void handleMatchSrc(soot.jimple.spark.pag.VarNode,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.pag.SparkField,boolean)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2: void handleAlloc(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2: void handleAssignSrc(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.pautil.AssignEdge)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2: void handleMatchSrc(soot.jimple.spark.pag.VarNode,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.pag.SparkField,boolean)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$2Helper: void prop(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$3: void handleAlloc(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$3: void handleAssignSrc(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.pautil.AssignEdge)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$3: void handleMatchSrc(soot.jimple.spark.pag.VarNode,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.pag.SparkField,boolean)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$CallSiteAndContext: void <init>(java.lang.Integer,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo$VarContextAndUp: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: boolean refineP2Set(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: java.util.Collection filterAssigns(soot.jimple.spark.pag.VarNode,soot.jimple.spark.ondemand.genericutil.ImmutableStack,boolean,boolean)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: java.util.Set getCallTargets(soot.jimple.spark.sets.PointsToSetInternal,soot.util.NumberedString,soot.Type,java.util.Set)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: java.util.Set getCallTargetsForType(soot.Type,soot.util.NumberedString,soot.Type,java.util.Set)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: java.util.Set refineCallSite(java.lang.Integer,soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.PointsToSet computeReachingObjects(soot.Local)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.PointsToSet computeRefinedReachingObjects(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.PointsToSet reachingObjects(soot.Local)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.AllocAndContextSet findContextsForAllocs(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet checkAllocAndContextCache(soot.jimple.spark.ondemand.AllocAndContext,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet checkUpContextCache(soot.jimple.spark.ondemand.DemandCSPointsTo$VarContextAndUp,soot.jimple.spark.ondemand.AllocAndContext)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet findUpContextsForVar(soot.jimple.spark.ondemand.AllocAndContext,soot.jimple.spark.ondemand.DemandCSPointsTo$VarContextAndUp)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.DemandCSPointsTo$CallingContextSet findVarContextsFromAlloc(soot.jimple.spark.ondemand.AllocAndContext,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.genericutil.ImmutableStack popRecursiveCallSites(soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.ondemand.genericutil.ImmutableStack pushWithRecursionCheck(soot.jimple.spark.ondemand.genericutil.ImmutableStack,soot.jimple.spark.ondemand.pautil.AssignEdge)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.pag.PAG getPAG()>
<soot.jimple.spark.ondemand.DemandCSPointsTo: soot.jimple.spark.sets.PointsToSetInternal checkContextsForAllocsCache(soot.jimple.spark.ondemand.DemandCSPointsTo$VarAndContext,soot.jimple.spark.ondemand.AllocAndContextSet,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: void <init>(soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo,soot.jimple.spark.pag.PAG,int,int)>
<soot.jimple.spark.ondemand.DemandCSPointsTo: void processIncomingEdges(soot.jimple.spark.ondemand.DemandCSPointsTo$IncomingEdgeHandler,soot.jimple.spark.ondemand.genericutil.Stack)>
<soot.jimple.spark.ondemand.InnerTypesIncrementalHeuristic: void <init>(soot.jimple.spark.internal.TypeManager,int)>
<soot.jimple.spark.ondemand.WrappedPointsToSet: boolean equals(java.lang.Object)>
<soot.jimple.spark.ondemand.WrappedPointsToSet: boolean pointsToSetEquals(java.lang.Object)>
<soot.jimple.spark.ondemand.WrappedPointsToSet: java.lang.Object unwrapIfNecessary(java.lang.Object)>
<soot.jimple.spark.ondemand.WrappedPointsToSet: java.lang.String toString()>
<soot.jimple.spark.ondemand.WrappedPointsToSet: soot.jimple.spark.sets.PointsToSetInternal getWrapped()>
<soot.jimple.spark.ondemand.WrappedPointsToSet: void <init>(soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.ondemand.genericutil.AbstractMultiMap: boolean put(java.lang.Object,java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.AbstractMultiMap: boolean putAll(java.lang.Object,java.util.Collection)>
<soot.jimple.spark.ondemand.genericutil.AbstractMultiMap: java.util.Set get(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.AbstractMultiMap: java.util.Set keySet()>
<soot.jimple.spark.ondemand.genericutil.AbstractMultiMap: void <init>(boolean)>
<soot.jimple.spark.ondemand.genericutil.ArraySet$ArraySetIterator: java.lang.Object next()>
<soot.jimple.spark.ondemand.genericutil.ArraySet$ArraySetIterator: void <init>(soot.jimple.spark.ondemand.genericutil.ArraySet)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean add(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean addAll(java.util.Collection)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean addAll(soot.jimple.spark.ondemand.genericutil.ArraySet)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean contains(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean remove(int)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: boolean remove(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: java.lang.Object get(int)>
<soot.jimple.spark.ondemand.genericutil.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>
<soot.jimple.spark.ondemand.genericutil.ArraySet: java.lang.String toString()>
<soot.jimple.spark.ondemand.genericutil.ArraySet: java.util.Iterator iterator()>
<soot.jimple.spark.ondemand.genericutil.ArraySet: void <init>(int,boolean)>
<soot.jimple.spark.ondemand.genericutil.ArraySetMultiMap: java.util.Set createSet()>
<soot.jimple.spark.ondemand.genericutil.ArraySetMultiMap: soot.jimple.spark.ondemand.genericutil.ArraySet get(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.HashSetMultiMap: java.util.Set createSet()>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: java.lang.Object get(int)>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: java.lang.Object peek()>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: soot.jimple.spark.ondemand.genericutil.ImmutableStack pop()>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: soot.jimple.spark.ondemand.genericutil.ImmutableStack popAll(soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: soot.jimple.spark.ondemand.genericutil.ImmutableStack push(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: soot.jimple.spark.ondemand.genericutil.ImmutableStack pushAll(soot.jimple.spark.ondemand.genericutil.ImmutableStack)>
<soot.jimple.spark.ondemand.genericutil.ImmutableStack: soot.jimple.spark.ondemand.genericutil.ImmutableStack reverse()>
<soot.jimple.spark.ondemand.genericutil.Propagator: void prop(java.lang.Object)>
<soot.jimple.spark.ondemand.genericutil.Stack: java.lang.Object pop()>
<soot.jimple.spark.ondemand.genericutil.Stack: void <init>(int)>
<soot.jimple.spark.ondemand.genericutil.Stack: void push(java.lang.Object)>
<soot.jimple.spark.ondemand.pautil.AssignEdge: java.lang.Integer getCallSite()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: soot.jimple.spark.pag.VarNode getDst()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: soot.jimple.spark.pag.VarNode getSrc()>
<soot.jimple.spark.ondemand.pautil.AssignEdge: void <init>(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.AssignEdge: void setCallSite(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: boolean callEdgesReasonable()>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: boolean isVirtCall(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.SootMethod getInvokedMethod(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.SootMethod getInvokingMethod(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.jimple.spark.ondemand.genericutil.ArraySet getAssignBarEdges(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.jimple.spark.ondemand.genericutil.ArraySet getAssignEdges(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.jimple.spark.ondemand.genericutil.ArraySet getCallSiteTargets(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: soot.jimple.spark.pag.LocalVarNode getReceiverForVirtCallSite(java.lang.Integer)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.ondemand.pautil.ContextSensitiveInfo: void addAssignEdge(soot.jimple.spark.ondemand.pautil.AssignEdge)>
<soot.jimple.spark.ondemand.pautil.SootUtil: soot.jimple.spark.ondemand.pautil.SootUtil$FieldToEdgesMap loadsOnField(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.ondemand.pautil.SootUtil: soot.jimple.spark.ondemand.pautil.SootUtil$FieldToEdgesMap storesOnField(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.ondemand.pautil.SootUtil: soot.jimple.spark.sets.PointsToSetInternal constructIntersection(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.ondemand.pautil.ValidMatches: java.util.Set vMatchInvLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.ValidMatches: java.util.Set vMatchLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.ondemand.pautil.ValidMatches: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.ondemand.pautil.SootUtil$FieldToEdgesMap)>
<soot.jimple.spark.pag.AllocDotField: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.AllocNode: java.util.Set getFields()>
<soot.jimple.spark.pag.AllocNode: soot.jimple.spark.pag.AllocDotField dot(soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.AllocNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.AllocNode: void addField(soot.jimple.spark.pag.AllocDotField,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.ClassConstantNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.ClassConstant)>
<soot.jimple.spark.pag.ContextVarNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.LocalVarNode,soot.Context)>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.Node getReplacement()>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.SparkField getField()>
<soot.jimple.spark.pag.FieldRefNode: soot.jimple.spark.pag.VarNode getBase()>
<soot.jimple.spark.pag.FieldRefNode: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.GlobalVarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type)>
<soot.jimple.spark.pag.LocalVarNode: soot.SootMethod getMethod()>
<soot.jimple.spark.pag.LocalVarNode: soot.jimple.spark.pag.ContextVarNode context(java.lang.Object)>
<soot.jimple.spark.pag.LocalVarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.LocalVarNode: void addContext(soot.jimple.spark.pag.ContextVarNode,java.lang.Object)>
<soot.jimple.spark.pag.MethodPAG: soot.SootMethod getMethod()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.builder.MethodNodeFactory nodeFactory()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.FieldRefNode parameterize(soot.jimple.spark.pag.FieldRefNode,soot.Context)>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.MethodPAG v(soot.jimple.spark.pag.PAG,soot.SootMethod)>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.Node parameterize(soot.jimple.spark.pag.Node,soot.Context)>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.PAG pag()>
<soot.jimple.spark.pag.MethodPAG: soot.jimple.spark.pag.VarNode parameterize(soot.jimple.spark.pag.LocalVarNode,soot.Context)>
<soot.jimple.spark.pag.MethodPAG: void <init>(soot.jimple.spark.pag.PAG,soot.SootMethod)>
<soot.jimple.spark.pag.MethodPAG: void addInEdge(soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.MethodPAG: void addInternalEdge(soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.MethodPAG: void addMiscEdges()>
<soot.jimple.spark.pag.MethodPAG: void addOutEdge(soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.MethodPAG: void addToPAG(soot.Context)>
<soot.jimple.spark.pag.MethodPAG: void buildNative()>
<soot.jimple.spark.pag.Node: soot.Type getType()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.pag.Node getReplacement()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.sets.PointsToSetInternal getP2Set()>
<soot.jimple.spark.pag.Node: soot.jimple.spark.sets.PointsToSetInternal makeP2Set()>
<soot.jimple.spark.pag.Node: void <init>(soot.jimple.spark.pag.PAG,soot.Type)>
<soot.jimple.spark.pag.Node: void mergeWith(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.PAG$1: void <init>(soot.jimple.spark.pag.PAG,soot.jimple.spark.pag.SparkField,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.pag.PAG$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.PAG: boolean addAllocEdge(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean addEdge(soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.PAG: boolean addLoadEdge(soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean addSimpleEdge(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean addStoreEdge(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.FieldRefNode)>
<soot.jimple.spark.pag.PAG: boolean addToMap(java.util.Map,soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.PAG: boolean doAddAllocEdge(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean doAddLoadEdge(soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean doAddSimpleEdge(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: boolean doAddStoreEdge(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.FieldRefNode)>
<soot.jimple.spark.pag.PAG: java.util.Iterator allocSourcesIterator()>
<soot.jimple.spark.pag.PAG: java.util.Iterator loadSourcesIterator()>
<soot.jimple.spark.pag.PAG: java.util.Iterator storeInvSourcesIterator()>
<soot.jimple.spark.pag.PAG: java.util.List getDereferences()>
<soot.jimple.spark.pag.PAG: java.util.Map getNodeTags()>
<soot.jimple.spark.pag.PAG: java.util.Set allocSources()>
<soot.jimple.spark.pag.PAG: java.util.Set loadSources()>
<soot.jimple.spark.pag.PAG: java.util.Set simpleSources()>
<soot.jimple.spark.pag.PAG: java.util.Set storeInvSources()>
<soot.jimple.spark.pag.PAG: java.util.Set storeSources()>
<soot.jimple.spark.pag.PAG: soot.PointsToSet reachingObjects(soot.Local)>
<soot.jimple.spark.pag.PAG: soot.PointsToSet reachingObjects(soot.Local,soot.SootField)>
<soot.jimple.spark.pag.PAG: soot.PointsToSet reachingObjects(soot.PointsToSet,soot.SootField)>
<soot.jimple.spark.pag.PAG: soot.PointsToSet reachingObjectsInternal(soot.PointsToSet,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.builder.GlobalNodeFactory nodeFactory()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.internal.TypeManager getTypeManager()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.AllocDotField findAllocDotField(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.AllocDotField makeAllocDotField(soot.jimple.spark.pag.AllocNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.AllocNode makeAllocNode(java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.AllocNode makeClassConstantNode(soot.jimple.ClassConstant)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.AllocNode makeStringConstantNode(java.lang.String)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.ContextVarNode makeContextVarNode(soot.jimple.spark.pag.LocalVarNode,soot.Context)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.FieldRefNode makeFieldRefNode(soot.jimple.spark.pag.VarNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.FieldRefNode makeLocalFieldRefNode(java.lang.Object,soot.Type,soot.jimple.spark.pag.SparkField,soot.SootMethod)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.GlobalVarNode findGlobalVarNode(java.lang.Object)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.GlobalVarNode makeGlobalVarNode(java.lang.Object,soot.Type)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.LocalVarNode findLocalVarNode(java.lang.Object)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.LocalVarNode makeLocalVarNode(java.lang.Object,soot.Type,soot.SootMethod)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] allocInvLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] allocLookup(soot.jimple.spark.pag.AllocNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] loadInvLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] loadLookup(soot.jimple.spark.pag.FieldRefNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] lookup(java.util.Map,java.lang.Object)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] simpleInvLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] simpleLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] storeInvLookup(soot.jimple.spark.pag.FieldRefNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.pag.Node[] storeLookup(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.solver.OnFlyCallGraph getOnFlyCallGraph()>
<soot.jimple.spark.pag.PAG: soot.jimple.spark.solver.OnFlyCallGraph ofcg()>
<soot.jimple.spark.pag.PAG: soot.options.SparkOptions getOpts()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getAllocDotFieldNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getAllocNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getFieldRefNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.ArrayNumberer getVarNodeNumberer()>
<soot.jimple.spark.pag.PAG: soot.util.queue.QueueReader allocNodeListener()>
<soot.jimple.spark.pag.PAG: soot.util.queue.QueueReader edgeReader()>
<soot.jimple.spark.pag.PAG: void <init>(soot.options.SparkOptions)>
<soot.jimple.spark.pag.PAG: void addCallTarget(soot.jimple.spark.pag.MethodPAG,soot.jimple.spark.pag.MethodPAG,soot.jimple.Stmt,soot.Context,soot.Context)>
<soot.jimple.spark.pag.PAG: void addCallTarget(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.spark.pag.PAG: void addDereference(soot.jimple.spark.pag.VarNode)>
<soot.jimple.spark.pag.PAG: void addNodeTag(soot.jimple.spark.pag.Node,soot.SootMethod)>
<soot.jimple.spark.pag.PAG: void cleanUpMerges()>
<soot.jimple.spark.pag.PAG: void mergedWith(soot.jimple.spark.pag.Node,soot.jimple.spark.pag.Node)>
<soot.jimple.spark.pag.PAG: void setOnFlyCallGraph(soot.jimple.spark.solver.OnFlyCallGraph)>
<soot.jimple.spark.pag.PAGDumper$ObjectNumberer: soot.jimple.spark.pag.PAGDumper$ObjectNumberer findOrAdd(java.lang.Object)>
<soot.jimple.spark.pag.PAGDumper$ObjectNumberer: void <init>(soot.jimple.spark.pag.PAGDumper,java.lang.Object,int)>
<soot.jimple.spark.pag.PAGDumper: int fieldToNum(soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.PAGDumper: void <init>(soot.jimple.spark.pag.PAG,java.lang.String)>
<soot.jimple.spark.pag.PAGDumper: void dump()>
<soot.jimple.spark.pag.PAGDumper: void dumpNode(soot.jimple.spark.pag.Node,java.io.PrintWriter)>
<soot.jimple.spark.pag.PAGDumper: void dumpTypes(java.io.PrintWriter)>
<soot.jimple.spark.pag.Parm: soot.jimple.spark.pag.Parm v(soot.SootMethod,int)>
<soot.jimple.spark.pag.Parm: void <init>(soot.SootMethod,int)>
<soot.jimple.spark.pag.StringConstantNode: java.lang.String getString()>
<soot.jimple.spark.pag.StringConstantNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.String)>
<soot.jimple.spark.pag.ValNode: void <init>(soot.jimple.spark.pag.PAG,soot.Type)>
<soot.jimple.spark.pag.VarNode: java.lang.Object getVariable()>
<soot.jimple.spark.pag.VarNode: java.util.Collection getAllFieldRefs()>
<soot.jimple.spark.pag.VarNode: soot.jimple.spark.pag.FieldRefNode dot(soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.pag.VarNode: void <init>(soot.jimple.spark.pag.PAG,java.lang.Object,soot.Type)>
<soot.jimple.spark.pag.VarNode: void addField(soot.jimple.spark.pag.FieldRefNode,soot.jimple.spark.pag.SparkField)>
<soot.jimple.spark.sets.BitPointsToSet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.BitPointsToSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.BitPointsToSet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.BitPointsToSet: boolean superAddAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.BitPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.DoublePointsToSet$1: void <init>(soot.jimple.spark.sets.DoublePointsToSet,soot.jimple.spark.sets.DoublePointsToSet,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.DoublePointsToSet$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.DoublePointsToSet$2: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.DoublePointsToSet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.DoublePointsToSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.DoublePointsToSet: boolean contains(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.DoublePointsToSet: java.util.Set possibleTypes()>
<soot.jimple.spark.sets.DoublePointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.DoublePointsToSet: void flushNew()>
<soot.jimple.spark.sets.DoublePointsToSet: void mergeWith(soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.DoublePointsToSet: void unFlushNew()>
<soot.jimple.spark.sets.HashPointsToSet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HashPointsToSet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HashPointsToSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.HashPointsToSet: boolean contains(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HashPointsToSet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.HashPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HybridPointsToSet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HybridPointsToSet$2: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HybridPointsToSet$3: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean fastAdd(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean nativeAddAll(soot.jimple.spark.sets.HybridPointsToSet,soot.jimple.spark.sets.HybridPointsToSet)>
<soot.jimple.spark.sets.HybridPointsToSet: boolean superAddAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.HybridPointsToSet: soot.jimple.spark.sets.HybridPointsToSet intersection(soot.jimple.spark.sets.HybridPointsToSet,soot.jimple.spark.sets.HybridPointsToSet,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HybridPointsToSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.HybridPointsToSet: void convertToBits()>
<soot.jimple.spark.sets.PointsToSetEqualsWrapper: boolean equals(java.lang.Object)>
<soot.jimple.spark.sets.PointsToSetEqualsWrapper: java.lang.Object unwrapIfNecessary(java.lang.Object)>
<soot.jimple.spark.sets.PointsToSetEqualsWrapper: void <init>(soot.jimple.spark.sets.EqualsSupportingPointsToSet)>
<soot.jimple.spark.sets.PointsToSetInternal$1: void <init>(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.PointsToSetInternal$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.PointsToSetInternal$2: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.PointsToSetInternal$3: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.PointsToSetInternal$6: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.PointsToSetInternal$9: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.PointsToSetInternal: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.PointsToSetInternal: java.util.Set possibleStringConstants()>
<soot.jimple.spark.sets.PointsToSetInternal: java.util.Set possibleTypes()>
<soot.jimple.spark.sets.PointsToSetInternal: soot.Type getType()>
<soot.jimple.spark.sets.PointsToSetInternal: soot.jimple.spark.sets.PointsToSetInternal getNewSet()>
<soot.jimple.spark.sets.PointsToSetInternal: void <init>(soot.Type)>
<soot.jimple.spark.sets.PointsToSetInternal: void mergeWith(soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.SharedHybridSet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList$ListNode: void <init>(soot.jimple.spark.sets.SharedHybridSet$OverflowList,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedHybridSet$OverflowList$ListNode)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList: void <init>(soot.jimple.spark.sets.SharedHybridSet)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList: void <init>(soot.jimple.spark.sets.SharedHybridSet,soot.jimple.spark.sets.PointsToBitVector)>
<soot.jimple.spark.sets.SharedHybridSet$OverflowList: void add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.SharedHybridSet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.SharedHybridSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.SharedHybridSet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.SharedHybridSet: boolean nativeAddAll(soot.jimple.spark.sets.SharedHybridSet,soot.jimple.spark.sets.SharedHybridSet)>
<soot.jimple.spark.sets.SharedHybridSet: soot.jimple.spark.pag.PAG access$000(soot.jimple.spark.sets.SharedHybridSet)>
<soot.jimple.spark.sets.SharedHybridSet: soot.jimple.spark.sets.SharedHybridSet$OverflowList remainder(soot.jimple.spark.sets.PointsToBitVector,soot.jimple.spark.sets.PointsToBitVector)>
<soot.jimple.spark.sets.SharedHybridSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SharedHybridSet: void findAppropriateBitVector(soot.jimple.spark.sets.PointsToBitVector,soot.jimple.spark.sets.PointsToBitVector,int,int)>
<soot.jimple.spark.sets.SharedHybridSet: void setNewBitVector(int,soot.jimple.spark.sets.PointsToBitVector)>
<soot.jimple.spark.sets.SharedListSet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SharedListSet$ListNode: soot.jimple.spark.pag.Node access$100(soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet$ListNode: soot.jimple.spark.sets.SharedListSet$ListNode access$000(soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet$ListNode: void <init>(soot.jimple.spark.sets.SharedListSet,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet$ListNode: void decRefCount()>
<soot.jimple.spark.sets.SharedListSet$Pair: void <init>(soot.jimple.spark.sets.SharedListSet,soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.SharedListSet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.SharedListSet: boolean addOrAddAll(soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.util.BitVector)>
<soot.jimple.spark.sets.SharedListSet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.SharedListSet: soot.jimple.spark.sets.SharedListSet$ListNode makeNode(soot.jimple.spark.pag.Node,soot.jimple.spark.sets.SharedListSet$ListNode)>
<soot.jimple.spark.sets.SharedListSet: soot.jimple.spark.sets.SharedListSet$ListNode union(soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.jimple.spark.sets.SharedListSet$ListNode,soot.util.BitVector,boolean)>
<soot.jimple.spark.sets.SharedListSet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SortedArraySet$1: soot.jimple.spark.sets.PointsToSetInternal newSet(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.sets.SortedArraySet: boolean add(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.sets.SortedArraySet: boolean addAll(soot.jimple.spark.sets.PointsToSetInternal,soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.spark.sets.SortedArraySet: boolean forall(soot.jimple.spark.sets.P2SetVisitor)>
<soot.jimple.spark.sets.SortedArraySet: void <init>(soot.Type,soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.OnFlyCallGraph$2: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.spark.solver.OnFlyCallGraph: soot.jimple.toolkits.callgraph.CallGraph callGraph()>
<soot.jimple.spark.solver.OnFlyCallGraph: soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder access$000(soot.jimple.spark.solver.OnFlyCallGraph)>
<soot.jimple.spark.solver.OnFlyCallGraph: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.OnFlyCallGraph: void processCallEdges()>
<soot.jimple.spark.solver.OnFlyCallGraph: void processReachables()>
<soot.jimple.spark.solver.PropCycle: soot.jimple.spark.pag.PAG access$000(soot.jimple.spark.solver.PropCycle)>
<soot.jimple.spark.solver.PropCycle: void <init>(soot.jimple.spark.pag.PAG)>
<soot.jimple.spark.solver.TopoSorter: void dfsVisit(soot.jimple.spark.pag.VarNode)>
<soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol: soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol v(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getFieldToFieldRef()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getLocalToExpr()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashMap getLocalToFieldRef()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: java.util.HashSet getMultiArrayLocals()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,boolean,boolean,boolean,boolean)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void getAllRelatedMaps(soot.Body)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void getGenAndKillSet(soot.Body,java.util.HashMap,java.util.HashMap,java.util.HashMap,java.util.HashMap)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayIndexLivenessAnalysis: void getGenAndKillSetForDefnStmt(soot.jimple.DefinitionStmt,java.util.HashMap,java.util.HashSet,java.util.HashSet,java.util.HashSet,java.util.HashSet)>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: soot.Local getLocal()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode: void <init>(soot.SootMethod,soot.Local)>
<soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList: boolean add(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList: java.lang.Object removeFirst()>
<soot.jimple.toolkits.annotation.arraycheck.ClassFieldAnalysis: java.lang.Object getFieldInfo(soot.SootField)>
<soot.jimple.toolkits.annotation.arraycheck.ClassFieldAnalysis: void ScanMethod(soot.SootMethod,java.util.Set,java.util.Hashtable)>
<soot.jimple.toolkits.annotation.arraycheck.ClassFieldAnalysis: void internalTransform(soot.SootClass)>
<soot.jimple.toolkits.annotation.arraycheck.ExtendedHashMutableDirectedGraph: void addEdge(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.ExtendedHashMutableDirectedGraph: void addMutualEdge(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.ExtendedHashMutableDirectedGraph: void mergeWith(soot.jimple.toolkits.annotation.arraycheck.ExtendedHashMutableDirectedGraph)>
<soot.jimple.toolkits.annotation.arraycheck.ExtendedHashMutableDirectedGraph: void skipNode(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: java.lang.Object getStartUnit()>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: java.lang.Object getTargetUnit()>
<soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge: void <init>(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: soot.Local getLocal()>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.MethodLocal: void <init>(soot.SootMethod,soot.Local)>
<soot.jimple.toolkits.annotation.arraycheck.MethodParameter: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.MethodParameter: void <init>(soot.SootMethod,int)>
<soot.jimple.toolkits.annotation.arraycheck.MethodReturn: soot.SootMethod getMethod()>
<soot.jimple.toolkits.annotation.arraycheck.MethodReturn: void <init>(soot.SootMethod)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedEdge: int hashCode()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedEdge: void <init>(java.lang.Object,java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: boolean SSSPFinder(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: boolean equals(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: boolean hasEdge(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: boolean makeShortestPathGraph()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: int edgeWeight(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: java.lang.String toString()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: java.util.HashSet getVertexes()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph dup()>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void <init>(java.util.HashSet)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void <init>(java.util.HashSet,boolean)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void InitializeSingleSource(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void Relax(java.lang.Object,java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void addAll(soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void addBoundedAll(soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void addEdge(java.lang.Object,java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void addMutualEdges(java.lang.Object,java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void getReachableNodesAndEdges(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void killNode(java.lang.Object)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void replaceAllEdges(soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void setVertexes(java.util.HashSet)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void unionSelf(soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void updateWeight(java.lang.Object,int)>
<soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph: void widenEdges(soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedSparseGraph)>
<soot.jimple.toolkits.annotation.logic.Loop: java.util.List getLoopStatements()>
<soot.jimple.toolkits.annotation.logic.Loop: soot.jimple.Stmt getHead()>
<soot.jimple.toolkits.annotation.logic.Loop: void <init>(soot.jimple.Stmt,java.util.List,soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.logic.LoopFinder: java.util.Collection loops()>
<soot.jimple.toolkits.annotation.logic.LoopFinder: java.util.List getLoopBodyFor(soot.jimple.Stmt,soot.jimple.Stmt)>
<soot.jimple.toolkits.annotation.logic.LoopFinder: java.util.List union(java.util.List,java.util.List)>
<soot.jimple.toolkits.annotation.logic.LoopFinder: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: int anyRefInfo(soot.Value,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: int refInfo(soot.EquivalentValue,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: int refInfo(soot.Value,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: soot.EquivalentValue getEquivalentValue(soot.Value)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: soot.jimple.toolkits.annotation.nullcheck.RefIntPair getKRefIntPair(soot.EquivalentValue,int)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void flowThrough(java.lang.Object,soot.Unit,java.util.List,java.util.List)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void initRefTypeLists()>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void initUnitSets()>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void initUniverseSets()>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void merge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddInfoToFlowSet(soot.EquivalentValue,int,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddInfoToFlowSet(soot.EquivalentValue,int,soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddInfoToFlowSet(soot.Value,int,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddInfoToFlowSet(soot.Value,int,soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddTopToFlowSet(soot.EquivalentValue,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddTopToFlowSet(soot.EquivalentValue,soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddTopToFlowSet(soot.Value,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uAddTopToFlowSet(soot.Value,soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis: void uListAddTopToFlowSet(java.util.List,soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.annotation.nullcheck.NullCheckEliminator$AnalysisFactory: soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis newAnalysis(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.nullcheck.NullCheckEliminator: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis$AnalysisInfo: int get(soot.Value)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis$AnalysisInfo: void <init>(soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: boolean isAlwaysNonNullBefore(soot.Unit,soot.Immediate)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: boolean isAlwaysNullBefore(soot.Unit,soot.Immediate)>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.annotation.nullcheck.NullnessAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.nullcheck.RefIntPair: void <init>(soot.EquivalentValue,int,soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: java.lang.String getParity(java.util.HashMap,soot.Value)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: java.util.HashMap updateFilter(java.util.HashMap,java.util.HashMap)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.toolkits.scalar.LiveLocals)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void buildAfterFilterMap(soot.jimple.Stmt)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void buildBeforeFilterMap()>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void copy(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void merge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void updateAfterFilterMap(soot.jimple.Stmt)>
<soot.jimple.toolkits.annotation.parity.ParityAnalysis: void updateBeforeFilterMap()>
<soot.jimple.toolkits.annotation.purity.DirectedCallGraph: java.util.Iterator iterator()>
<soot.jimple.toolkits.annotation.purity.DirectedCallGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.DirectedCallGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.DirectedCallGraph: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.toolkits.annotation.purity.SootMethodFilter,java.util.Iterator,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityEdge: java.lang.String getField()>
<soot.jimple.toolkits.annotation.purity.PurityEdge: soot.jimple.toolkits.annotation.purity.PurityNode getSource()>
<soot.jimple.toolkits.annotation.purity.PurityEdge: soot.jimple.toolkits.annotation.purity.PurityNode getTarget()>
<soot.jimple.toolkits.annotation.purity.PurityEdge: void <init>(soot.jimple.toolkits.annotation.purity.PurityNode,java.lang.String,soot.jimple.toolkits.annotation.purity.PurityNode,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: boolean isPure()>
<soot.jimple.toolkits.annotation.purity.PurityGraph: boolean isPureConstructor()>
<soot.jimple.toolkits.annotation.purity.PurityGraph: boolean localsPut(soot.Local,soot.jimple.toolkits.annotation.purity.PurityNode)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: boolean localsPutAll(soot.Local,java.util.Set)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: boolean localsRemove(soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: int internalParamStatus(soot.jimple.toolkits.annotation.purity.PurityNode)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: int paramStatus(int)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: java.util.Set getEscaping()>
<soot.jimple.toolkits.annotation.purity.PurityGraph: soot.jimple.toolkits.annotation.purity.PurityEdge cacheEdge(soot.jimple.toolkits.annotation.purity.PurityEdge)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: soot.jimple.toolkits.annotation.purity.PurityNode cacheNode(soot.jimple.toolkits.annotation.purity.PurityNode)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void <init>()>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void <init>(soot.jimple.toolkits.annotation.purity.PurityGraph)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignFieldToLocal(soot.jimple.Stmt,soot.Local,java.lang.String,soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignLocalToField(soot.Local,soot.Local,java.lang.String)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignLocalToLocal(soot.Local,soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignLocalToStaticField(soot.Local,java.lang.String)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignNewToLocal(soot.jimple.Stmt,soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignParamToLocal(int,soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void assignThisToLocal(soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void fillDotGraph(java.lang.String,soot.util.dot.DotGraph)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void internalPassEdges(java.util.Set,java.util.Set,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void internalPassNode(soot.jimple.toolkits.annotation.purity.PurityNode,java.util.Set,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void internalPassNodes(java.util.Set,java.util.Set,boolean)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void localEscapes(soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void localIsUnknown(soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void methodCall(soot.jimple.toolkits.annotation.purity.PurityGraph,soot.Local,java.util.List,soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void mutateField(soot.Local,java.lang.String)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void mutateStaticField(java.lang.String)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void removeLocals()>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void removeNode(soot.jimple.toolkits.annotation.purity.PurityNode)>
<soot.jimple.toolkits.annotation.purity.PurityGraph: void returnLocal(soot.Local)>
<soot.jimple.toolkits.annotation.purity.PurityGraphBox: void <init>()>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void copy(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void copyResult(java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void drawAsOneDot(java.lang.String,java.lang.String)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.PurityIntraproceduralAnalysis: void merge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.annotation.purity.PurityStmtNode: java.lang.String toString()>
<soot.jimple.toolkits.annotation.purity.PurityStmtNode: void <init>(soot.jimple.Stmt,boolean)>
<soot.jimple.toolkits.base.Zonation: soot.jimple.toolkits.base.Zone getZoneOf(soot.Unit)>
<soot.jimple.toolkits.base.Zonation: void <init>(soot.jimple.StmtBody)>
<soot.jimple.toolkits.callgraph.CallGraph$CallersOfMethodIterator: java.lang.Object next()>
<soot.jimple.toolkits.callgraph.CallGraph$CallersOfMethodIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraph$CallersOfMethodIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfMethodIterator: java.lang.Object next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfMethodIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfMethodIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfUnitIterator: java.lang.Object next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfUnitIterator: soot.jimple.toolkits.callgraph.Edge next()>
<soot.jimple.toolkits.callgraph.CallGraph$TargetsOfUnitIterator: void <init>(soot.jimple.toolkits.callgraph.CallGraph,soot.Unit)>
<soot.jimple.toolkits.callgraph.CallGraph: boolean addEdge(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.CallGraph: boolean removeEdge(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.CallGraph: java.util.Iterator edgesInto(soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph: java.util.Iterator edgesOutOf(soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.CallGraph: java.util.Iterator edgesOutOf(soot.Unit)>
<soot.jimple.toolkits.callgraph.CallGraph: java.util.Iterator sourceMethods()>
<soot.jimple.toolkits.callgraph.CallGraph: soot.util.queue.QueueReader listener()>
<soot.jimple.toolkits.callgraph.CallGraph: void <init>()>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: soot.jimple.toolkits.callgraph.ContextManager makeContextManager(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: void <init>(soot.PointsToAnalysis)>
<soot.jimple.toolkits.callgraph.CallGraphBuilder: void build()>
<soot.jimple.toolkits.callgraph.CallGraphPack: void <init>(java.lang.String)>
<soot.jimple.toolkits.callgraph.CallGraphPack: void internalApply()>
<soot.jimple.toolkits.callgraph.ClinitElimAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.callgraph.ClinitElimAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.callgraph.ClinitElimAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.callgraph.ClinitElimTransformer: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: soot.jimple.toolkits.callgraph.CallGraph callGraph()>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: void addStaticEdge(soot.MethodOrMethodContext,soot.Unit,soot.SootMethod,soot.Kind)>
<soot.jimple.toolkits.callgraph.ContextInsensitiveContextManager: void addVirtualEdge(soot.MethodOrMethodContext,soot.Unit,soot.SootMethod,soot.Kind,soot.Context)>
<soot.jimple.toolkits.callgraph.Edge: soot.Kind kind()>
<soot.jimple.toolkits.callgraph.Edge: soot.MethodOrMethodContext getSrc()>
<soot.jimple.toolkits.callgraph.Edge: soot.MethodOrMethodContext getTgt()>
<soot.jimple.toolkits.callgraph.Edge: soot.SootMethod src()>
<soot.jimple.toolkits.callgraph.Edge: soot.SootMethod tgt()>
<soot.jimple.toolkits.callgraph.Edge: soot.Unit srcUnit()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.Stmt srcStmt()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextBySrc()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextByTgt()>
<soot.jimple.toolkits.callgraph.Edge: soot.jimple.toolkits.callgraph.Edge nextByUnit()>
<soot.jimple.toolkits.callgraph.Edge: void <init>(soot.MethodOrMethodContext,soot.Unit,soot.MethodOrMethodContext,soot.Kind)>
<soot.jimple.toolkits.callgraph.Edge: void <init>(soot.MethodOrMethodContext,soot.jimple.Stmt,soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterBySrc(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterByTgt(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Edge: void insertAfterByUnit(soot.jimple.toolkits.callgraph.Edge)>
<soot.jimple.toolkits.callgraph.Edge: void remove()>
<soot.jimple.toolkits.callgraph.Filter: java.util.Iterator wrap(java.util.Iterator)>
<soot.jimple.toolkits.callgraph.Filter: void <init>(soot.jimple.toolkits.callgraph.EdgePredicate)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: soot.util.LargeNumberedMap methodToReceivers()>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: soot.util.LargeNumberedMap methodToStringConstants()>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void <init>(soot.jimple.toolkits.callgraph.ContextManager,soot.jimple.toolkits.callgraph.ReachableMethods)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void addEdge(soot.SootMethod,soot.jimple.Stmt,soot.SootMethod,soot.Kind)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void addStringConstant(soot.Local,soot.Context,java.lang.String)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void addType(soot.Local,soot.Context,soot.Type,soot.Context)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void addVirtualCallSite(soot.jimple.Stmt,soot.SootMethod,soot.Local,soot.jimple.InstanceInvokeExpr,soot.util.NumberedString,soot.Kind)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void constantForName(java.lang.String,soot.SootMethod,soot.jimple.Stmt)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void getImplicitTargets(soot.SootMethod)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void processNewMethodContext(soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.OnFlyCallGraphBuilder: void processReachables()>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Collection)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Iterator)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void <init>(soot.jimple.toolkits.callgraph.CallGraph,java.util.Iterator,soot.jimple.toolkits.callgraph.Filter)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void addMethod(soot.MethodOrMethodContext)>
<soot.jimple.toolkits.callgraph.ReachableMethods: void addMethods(java.util.Iterator)>
<soot.jimple.toolkits.callgraph.TransitiveTargets: java.util.Iterator iterator(java.util.Iterator)>
<soot.jimple.toolkits.callgraph.TransitiveTargets: java.util.Iterator iterator(soot.Unit)>
<soot.jimple.toolkits.callgraph.TransitiveTargets: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.Kind kind()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.SootMethod container()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.jimple.InstanceInvokeExpr iie()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.jimple.Stmt stmt()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: soot.util.NumberedString subSig()>
<soot.jimple.toolkits.callgraph.VirtualCallSite: void <init>(soot.jimple.Stmt,soot.SootMethod,soot.jimple.InstanceInvokeExpr,soot.util.NumberedString,soot.Kind)>
<soot.jimple.toolkits.callgraph.VirtualCalls: soot.SootMethod resolveSpecial(soot.jimple.SpecialInvokeExpr,soot.util.NumberedString,soot.SootMethod)>
<soot.jimple.toolkits.infoflow.AbstractDataSource: java.lang.Object clone()>
<soot.jimple.toolkits.infoflow.AbstractDataSource: void <init>(java.lang.Object)>
<soot.jimple.toolkits.infoflow.CachedEquivalentValue: boolean equals(java.lang.Object)>
<soot.jimple.toolkits.infoflow.CachedEquivalentValue: void <init>(soot.Value)>
<soot.jimple.toolkits.infoflow.CallLocalityContext: boolean merge(soot.jimple.toolkits.infoflow.CallLocalityContext)>
<soot.jimple.toolkits.infoflow.CallLocalityContext: java.util.List getLocalRefs()>
<soot.jimple.toolkits.infoflow.CallLocalityContext: void <init>(java.util.List)>
<soot.jimple.toolkits.infoflow.CallLocalityContext: void setFieldLocal(soot.EquivalentValue)>
<soot.jimple.toolkits.infoflow.CallLocalityContext: void setFieldShared(soot.EquivalentValue)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis getMethodInfoFlowAnalysis(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodInfoFlowSummary(soot.SootMethod,boolean)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph simpleConservativeInfoFlowAnalysis(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph triviallyConservativeInfoFlowAnalysis(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis: void <init>(soot.SootClass,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: boolean fieldIsInitiallyLocal(soot.SootField)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: boolean isFieldLocal(soot.SootField)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: boolean isObjectLocal(soot.Value,soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: boolean isObjectLocal(soot.Value,soot.SootMethod,boolean)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: boolean parameterIsLocal(soot.SootMethod,soot.EquivalentValue,boolean)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getAllFields(soot.SootClass)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getAllReachableMethods(soot.SootClass)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getInnerSharedFields()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getLocalFields()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: java.util.List getSharedFields()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: soot.jimple.toolkits.infoflow.CallLocalityContext getContextFor(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: soot.jimple.toolkits.infoflow.CallLocalityContext getContextFor(soot.SootMethod,boolean)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: soot.jimple.toolkits.infoflow.CallLocalityContext getContextFor(soot.jimple.toolkits.callgraph.Edge,soot.SootMethod,soot.jimple.toolkits.infoflow.CallLocalityContext)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: soot.jimple.toolkits.infoflow.CallLocalityContext getMergedContext(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis getMethodLocalObjectsAnalysis(soot.SootMethod,boolean)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: void <init>(soot.jimple.toolkits.infoflow.LocalObjectsAnalysis,soot.jimple.toolkits.infoflow.InfoFlowAnalysis,soot.jimple.toolkits.infoflow.InfoFlowAnalysis,soot.jimple.toolkits.infoflow.UseFinder,soot.SootClass,java.util.List)>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: void doAnalysis()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: void prepare()>
<soot.jimple.toolkits.infoflow.ClassLocalObjectsAnalysis: void propagate()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: java.lang.Object clone()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: java.lang.Object getInfo()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: soot.Local getRealLocal()>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void <init>(java.lang.String,soot.Type,soot.Local)>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void <init>(java.lang.String,soot.Type,soot.Local,java.lang.Object)>
<soot.jimple.toolkits.infoflow.FakeJimpleLocal: void setInfo(java.lang.Object)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.EquivalentValue getNodeForFieldRef(soot.SootMethod,soot.SootField)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.EquivalentValue getNodeForFieldRef(soot.SootMethod,soot.SootField,soot.Local)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.EquivalentValue getNodeForParameterRef(soot.SootMethod,int)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.EquivalentValue getNodeForReturnRef(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.EquivalentValue getNodeForThisRef(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.jimple.toolkits.infoflow.ClassInfoFlowAnalysis getClassInfoFlowAnalysis(soot.SootClass)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis getMethodInfoFlowAnalysis(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getInvokeInfoFlowSummary(soot.jimple.InvokeExpr,soot.SootMethod)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodInfoFlowSummary(soot.SootMethod)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodInfoFlowSummary(soot.SootMethod,boolean)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: void <init>(boolean,boolean,boolean)>
<soot.jimple.toolkits.infoflow.InfoFlowAnalysis: void printInfoFlowSummary(soot.toolkits.graph.DirectedGraph)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: java.util.List handleInvokeExpr(soot.jimple.InvokeExpr)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: java.util.List sinksOf(soot.EquivalentValue,java.util.Set,java.util.Set)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: java.util.List sourcesOf(soot.EquivalentValue)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: java.util.List sourcesOf(soot.EquivalentValue,java.util.Set,java.util.Set)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodAbbreviatedInfoFlowGraph()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: soot.toolkits.graph.HashMutableDirectedGraph getMethodInfoFlowSummary()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void addFlowToCdfg(soot.jimple.Stmt)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void generateInfoFlowSummary()>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void handleFlowsToDataStructure(soot.Value,soot.Value)>
<soot.jimple.toolkits.infoflow.SmartMethodInfoFlowAnalysis: void handleFlowsToValue(soot.Value,soot.Value)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: boolean isObjectLocal(soot.Value,soot.jimple.toolkits.infoflow.CallLocalityContext)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: boolean isObjectLocal(soot.jimple.toolkits.infoflow.InfoFlowAnalysis,soot.SootMethod,soot.jimple.toolkits.infoflow.CallLocalityContext,soot.Value)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: void <init>(soot.SootMethod,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.SmartMethodLocalObjectsAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.infoflow.InfoFlowAnalysis)>
<soot.jimple.toolkits.infoflow.UseFinder: java.util.List getExtCalls(soot.SootClass)>
<soot.jimple.toolkits.infoflow.UseFinder: java.util.List getExtFields(soot.SootClass)>
<soot.jimple.toolkits.infoflow.UseFinder: java.util.List getExtMethods(soot.SootClass)>
<soot.jimple.toolkits.infoflow.UseFinder: java.util.List getIntCalls(soot.SootClass)>
<soot.jimple.toolkits.infoflow.UseFinder: void doAnalysis()>
<soot.jimple.toolkits.invoke.SynchronizerManager: soot.SootMethod createClassFetcherFor(soot.SootClass,java.lang.String)>
<soot.jimple.toolkits.invoke.SynchronizerManager: soot.SootMethod getClassFetcherFor(soot.SootClass)>
<soot.jimple.toolkits.pointer.CastCheckEliminator: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.pointer.CastCheckEliminator: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.pointer.CastCheckEliminator: void flowThrough(java.lang.Object,soot.Unit,java.util.List,java.util.List)>
<soot.jimple.toolkits.pointer.CastCheckEliminator: void makeInitialSet()>
<soot.jimple.toolkits.pointer.CodeBlockRWSet$1: void visit(soot.jimple.spark.pag.Node)>
<soot.jimple.toolkits.pointer.CodeBlockRWSet: boolean addFieldRef(soot.PointsToSet,java.lang.Object)>
<soot.jimple.toolkits.pointer.CodeBlockRWSet: boolean containsField(java.lang.Object)>
<soot.jimple.toolkits.pointer.CodeBlockRWSet: boolean union(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.CodeBlockRWSet: java.lang.String toString()>
<soot.jimple.toolkits.pointer.CodeBlockRWSet: soot.jimple.toolkits.pointer.CodeBlockRWSet intersection(soot.jimple.toolkits.pointer.MethodRWSet)>
<soot.jimple.toolkits.pointer.DependenceGraph$Edge: void <init>(soot.jimple.toolkits.pointer.DependenceGraph,short,short)>
<soot.jimple.toolkits.pointer.DependenceGraph: void <init>()>
<soot.jimple.toolkits.pointer.DependenceGraph: void addEdge(short,short)>
<soot.jimple.toolkits.pointer.LocalTypeSet: int indexOf(soot.Local,soot.RefType)>
<soot.jimple.toolkits.pointer.LocalTypeSet: java.lang.String toString()>
<soot.jimple.toolkits.pointer.LocalTypeSet: void <init>(java.util.List,java.util.List)>
<soot.jimple.toolkits.pointer.LocalTypeSet: void killLocal(soot.Local)>
<soot.jimple.toolkits.pointer.LocalTypeSet: void localCopy(soot.Local,soot.Local)>
<soot.jimple.toolkits.pointer.LocalTypeSet: void localMustBeSubtypeOf(soot.Local,soot.RefType)>
<soot.jimple.toolkits.pointer.MemoryEfficientRasUnion: boolean addAll(soot.PointsToSet)>
<soot.jimple.toolkits.pointer.MemoryEfficientRasUnion: boolean equals(java.lang.Object)>
<soot.jimple.toolkits.pointer.MemoryEfficientRasUnion: java.lang.String toString()>
<soot.jimple.toolkits.pointer.MethodRWSet: boolean addFieldRef(soot.PointsToSet,java.lang.Object)>
<soot.jimple.toolkits.pointer.MethodRWSet: boolean addGlobal(soot.SootField)>
<soot.jimple.toolkits.pointer.MethodRWSet: boolean hasNonEmptyIntersection(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.MethodRWSet: boolean union(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.MethodRWSet: java.lang.String toString()>
<soot.jimple.toolkits.pointer.MethodRWSet: java.util.Set getFields()>
<soot.jimple.toolkits.pointer.MethodRWSet: java.util.Set getGlobals()>
<soot.jimple.toolkits.pointer.MethodRWSet: soot.PointsToSet getBaseForField(java.lang.Object)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet nonTransitiveReadSet(soot.SootMethod)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet nonTransitiveWriteSet(soot.SootMethod)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet readSet(soot.SootMethod,soot.jimple.Stmt)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet writeSet(soot.SootMethod,soot.jimple.Stmt)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: void <init>(soot.PointsToAnalysis,soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.pointer.SideEffectAnalysis: void findNTRWSets(soot.SootMethod)>
<soot.jimple.toolkits.pointer.SideEffectTagger$1: soot.jimple.toolkits.pointer.Union newUnion()>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: java.util.Iterator iterator()>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: short indexOf(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: soot.jimple.toolkits.pointer.RWSet getUnique(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SideEffectTagger$UniqueRWSets: void <init>(soot.jimple.toolkits.pointer.SideEffectTagger)>
<soot.jimple.toolkits.pointer.SideEffectTagger: java.lang.Object keyFor(soot.jimple.Stmt)>
<soot.jimple.toolkits.pointer.SideEffectTagger: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
<soot.jimple.toolkits.pointer.SiteRWSet: boolean hasNonEmptyIntersection(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SiteRWSet: boolean isEquivTo(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SiteRWSet: boolean union(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.SiteRWSet: java.lang.String toString()>
<soot.jimple.toolkits.pointer.SiteRWSet: java.util.Set getFields()>
<soot.jimple.toolkits.pointer.SiteRWSet: java.util.Set getGlobals()>
<soot.jimple.toolkits.pointer.SiteRWSet: soot.PointsToSet getBaseForField(java.lang.Object)>
<soot.jimple.toolkits.pointer.SiteRWSet: void <init>()>
<soot.jimple.toolkits.pointer.StmtRWSet: boolean addFieldRef(soot.PointsToSet,java.lang.Object)>
<soot.jimple.toolkits.pointer.StmtRWSet: boolean addGlobal(soot.SootField)>
<soot.jimple.toolkits.pointer.StmtRWSet: boolean hasNonEmptyIntersection(soot.jimple.toolkits.pointer.RWSet)>
<soot.jimple.toolkits.pointer.StmtRWSet: java.util.Set getFields()>
<soot.jimple.toolkits.pointer.StmtRWSet: java.util.Set getGlobals()>
<soot.jimple.toolkits.pointer.StmtRWSet: soot.PointsToSet getBaseForField(java.lang.Object)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileDescriptorNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileInputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileOutputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileSystemNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileSystemNative: void java_io_FileSystem_getFileSystem(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoFileSystemNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectInputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectInputStreamNative: void java_io_ObjectInputStream_latestUserDefinedLoader(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectInputStreamNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectOutputStreamNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaIoObjectStreamClassNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void java_lang_ClassLoader_defineClass0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void java_lang_ClassLoader_findBootstrapClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void java_lang_ClassLoader_findLoadedClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void java_lang_ClassLoader_getCallerClassLoader(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassLoaderNativeLibraryNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_forName0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getClassLoader0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getComponentType(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getConstructor0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getConstructors0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getDeclaredClasses0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getDeclaredConstructors0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getDeclaringClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getField0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getFields0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getInterfaces(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getMethod0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getMethods0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getName(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getPrimitiveClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getProtectionDomain0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getSigners(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_getSuperclass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_newInstance0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_setProtectionDomain0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void java_lang_Class_setSigners(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangClassNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangDoubleNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangFloatNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangObjectNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangObjectNative: void java_lang_Object_clone(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangObjectNative: void java_lang_Object_getClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangObjectNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangPackageNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangPackageNative: void java_lang_Package_getSystemPackage0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangPackageNative: void java_lang_Package_getSystemPackages0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangPackageNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectArrayNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectConstructorNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectFieldNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectMethodNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangReflectProxyNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangRuntimeNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangRuntimeNative: void java_lang_Runtime_execInternal(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangRuntimeNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void java_lang_SecurityManager_currentClassLoader0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void java_lang_SecurityManager_currentLoadedClass0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void java_lang_SecurityManager_getClassContext(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSecurityManagerNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangShutdownNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStrictMathNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStringNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStringNative: void java_lang_String_intern(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangStringNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_arraycopy(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_getCallerClass(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_initProperties(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_mapLibraryName(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_setErr0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_setIn0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void java_lang_System_setOut0(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangSystemNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThreadNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThreadNative: void java_lang_Thread_currentThread(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThreadNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThrowableNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThrowableNative: void java_lang_Throwable_fillInStackTrace(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaLangThrowableNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressImplNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressImplNative: void java_net_InetAddressImpl_getHostByAddr(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressImplNative: void java_net_InetAddressImpl_getLocalHostName(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressImplNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaNetInetAddressNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaSecurityAccessControllerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaSecurityAccessControllerNative: void java_security_AccessController_getInheritedAccessControlContext(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaSecurityAccessControllerNative: void java_security_AccessController_getStackAccessControlContext(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaSecurityAccessControllerNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilJarJarFileNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilJarJarFileNative: void java_util_jar_JarFile_getMetaInfoEntryNames(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilJarJarFileNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilResourceBundleNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilTimeZoneNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilTimeZoneNative: void java_util_TimeZone_getSystemTimeZoneID(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilTimeZoneNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipCRC32Native: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipInflaterNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipZipEntryNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.JavaUtilZipZipFileNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.NativeMethodClass: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscSignalHandlerNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscSignalNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscUnsafeNative: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscUnsafeNative: void simulateMethod(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.nativemethods.SunMiscUnsafeNative: void sun_misc_Unsafe_allocateInstance(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.representations.GeneralConstObject: soot.Type getType()>
<soot.jimple.toolkits.pointer.representations.GeneralConstObject: void <init>(soot.Type,java.lang.String)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable arrayElementOf(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable cloneObject(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable newInstanceOf(soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable staticField(java.lang.String,java.lang.String)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable tempField(java.lang.String)>
<soot.jimple.toolkits.pointer.util.NativeHelper: soot.jimple.toolkits.pointer.representations.ReferenceVariable tempLocalVariable(soot.SootMethod)>
<soot.jimple.toolkits.pointer.util.NativeHelper: void assign(soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable)>
<soot.jimple.toolkits.pointer.util.NativeHelper: void assignObjectTo(soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.AbstractObject)>
<soot.jimple.toolkits.pointer.util.NativeMethodDriver: boolean process(soot.SootMethod,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable,soot.jimple.toolkits.pointer.representations.ReferenceVariable[])>
<soot.jimple.toolkits.pointer.util.NativeMethodDriver: void <init>(soot.jimple.toolkits.pointer.util.NativeHelper)>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: java.util.List getCopiesOfAt(soot.Local,soot.jimple.Stmt)>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.scalar.EqualLocalsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: boolean areEqualUses(java.util.Map,java.util.List)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: boolean areEqualUses(soot.jimple.Stmt,soot.Local,soot.jimple.Stmt,soot.Local)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.scalar.EqualUsesAnalysis: void merge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.scalar.FastAvailableExpressionsAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.FastAvailableExpressionsAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.FastAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.SootMethod,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.FastAvailableExpressionsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.scalar.PessimisticAvailableExpressionsAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.PessimisticAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.SootMethod,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.SlowAvailableExpressionsAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.SlowAvailableExpressionsAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.SlowAvailableExpressionsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.jimple.toolkits.scalar.SlowAvailableExpressionsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.scalar.ToppedSet: java.lang.Object emptySet()>
<soot.jimple.toolkits.scalar.ToppedSet: java.lang.String toString()>
<soot.jimple.toolkits.scalar.ToppedSet: java.util.List toList()>
<soot.jimple.toolkits.scalar.ToppedSet: soot.jimple.toolkits.scalar.ToppedSet clone()>
<soot.jimple.toolkits.scalar.ToppedSet: soot.toolkits.scalar.FlowSet clone()>
<soot.jimple.toolkits.scalar.ToppedSet: void <init>(soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.scalar.ToppedSet: void add(java.lang.Object)>
<soot.jimple.toolkits.scalar.pre.DelayabilityAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.pre.DelayabilityAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.pre.DelayabilityAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.jimple.toolkits.scalar.pre.EarliestnessComputation,java.util.Map,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.EarliestnessComputation: java.lang.Object getFlowBefore(java.lang.Object)>
<soot.jimple.toolkits.scalar.pre.EarliestnessComputation: void <init>(soot.toolkits.graph.UnitGraph,soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis,soot.jimple.toolkits.scalar.pre.DownSafetyAnalysis,soot.SideEffectTester,soot.toolkits.scalar.FlowSet)>
<soot.jimple.toolkits.scalar.pre.NotIsolatedAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.pre.NotIsolatedAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.pre.NotIsolatedAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,soot.jimple.toolkits.scalar.pre.LatestComputation,java.util.Map,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester)>
<soot.jimple.toolkits.scalar.pre.UpSafetyAnalysis: void <init>(soot.toolkits.graph.DirectedGraph,java.util.Map,soot.SideEffectTester,soot.toolkits.scalar.BoundedFlowSet)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: boolean containsMethod(java.lang.Object)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: java.lang.Object getMethod(int)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: java.util.List getRunMethods()>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: soot.SootMethod getStartStmtMethod()>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void <init>()>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void addMethod(java.lang.Object)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void addRunMethod(java.lang.Object)>
<soot.jimple.toolkits.thread.AbstractRuntimeThread: void setStartStmtMethod(soot.SootMethod)>
<soot.jimple.toolkits.thread.EncapsulatedObjectAnalysis: boolean isMethodPureOnObject(soot.SootMethod)>
<soot.jimple.toolkits.thread.EncapsulatedObjectAnalysis: void <init>()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.List getMayAliasList(soot.jimple.spark.sets.PointsToSetInternal)>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToAllocNodes()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToJoin()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Map getStartToRunMethods()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Set getJoinStatements()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: java.util.Set getStartStatements()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: void <init>(soot.toolkits.graph.UnitGraph,soot.SootMethod,soot.jimple.toolkits.callgraph.CallGraph,soot.jimple.spark.pag.PAG)>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: void doFlowInsensitiveSingleIterationAnalysis()>
<soot.jimple.toolkits.thread.mhp.StartJoinAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.thread.mhp.TargetMethodsFinder: java.util.List find(soot.Unit,soot.jimple.toolkits.callgraph.CallGraph,boolean,boolean)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiCalledMethods: java.util.Set getMultiCalledMethods()>
<soot.jimple.toolkits.thread.mhp.findobject.MultiCalledMethods: void <init>(soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph,java.util.Set)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: int indexOf(java.lang.Object)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: soot.toolkits.scalar.FlowSet getMultiRunStatements()>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: void <init>(soot.toolkits.graph.UnitGraph,soot.SootMethod,java.util.Set,soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: void findMultiCalledMethodsIntra(java.util.Set,soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.thread.mhp.findobject.MultiRunStatementsFinder: void flowThrough(java.util.BitSet,soot.Unit,java.util.BitSet)>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: java.util.Iterator iterator()>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: java.util.List getTrimSuccsOf(java.lang.Object)>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: java.util.Set getClinitMethods()>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: void <init>(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: void buildChainAndSuccs(soot.jimple.toolkits.callgraph.CallGraph)>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: void buildPreds()>
<soot.jimple.toolkits.thread.mhp.pegcallgraph.PegCallGraph: void trim()>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet approximatedReadSet(soot.SootMethod,soot.jimple.Stmt,soot.Value,boolean)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet approximatedWriteSet(soot.SootMethod,soot.jimple.Stmt,soot.Value,boolean)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet nonTransitiveReadSet(soot.SootMethod)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet nonTransitiveWriteSet(soot.SootMethod)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet readSet(soot.SootMethod,soot.jimple.Stmt,soot.jimple.toolkits.thread.synchronization.CriticalSection,java.util.HashSet)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet valueRWSet(soot.Value,soot.SootMethod,soot.jimple.Stmt,soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: soot.jimple.toolkits.pointer.RWSet writeSet(soot.SootMethod,soot.jimple.Stmt,soot.jimple.toolkits.thread.synchronization.CriticalSection,java.util.Set)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis: void findNTRWSets(soot.SootMethod)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup: java.util.Iterator iterator()>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup: void <init>(int)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup: void add(soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup: void mergeGroups(soot.jimple.toolkits.thread.synchronization.CriticalSectionGroup)>
<soot.jimple.toolkits.thread.synchronization.DeadlockAvoidanceEdge: java.lang.Object clone()>
<soot.jimple.toolkits.thread.synchronization.DeadlockAvoidanceEdge: void <init>(soot.SootClass)>
<soot.jimple.toolkits.thread.synchronization.LockAllocationBodyTransformer: soot.jimple.InstanceFieldRef reconstruct(soot.Body,soot.PatchingChain,soot.jimple.InstanceFieldRef,soot.jimple.Stmt,boolean)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: java.lang.Integer addFromSubanalysis(soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo,soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis,soot.jimple.Stmt,soot.Value)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: java.lang.Object entryInitialFlow()>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: java.lang.Object newInitialFlow()>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: java.util.List getLocksetOf(soot.jimple.toolkits.thread.synchronization.CriticalSectionAwareSideEffectAnalysis,soot.jimple.toolkits.pointer.RWSet,soot.jimple.toolkits.thread.synchronization.CriticalSection)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: soot.EquivalentValue baseFor(soot.jimple.Ref)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: soot.EquivalentValue indexFor(soot.jimple.Ref)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: void copy(java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.thread.synchronization.LockableReferenceAnalysis: void merge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo: boolean equals(java.lang.Object)>
<soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo: int hashCode()>
<soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo: java.lang.Object clone()>
<soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo: void <init>()>
<soot.jimple.toolkits.thread.synchronization.NewStaticLock: soot.SootClass getLockClass()>
<soot.jimple.toolkits.thread.synchronization.NewStaticLock: void <init>(soot.SootClass)>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: soot.jimple.toolkits.typing.TypeNode typeNode(int,soot.Type,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: void caseArrayType(soot.ArrayType)>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: void caseRefType(soot.RefType)>
<soot.jimple.toolkits.typing.ClassHierarchy$ConstructorChooser: void defaultCase(soot.Type)>
<soot.jimple.toolkits.typing.ClassHierarchy$ToInt: soot.Type toInt(soot.Type)>
<soot.jimple.toolkits.typing.ClassHierarchy$ToInt: void defaultCase(soot.Type)>
<soot.jimple.toolkits.typing.ClassHierarchy: soot.jimple.toolkits.typing.TypeNode typeNode(soot.Type)>
<soot.jimple.toolkits.typing.ClassHierarchy: void <init>(soot.Scene)>
<soot.jimple.toolkits.typing.ConstraintChecker$RuntimeTypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.TypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.TypeNode: soot.Type type()>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode array()>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode lca(soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.TypeNode: soot.jimple.toolkits.typing.TypeNode lcaIfUnique(soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.ArrayType,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.RefType,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeNode: void <init>(int,soot.Type,soot.jimple.toolkits.typing.ClassHierarchy)>
<soot.jimple.toolkits.typing.TypeVariable: java.lang.String toString()>
<soot.jimple.toolkits.typing.TypeVariable: java.util.List children()>
<soot.jimple.toolkits.typing.TypeVariable: java.util.List parents()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeNode approx()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeNode type()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable array()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable ecr()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable element()>
<soot.jimple.toolkits.typing.TypeVariable: soot.jimple.toolkits.typing.TypeVariable union(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.TypeResolver)>
<soot.jimple.toolkits.typing.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.TypeResolver,soot.jimple.toolkits.typing.TypeNode)>
<soot.jimple.toolkits.typing.TypeVariable: void addChild(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.TypeVariable: void addParent(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.TypeVariable: void fixApprox(java.util.TreeSet)>
<soot.jimple.toolkits.typing.TypeVariable: void fixChildren()>
<soot.jimple.toolkits.typing.TypeVariable: void fixDepth()>
<soot.jimple.toolkits.typing.TypeVariable: void fixParents()>
<soot.jimple.toolkits.typing.TypeVariable: void makeElement()>
<soot.jimple.toolkits.typing.TypeVariable: void merge(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.TypeVariable: void propagate()>
<soot.jimple.toolkits.typing.TypeVariable: void removeChild(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.TypeVariable: void removeIndirectRelations()>
<soot.jimple.toolkits.typing.TypeVariable: void removeParent(soot.jimple.toolkits.typing.TypeVariable)>
<soot.jimple.toolkits.typing.fast.AugHierarchy: java.util.Collection lcas(soot.Type,soot.Type)>
<soot.jimple.toolkits.typing.fast.AugHierarchy: java.util.Collection lcas_(soot.Type,soot.Type)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode: void <init>(soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode,soot.RefType)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy: java.util.Collection buildAncestryTree(soot.RefType)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy: java.util.Collection lcas(soot.Type,soot.Type)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy: java.util.Collection lcas_(soot.Type,soot.Type)>
<soot.jimple.toolkits.typing.fast.BytecodeHierarchy: soot.RefType leastCommonNode(soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode,soot.jimple.toolkits.typing.fast.BytecodeHierarchy$AncestryTreeNode)>
<soot.jimple.toolkits.typing.fast.QueuedSet: boolean addLast(java.lang.Object)>
<soot.jimple.toolkits.typing.fast.QueuedSet: int addLast(java.util.List)>
<soot.jimple.toolkits.typing.fast.QueuedSet: java.lang.Object removeFirst()>
<soot.jimple.toolkits.typing.fast.QueuedSet: void <init>()>
<soot.jimple.toolkits.typing.fast.QueuedSet: void <init>(java.util.List)>
<soot.jimple.toolkits.typing.fast.SingletonList: java.lang.Object get(int)>
<soot.jimple.toolkits.typing.fast.SingletonList: void <init>(java.lang.Object)>
<soot.jimple.toolkits.typing.fast.TypeResolver$CastInsertionUseVisitor: soot.Value visit(soot.Value,soot.Type,soot.jimple.Stmt)>
<soot.jimple.toolkits.typing.fast.TypeResolver$TypePromotionUseVisitor: soot.Value visit(soot.Value,soot.Type,soot.jimple.Stmt)>
<soot.jimple.toolkits.typing.fast.Typing: soot.Type get(soot.Local)>
<soot.jimple.toolkits.typing.fast.Typing: soot.Type set(soot.Local,soot.Type)>
<soot.jimple.toolkits.typing.integer.ConstraintChecker$RuntimeTypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.integer.ConstraintChecker: void caseTableSwitchStmt(soot.jimple.TableSwitchStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseAssignStmt(soot.jimple.AssignStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseIdentityStmt(soot.jimple.IdentityStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseIfStmt(soot.jimple.IfStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseLookupSwitchStmt(soot.jimple.LookupSwitchStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseReturnStmt(soot.jimple.ReturnStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void caseTableSwitchStmt(soot.jimple.TableSwitchStmt)>
<soot.jimple.toolkits.typing.integer.ConstraintCollector: void handleInvokeExpr(soot.jimple.InvokeExpr)>
<soot.jimple.toolkits.typing.integer.StronglyConnectedComponents: void <init>(java.util.List)>
<soot.jimple.toolkits.typing.integer.StronglyConnectedComponents: void dfsg_visit(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.StronglyConnectedComponents: void dfsgt_visit(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.StronglyConnectedComponents: void merge(java.util.List)>
<soot.jimple.toolkits.typing.integer.TypeException: void <init>(java.lang.String)>
<soot.jimple.toolkits.typing.integer.TypeNode: soot.Type type()>
<soot.jimple.toolkits.typing.integer.TypeNode: void <init>(int,soot.Type)>
<soot.jimple.toolkits.typing.integer.TypeResolver: soot.jimple.toolkits.typing.integer.TypeVariable typeVariable()>
<soot.jimple.toolkits.typing.integer.TypeResolver: soot.jimple.toolkits.typing.integer.TypeVariable typeVariable(soot.Local)>
<soot.jimple.toolkits.typing.integer.TypeResolver: soot.jimple.toolkits.typing.integer.TypeVariable typeVariable(soot.Type)>
<soot.jimple.toolkits.typing.integer.TypeResolver: soot.jimple.toolkits.typing.integer.TypeVariable typeVariable(soot.jimple.toolkits.typing.integer.TypeNode)>
<soot.jimple.toolkits.typing.integer.TypeResolver: void <init>(soot.jimple.JimpleBody)>
<soot.jimple.toolkits.typing.integer.TypeResolver: void check_and_fix_constraints()>
<soot.jimple.toolkits.typing.integer.TypeResolver: void compute_approximate_types()>
<soot.jimple.toolkits.typing.integer.TypeResolver: void compute_solved()>
<soot.jimple.toolkits.typing.integer.TypeResolver: void merge_connected_components()>
<soot.jimple.toolkits.typing.integer.TypeResolver: void merge_single_constraints()>
<soot.jimple.toolkits.typing.integer.TypeResolver: void refresh_solved()>
<soot.jimple.toolkits.typing.integer.TypeVariable: java.lang.String toString()>
<soot.jimple.toolkits.typing.integer.TypeVariable: java.util.List children()>
<soot.jimple.toolkits.typing.integer.TypeVariable: java.util.List parents()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode approx()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode inv_approx()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeNode type()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeVariable ecr()>
<soot.jimple.toolkits.typing.integer.TypeVariable: soot.jimple.toolkits.typing.integer.TypeVariable union(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.integer.TypeResolver)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void <init>(int,soot.jimple.toolkits.typing.integer.TypeResolver,soot.jimple.toolkits.typing.integer.TypeNode)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void addChild(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void addParent(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void fixApprox(java.util.TreeSet)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void fixChildren()>
<soot.jimple.toolkits.typing.integer.TypeVariable: void fixInvApprox(java.util.TreeSet)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void fixParents()>
<soot.jimple.toolkits.typing.integer.TypeVariable: void merge(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void removeChild(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.jimple.toolkits.typing.integer.TypeVariable: void removeParent(soot.jimple.toolkits.typing.integer.TypeVariable)>
<soot.options.Options: boolean parse(java.lang.String[])>
<soot.options.Options: java.lang.String main_class()>
<soot.options.Options: java.lang.String output_dir()>
<soot.options.Options: java.lang.String soot_classpath()>
<soot.options.Options: java.util.List dump_body()>
<soot.options.Options: java.util.List dump_cfg()>
<soot.options.Options: java.util.List dynamic_class()>
<soot.options.Options: java.util.List dynamic_dir()>
<soot.options.Options: java.util.List dynamic_package()>
<soot.options.Options: java.util.List exclude()>
<soot.options.Options: java.util.List include()>
<soot.options.Options: java.util.List phase_help()>
<soot.options.Options: java.util.List process_dir()>
<soot.options.OptionsBase: java.lang.String nextOption()>
<soot.options.OptionsBase: java.util.LinkedList classes()>
<soot.options.OptionsBase: void <init>()>
<soot.options.OptionsBase: void pushOptions(java.lang.String)>
<soot.shimple.Shimple: void redirectToPreds(soot.Body,soot.Unit)>
<soot.shimple.internal.PhiNodeManager: boolean doEliminatePhiNodes()>
<soot.shimple.internal.PhiNodeManager: boolean dominates(soot.Unit,soot.Unit)>
<soot.shimple.internal.PhiNodeManager: boolean insertTrivialPhiNodes()>
<soot.shimple.internal.PhiNodeManager: boolean needsPhiNode(soot.Local,soot.toolkits.graph.Block)>
<soot.shimple.internal.PhiNodeManager: java.util.Map getUnitToBlockMap(soot.toolkits.graph.BlockGraph)>
<soot.shimple.internal.PhiNodeManager: void prependTrivialPhiNode(soot.Local,soot.toolkits.graph.Block)>
<soot.shimple.internal.PhiNodeManager: void trimPhiNode(soot.shimple.PhiExpr)>
<soot.shimple.internal.PiNodeManager: boolean insertTrivialPiNodes()>
<soot.shimple.internal.PiNodeManager: void eliminatePiNodes(boolean)>
<soot.shimple.internal.PiNodeManager: void insertPiNodes(soot.Local,soot.toolkits.graph.Block)>
<soot.shimple.internal.PiNodeManager: void piHandleSwitchStmt(soot.Local,soot.Unit)>
<soot.shimple.internal.SHashMultiMap: java.util.Set newSet()>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain)>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain,soot.Unit)>
<soot.shimple.internal.SPatchingChain$SPatchingIterator: void <init>(soot.shimple.internal.SPatchingChain,soot.util.Chain,soot.Unit,soot.Unit)>
<soot.shimple.internal.SPatchingChain: boolean add(java.lang.Object)>
<soot.shimple.internal.SPatchingChain: boolean add(soot.Unit)>
<soot.shimple.internal.SPatchingChain: java.util.Iterator iterator()>
<soot.shimple.internal.SPatchingChain: java.util.Iterator iterator(java.lang.Object)>
<soot.shimple.internal.SPatchingChain: java.util.Iterator iterator(java.lang.Object,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: java.util.Iterator iterator(soot.Unit)>
<soot.shimple.internal.SPatchingChain: java.util.Iterator iterator(soot.Unit,soot.Unit)>
<soot.shimple.internal.SPatchingChain: soot.shimple.internal.SUnitBox getSBox(soot.UnitBox)>
<soot.shimple.internal.SPatchingChain: void <init>(soot.Body,soot.util.Chain)>
<soot.shimple.internal.SPatchingChain: void addFirst(java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void addFirst(soot.Unit)>
<soot.shimple.internal.SPatchingChain: void addLast(java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void addLast(soot.Unit)>
<soot.shimple.internal.SPatchingChain: void computeNeedsPatching()>
<soot.shimple.internal.SPatchingChain: void insertAfter(java.lang.Object,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertAfter(java.util.List,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertAfter(java.util.List,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void insertAfter(soot.Unit,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void insertBefore(java.lang.Object,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertBefore(java.util.List,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void insertBefore(java.util.List,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void insertBefore(soot.Unit,soot.Unit)>
<soot.shimple.internal.SPatchingChain: void processPhiNode(soot.Unit)>
<soot.shimple.internal.SPatchingChain: void reprocessPhiNodes()>
<soot.shimple.internal.SPatchingChain: void swapWith(java.lang.Object,java.lang.Object)>
<soot.shimple.internal.SPatchingChain: void swapWith(soot.Unit,soot.Unit)>
<soot.shimple.internal.SPhiExpr: boolean addArg(soot.Value,soot.Unit)>
<soot.shimple.internal.SPhiExpr: boolean addArg(soot.Value,soot.toolkits.graph.Block)>
<soot.shimple.internal.SPhiExpr: boolean removeArg(soot.toolkits.scalar.ValueUnitPair)>
<soot.shimple.internal.SPhiExpr: int getArgIndex(soot.toolkits.graph.Block)>
<soot.shimple.internal.SPhiExpr: java.lang.Object clone()>
<soot.shimple.internal.SPhiExpr: java.util.List getArgs()>
<soot.shimple.internal.SPhiExpr: java.util.List getPreds()>
<soot.shimple.internal.SPhiExpr: java.util.List getUnitBoxes()>
<soot.shimple.internal.SPhiExpr: java.util.List getUseBoxes()>
<soot.shimple.internal.SPhiExpr: java.util.List getValues()>
<soot.shimple.internal.SPhiExpr: soot.Value getValue(int)>
<soot.shimple.internal.SPhiExpr: soot.toolkits.scalar.ValueUnitPair getArgBox(int)>
<soot.shimple.internal.SPhiExpr: soot.toolkits.scalar.ValueUnitPair getArgBox(soot.Unit)>
<soot.shimple.internal.SPhiExpr: soot.toolkits.scalar.ValueUnitPair getArgBox(soot.toolkits.graph.Block)>
<soot.shimple.internal.SPhiExpr: void <init>(java.util.List,java.util.List)>
<soot.shimple.internal.SPhiExpr: void <init>(soot.Local,java.util.List)>
<soot.shimple.internal.SPhiExpr: void updateCache()>
<soot.shimple.internal.SPiExpr: java.lang.Object clone()>
<soot.shimple.internal.SPiExpr: java.lang.Object getTargetKey()>
<soot.shimple.internal.SPiExpr: java.util.List getUnitBoxes()>
<soot.shimple.internal.SPiExpr: java.util.List getUseBoxes()>
<soot.shimple.internal.SPiExpr: soot.Type getType()>
<soot.shimple.internal.SPiExpr: soot.Unit getCondStmt()>
<soot.shimple.internal.SPiExpr: soot.Value getValue()>
<soot.shimple.internal.SPiExpr: soot.toolkits.scalar.ValueUnitPair getArgBox()>
<soot.shimple.internal.SPiExpr: void <init>(soot.Value,soot.Unit,java.lang.Object)>
<soot.shimple.internal.SPiExpr: void toString(soot.UnitPrinter)>
<soot.shimple.internal.SValueUnitPair: void <init>(soot.Value,soot.Unit)>
<soot.shimple.internal.SValueUnitPair: void setUnit(soot.Unit)>
<soot.shimple.internal.ShimpleBodyBuilder: int indexOfLocal(soot.Value)>
<soot.shimple.internal.ShimpleBodyBuilder: java.lang.String makeUniqueLocalName(java.lang.String,java.util.Set)>
<soot.shimple.internal.ShimpleBodyBuilder: soot.Local fetchNewLocal(soot.Local,java.lang.Integer)>
<soot.shimple.internal.ShimpleBodyBuilder: void makeUniqueLocalNames()>
<soot.shimple.internal.ShimpleBodyBuilder: void renameLocals()>
<soot.shimple.internal.ShimpleBodyBuilder: void renameLocalsSearch(soot.toolkits.graph.Block)>
<soot.shimple.toolkits.scalar.SCPFAnalysis: boolean merge(soot.Local,soot.jimple.Constant)>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.lang.Object entryInitialFlow()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.lang.Object newInitialFlow()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.List getDeadStmts()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.Map getResults()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: java.util.Map getStmtsToReplace()>
<soot.shimple.toolkits.scalar.SCPFAnalysis: soot.toolkits.scalar.Pair processDefinitionStmt(soot.Unit)>
<soot.shimple.toolkits.scalar.SCPFAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.shimple.toolkits.scalar.SCPFAnalysis: void flowThrough(java.lang.Object,soot.Unit,java.util.List,java.util.List)>
<soot.shimple.toolkits.scalar.SEvaluator: soot.jimple.Constant getFuzzyConstantValueOf(soot.Value)>
<soot.shimple.toolkits.scalar.SEvaluator: soot.jimple.Constant getFuzzyConstantValueOf(soot.Value,java.util.Map)>
<soot.shimple.toolkits.scalar.ShimpleLocalDefs: java.util.List getDefsOf(soot.Local)>
<soot.shimple.toolkits.scalar.ShimpleLocalUses: java.util.List getUsesOf(soot.Local)>
<soot.shimple.toolkits.scalar.ShimpleLocalUses: void <init>(soot.shimple.ShimpleBody)>
<soot.tagkit.AbstractHost: int searchForTag(java.lang.String)>
<soot.tagkit.AbstractHost: java.util.List getTags()>
<soot.tagkit.AbstractHost: soot.tagkit.Tag getTag(java.lang.String)>
<soot.tagkit.AbstractHost: void addAllTagsOf(soot.tagkit.Host)>
<soot.tagkit.AbstractHost: void addTag(soot.tagkit.Tag)>
<soot.tagkit.AnnotationAnnotationElem: soot.tagkit.AnnotationTag getValue()>
<soot.tagkit.AnnotationAnnotationElem: void <init>(soot.tagkit.AnnotationTag,char,java.lang.String)>
<soot.tagkit.AnnotationArrayElem: void <init>(java.util.ArrayList,char,java.lang.String)>
<soot.tagkit.AnnotationClassElem: java.lang.String getDesc()>
<soot.tagkit.AnnotationClassElem: void <init>(java.lang.String,char,java.lang.String)>
<soot.tagkit.AnnotationDefaultTag: soot.tagkit.AnnotationElem getDefaultVal()>
<soot.tagkit.AnnotationDefaultTag: void <init>(soot.tagkit.AnnotationElem)>
<soot.tagkit.AnnotationDoubleElem: void <init>(double,char,java.lang.String)>
<soot.tagkit.AnnotationElem: java.lang.String getName()>
<soot.tagkit.AnnotationElem: void <init>(char,java.lang.String)>
<soot.tagkit.AnnotationEnumElem: java.lang.String getConstantName()>
<soot.tagkit.AnnotationEnumElem: java.lang.String getTypeName()>
<soot.tagkit.AnnotationEnumElem: void <init>(java.lang.String,java.lang.String,char,java.lang.String)>
<soot.tagkit.AnnotationFloatElem: void <init>(float,char,java.lang.String)>
<soot.tagkit.AnnotationIntElem: void <init>(int,char,java.lang.String)>
<soot.tagkit.AnnotationLongElem: void <init>(long,char,java.lang.String)>
<soot.tagkit.AnnotationStringElem: java.lang.String getValue()>
<soot.tagkit.AnnotationStringElem: void <init>(java.lang.String,char,java.lang.String)>
<soot.tagkit.AnnotationTag: java.lang.String getType()>
<soot.tagkit.AnnotationTag: void <init>(java.lang.String,int)>
<soot.tagkit.AnnotationTag: void setElems(java.util.ArrayList)>
<soot.tagkit.CodeAttribute: java.lang.String getName()>
<soot.tagkit.CodeAttribute: java.lang.String toString()>
<soot.tagkit.CodeAttribute: void <init>(java.lang.String,java.util.List,java.util.List)>
<soot.tagkit.ColorTag: java.lang.String getAnalysisType()>
<soot.tagkit.ColorTag: void <init>(int,boolean,java.lang.String)>
<soot.tagkit.ColorTag: void <init>(int,int,int,boolean,java.lang.String)>
<soot.tagkit.ColorTag: void <init>(int,java.lang.String)>
<soot.tagkit.EnclosingMethodTag: java.lang.String getEnclosingClass()>
<soot.tagkit.EnclosingMethodTag: java.lang.String getEnclosingMethod()>
<soot.tagkit.EnclosingMethodTag: java.lang.String getEnclosingMethodSig()>
<soot.tagkit.EnclosingMethodTag: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<soot.tagkit.InnerClassAttribute: java.util.ArrayList getSpecs()>
<soot.tagkit.InnerClassAttribute: void <init>(java.util.ArrayList)>
<soot.tagkit.InnerClassTag: byte[] getValue()>
<soot.tagkit.InnerClassTag: java.lang.String getInnerClass()>
<soot.tagkit.InnerClassTag: java.lang.String getOuterClass()>
<soot.tagkit.InnerClassTag: java.lang.String getShortName()>
<soot.tagkit.InnerClassTag: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>
<soot.tagkit.KeyTag: java.lang.String analysisType()>
<soot.tagkit.KeyTag: java.lang.String key()>
<soot.tagkit.KeyTag: void <init>(int,int,int,java.lang.String,java.lang.String)>
<soot.tagkit.KeyTag: void <init>(int,java.lang.String)>
<soot.tagkit.KeyTag: void <init>(int,java.lang.String,java.lang.String)>
<soot.tagkit.LinkTag: java.lang.String getClassName()>
<soot.tagkit.LinkTag: java.lang.String toString()>
<soot.tagkit.LinkTag: soot.tagkit.Host getLink()>
<soot.tagkit.LinkTag: void <init>(java.lang.String,soot.tagkit.Host,java.lang.String)>
<soot.tagkit.LinkTag: void <init>(java.lang.String,soot.tagkit.Host,java.lang.String,java.lang.String)>
<soot.tagkit.LoopInvariantTag: void <init>(java.lang.String)>
<soot.tagkit.ParamNamesTag: java.lang.String toString()>
<soot.tagkit.ParamNamesTag: void <init>(java.util.ArrayList)>
<soot.tagkit.SignatureTag: java.lang.String getSignature()>
<soot.tagkit.SignatureTag: void <init>(java.lang.String)>
<soot.tagkit.SourceFileTag: byte[] getValue()>
<soot.tagkit.SourceFileTag: java.lang.String getSourceFile()>
<soot.tagkit.SourceFileTag: java.lang.String toString()>
<soot.tagkit.SourceFileTag: void <init>(java.lang.String)>
<soot.tagkit.SourceFileTag: void setSourceFile(java.lang.String)>
<soot.tagkit.StringConstantValueTag: java.lang.String getStringValue()>
<soot.tagkit.StringConstantValueTag: void <init>(java.lang.String)>
<soot.tagkit.StringTag: java.lang.String getAnalysisType()>
<soot.tagkit.StringTag: java.lang.String getInfo()>
<soot.tagkit.StringTag: java.lang.String toString()>
<soot.tagkit.StringTag: void <init>(java.lang.String)>
<soot.tagkit.StringTag: void <init>(java.lang.String,java.lang.String)>
<soot.tagkit.VisibilityAnnotationTag: java.util.ArrayList getAnnotations()>
<soot.tagkit.VisibilityAnnotationTag: void addAnnotation(soot.tagkit.AnnotationTag)>
<soot.tagkit.VisibilityParameterAnnotationTag: java.util.ArrayList getVisibilityAnnotations()>
<soot.tagkit.VisibilityParameterAnnotationTag: void addVisibilityAnnotation(soot.tagkit.VisibilityAnnotationTag)>
<soot.toolkits.astmetrics.ASTMetric: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.toolkits.astmetrics.ASTMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ASTMetric: soot.toolkits.astmetrics.ClassData getClassData()>
<soot.toolkits.astmetrics.ASTMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ASTMetric: void execute()>
<soot.toolkits.astmetrics.AbruptEdgesMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.AbruptEdgesMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ClassData: void <init>(java.lang.String)>
<soot.toolkits.astmetrics.ConditionComplexityMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.ConditionComplexityMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ConstructNumbersMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.ConstructNumbersMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.ExpressionComplexityMetric: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.toolkits.astmetrics.ExpressionComplexityMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.ExpressionComplexityMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.IdentifiersMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.IdentifiersMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.NumLocalsMetric: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.NumLocalsMetric: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth$1: polyglot.ast.Node override(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth$1: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth$1: void <init>(soot.toolkits.astmetrics.StmtSumWeightedByDepth)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: polyglot.ast.Node leave(polyglot.ast.Node,polyglot.ast.Node,polyglot.visit.NodeVisitor)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: polyglot.visit.NodeVisitor enter(polyglot.ast.Node,polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: void <init>(polyglot.ast.Node)>
<soot.toolkits.astmetrics.StmtSumWeightedByDepth: void printAstMetric(polyglot.ast.Node,polyglot.util.CodeWriter)>
<soot.toolkits.astmetrics.metricPrettyPrinter: void print(polyglot.ast.Node,polyglot.ast.Node,polyglot.util.CodeWriter)>
<soot.toolkits.exceptions.ThrowableSet$AlreadyHasExclusionsException: void <init>(java.lang.String)>
<soot.toolkits.exceptions.ThrowableSet$Pair: soot.toolkits.exceptions.ThrowableSet getCaught()>
<soot.toolkits.exceptions.ThrowableSet$Pair: soot.toolkits.exceptions.ThrowableSet getUncaught()>
<soot.toolkits.exceptions.ThrowableSet$Pair: void <init>(soot.toolkits.exceptions.ThrowableSet,soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.exceptions.ThrowableSet: boolean catchableAs(soot.RefType)>
<soot.toolkits.exceptions.ThrowableSet: java.lang.String toAbbreviatedString(java.util.Set,char)>
<soot.toolkits.exceptions.ThrowableSet: java.lang.String toBriefString()>
<soot.toolkits.exceptions.ThrowableSet: java.lang.String toString()>
<soot.toolkits.exceptions.ThrowableSet: java.util.Iterator sortedThrowableIterator(java.util.Collection)>
<soot.toolkits.exceptions.ThrowableSet: java.util.Set addExceptionToSet(soot.RefLikeType,java.util.Set)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(java.util.Set)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(soot.AnySubType)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(soot.RefType)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet add(soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet getMemoizedAdds(java.lang.Object)>
<soot.toolkits.exceptions.ThrowableSet: soot.toolkits.exceptions.ThrowableSet$Pair whichCatchableAs(soot.RefType)>
<soot.toolkits.exceptions.ThrowableSet: void <init>(java.util.Set,java.util.Set)>
<soot.toolkits.exceptions.ThrowableSet: void <init>(java.util.Set,java.util.Set,soot.toolkits.exceptions.ThrowableSet$1)>
<soot.toolkits.graph.ArrayRefBlockGraph: java.util.Set computeLeaders(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.ArrayRefBlockGraph: void <init>(soot.Body)>
<soot.toolkits.graph.Block: java.lang.String toString()>
<soot.toolkits.graph.Block: java.util.List getPreds()>
<soot.toolkits.graph.Block: java.util.List getSuccs()>
<soot.toolkits.graph.Block: soot.Body getBody()>
<soot.toolkits.graph.Block: soot.Unit getHead()>
<soot.toolkits.graph.Block: soot.Unit getTail()>
<soot.toolkits.graph.Block: void <init>(soot.Unit,soot.Unit,soot.Body,int,int,soot.toolkits.graph.BlockGraph)>
<soot.toolkits.graph.Block: void insertAfter(soot.Unit,soot.Unit)>
<soot.toolkits.graph.Block: void insertBefore(soot.Unit,soot.Unit)>
<soot.toolkits.graph.Block: void setPreds(java.util.List)>
<soot.toolkits.graph.Block: void setSuccs(java.util.List)>
<soot.toolkits.graph.BlockGraph: java.lang.String toString()>
<soot.toolkits.graph.BlockGraph: java.util.Iterator iterator()>
<soot.toolkits.graph.BlockGraph: java.util.List getBlocks()>
<soot.toolkits.graph.BlockGraph: java.util.List getHeads()>
<soot.toolkits.graph.BlockGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.BlockGraph: java.util.List getPredsOf(soot.toolkits.graph.Block)>
<soot.toolkits.graph.BlockGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.toolkits.graph.BlockGraph: java.util.List getSuccsOf(soot.toolkits.graph.Block)>
<soot.toolkits.graph.BlockGraph: java.util.List getTails()>
<soot.toolkits.graph.BlockGraph: java.util.Map buildBlocks(java.util.Set,soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.BlockGraph: java.util.Set computeLeaders(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.BlockGraph: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.BlockGraph: void addBlock(soot.Unit,soot.Unit,int,int,java.util.List,java.util.Map)>
<soot.toolkits.graph.BriefBlockGraph: void <init>(soot.Body)>
<soot.toolkits.graph.BriefUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.CompleteUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.CytronDominanceFrontier: boolean isFrontierKnown(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.CytronDominanceFrontier: java.util.List getDominanceFrontierOf(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.CytronDominanceFrontier: void bottomUpDispatch(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.CytronDominanceFrontier: void processNode(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DGEdge: boolean equals(java.lang.Object)>
<soot.toolkits.graph.DGEdge: int hashCode()>
<soot.toolkits.graph.DGEdge: java.lang.Object from()>
<soot.toolkits.graph.DGEdge: java.lang.Object to()>
<soot.toolkits.graph.DGEdge: void <init>(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.DominatorNode: boolean addChild(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DominatorNode: java.lang.Object getGode()>
<soot.toolkits.graph.DominatorNode: java.lang.String toString()>
<soot.toolkits.graph.DominatorNode: java.util.List getChildren()>
<soot.toolkits.graph.DominatorNode: soot.toolkits.graph.DominatorNode getParent()>
<soot.toolkits.graph.DominatorNode: void <init>(java.lang.Object)>
<soot.toolkits.graph.DominatorNode: void setParent(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DominatorTree: java.util.Iterator iterator()>
<soot.toolkits.graph.DominatorTree: java.util.List getChildrenOf(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DominatorTree: java.util.List getSuccsOf(soot.toolkits.graph.DominatorNode)>
<soot.toolkits.graph.DominatorTree: soot.toolkits.graph.DominatorNode fetchDode(java.lang.Object)>
<soot.toolkits.graph.DominatorTree: soot.toolkits.graph.DominatorNode fetchParent(java.lang.Object)>
<soot.toolkits.graph.DominatorTree: soot.toolkits.graph.DominatorNode getDode(java.lang.Object)>
<soot.toolkits.graph.DominatorTree: soot.toolkits.graph.DominatorNode getHead()>
<soot.toolkits.graph.DominatorTree: void <init>(soot.toolkits.graph.DominatorsFinder)>
<soot.toolkits.graph.DominatorTree: void buildTree()>
<soot.toolkits.graph.DummyBlock: java.util.Iterator iterator()>
<soot.toolkits.graph.DummyBlock: void <init>(soot.Body,int)>
<soot.toolkits.graph.DummyBlock: void makeHeadBlock(java.util.List)>
<soot.toolkits.graph.DummyBlock: void makeTailBlock(java.util.List)>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: java.lang.Object getHandlerNode()>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: soot.toolkits.exceptions.ThrowableSet getThrowables()>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: soot.toolkits.graph.Block getHandlerNode()>
<soot.toolkits.graph.ExceptionalBlockGraph$ExceptionDest: void <init>(soot.Trap,soot.toolkits.exceptions.ThrowableSet,soot.toolkits.graph.Block)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.Collection collectDests(soot.toolkits.graph.Block,soot.toolkits.graph.ExceptionalUnitGraph,java.util.Map)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.Collection getExceptionDests(java.lang.Object)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.Collection getExceptionDests(soot.toolkits.graph.Block)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.List getExceptionalSuccsOf(java.lang.Object)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.List getExceptionalSuccsOf(soot.toolkits.graph.Block)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.List getUnexceptionalSuccsOf(java.lang.Object)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.List getUnexceptionalSuccsOf(soot.toolkits.graph.Block)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.List mappedValues(java.util.List,java.util.Map)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.Map buildBlocks(java.util.Set,soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.ExceptionalBlockGraph: java.util.Map buildExceptionDests(soot.toolkits.graph.ExceptionalUnitGraph,java.util.Map)>
<soot.toolkits.graph.ExceptionalUnitGraph$1CFGEdge: void <init>(soot.toolkits.graph.ExceptionalUnitGraph,soot.Unit,soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: java.lang.Object getHandlerNode()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: soot.Trap getTrap()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: soot.Unit getHandlerNode()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: soot.toolkits.exceptions.ThrowableSet getThrowables()>
<soot.toolkits.graph.ExceptionalUnitGraph$ExceptionDest: void <init>(soot.Trap,soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.graph.ExceptionalUnitGraph: boolean mightThrowToIntraproceduralCatcher(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.Collection getExceptionDests(java.lang.Object)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.Collection getExceptionDests(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getExceptionalPredsOf(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getExceptionalSuccsOf(java.lang.Object)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getExceptionalSuccsOf(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalSuccsOf(java.lang.Object)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalSuccsOf(soot.Unit)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.Map addDestToMap(java.util.Map,soot.Unit,soot.Trap,soot.toolkits.exceptions.ThrowableSet)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.Map buildExceptionDests(soot.toolkits.exceptions.ThrowAnalysis)>
<soot.toolkits.graph.ExceptionalUnitGraph: java.util.Set buildExceptionalEdges(soot.toolkits.exceptions.ThrowAnalysis,java.util.Map,java.util.Map,java.util.Map,boolean)>
<soot.toolkits.graph.ExceptionalUnitGraph: soot.toolkits.exceptions.ThrowAnalysis getThrowAnalysis()>
<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body,soot.toolkits.exceptions.ThrowAnalysis,boolean)>
<soot.toolkits.graph.ExceptionalUnitGraph: void buildHeadsAndTails(java.util.Set)>
<soot.toolkits.graph.ExceptionalUnitGraph: void initialize(soot.toolkits.exceptions.ThrowAnalysis,boolean)>
<soot.toolkits.graph.HashMutableDirectedGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: boolean containsNode(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: int size()>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.Iterator iterator()>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.List getHeads()>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.List getNodes()>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.List getTails()>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.Set getPredsOfAsSet(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: java.util.Set getSuccsOfAsSet(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: void <init>()>
<soot.toolkits.graph.HashMutableDirectedGraph: void addEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: void addNode(java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: void printGraph()>
<soot.toolkits.graph.HashMutableDirectedGraph: void removeEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableDirectedGraph: void removeNode(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: boolean containsEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: boolean containsNode(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: java.lang.Object clone()>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: java.util.Iterator iterator()>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: java.util.List getLabelsForEdges(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: soot.toolkits.graph.MutableDirectedGraph getEdgesForLabel(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: void <init>()>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: void addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: void addNode(java.lang.Object)>
<soot.toolkits.graph.HashMutableEdgeLabelledDirectedGraph: void printGraph()>
<soot.toolkits.graph.HashReversibleGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.HashReversibleGraph: java.util.List getHeads()>
<soot.toolkits.graph.HashReversibleGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.HashReversibleGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.toolkits.graph.HashReversibleGraph: java.util.List getTails()>
<soot.toolkits.graph.HashReversibleGraph: soot.toolkits.graph.ReversibleGraph reverse()>
<soot.toolkits.graph.HashReversibleGraph: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.HashReversibleGraph: void addEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.InverseGraph: java.util.Iterator iterator()>
<soot.toolkits.graph.InverseGraph: java.util.List getHeads()>
<soot.toolkits.graph.InverseGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.InverseGraph: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.MHGDominatorsFinder: int indexOf(java.lang.Object)>
<soot.toolkits.graph.MHGDominatorsFinder: java.util.List getDominators(java.lang.Object)>
<soot.toolkits.graph.MHGDominatorsFinder: void doAnalysis()>
<soot.toolkits.graph.MemoryEfficientGraph: void <init>()>
<soot.toolkits.graph.MemoryEfficientGraph: void addEdge(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.MemoryEfficientGraph: void addNode(java.lang.Object)>
<soot.toolkits.graph.PseudoTopologicalOrderer: java.util.List computeOrder(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.PseudoTopologicalOrderer: java.util.List newList(soot.toolkits.graph.DirectedGraph,boolean)>
<soot.toolkits.graph.PseudoTopologicalOrderer: void visitNode(java.lang.Object)>
<soot.toolkits.graph.SimpleDominatorsAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.graph.SimpleDominatorsAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.graph.SimpleDominatorsAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.SimpleDominatorsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.SimpleDominatorsFinder: boolean isDominatedBy(java.lang.Object,java.lang.Object)>
<soot.toolkits.graph.SimpleDominatorsFinder: boolean isDominatedByAll(java.lang.Object,java.util.Collection)>
<soot.toolkits.graph.SimpleDominatorsFinder: java.lang.Object getImmediateDominator(java.lang.Object)>
<soot.toolkits.graph.SimpleDominatorsFinder: java.util.List getDominators(java.lang.Object)>
<soot.toolkits.graph.SimpleDominatorsFinder: soot.toolkits.graph.DirectedGraph getGraph()>
<soot.toolkits.graph.SimpleDominatorsFinder: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.graph.TrapUnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.UnitGraph: java.util.List getExtendedBasicBlockPathBetween(soot.Unit,soot.Unit)>
<soot.toolkits.graph.UnitGraph: java.util.List getHeads()>
<soot.toolkits.graph.UnitGraph: java.util.List getPredsOf(java.lang.Object)>
<soot.toolkits.graph.UnitGraph: java.util.List getPredsOf(soot.Unit)>
<soot.toolkits.graph.UnitGraph: java.util.List getSuccsOf(java.lang.Object)>
<soot.toolkits.graph.UnitGraph: java.util.List getSuccsOf(soot.Unit)>
<soot.toolkits.graph.UnitGraph: java.util.List getTails()>
<soot.toolkits.graph.UnitGraph: java.util.Map combineMapValues(java.util.Map,java.util.Map)>
<soot.toolkits.graph.UnitGraph: soot.Body getBody()>
<soot.toolkits.graph.UnitGraph: void <init>(soot.Body)>
<soot.toolkits.graph.UnitGraph: void addEdge(java.util.Map,java.util.Map,soot.Unit,soot.Unit)>
<soot.toolkits.graph.UnitGraph: void buildHeadsAndTails()>
<soot.toolkits.graph.UnitGraph: void buildUnexceptionalEdges(java.util.Map,java.util.Map)>
<soot.toolkits.graph.UnitGraph: void makeMappedListsUnmodifiable(java.util.Map)>
<soot.toolkits.graph.ZonedBlockGraph: java.util.Set computeLeaders(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.graph.ZonedBlockGraph: void <init>(soot.Body)>
<soot.toolkits.graph.interaction.InteractionHandler: java.lang.String currentPhaseName()>
<soot.toolkits.graph.interaction.InteractionHandler: void currentPhaseName(java.lang.String)>
<soot.toolkits.scalar.AbstractBoundedFlowSet: java.lang.Object topSet()>
<soot.toolkits.scalar.AbstractBoundedFlowSet: void complement()>
<soot.toolkits.scalar.AbstractBoundedFlowSet: void complement(soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowAnalysis: java.lang.Object getFlowBefore(java.lang.Object)>
<soot.toolkits.scalar.AbstractFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.AbstractFlowAnalysis: void merge(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.AbstractFlowSet: boolean equals(java.lang.Object)>
<soot.toolkits.scalar.AbstractFlowSet: int hashCode()>
<soot.toolkits.scalar.AbstractFlowSet: java.lang.String toString()>
<soot.toolkits.scalar.AbstractFlowSet: java.util.Iterator iterator()>
<soot.toolkits.scalar.AbstractFlowSet: void add(java.lang.Object,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void copy(soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void difference(soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void difference(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void intersection(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void remove(java.lang.Object,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.AbstractFlowSet: void union(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArrayFlowUniverse: java.util.Iterator iterator()>
<soot.toolkits.scalar.ArrayFlowUniverse: void <init>(java.lang.Object[])>
<soot.toolkits.scalar.ArrayPackedSet: boolean contains(java.lang.Object)>
<soot.toolkits.scalar.ArrayPackedSet: java.lang.Object emptySet()>
<soot.toolkits.scalar.ArrayPackedSet: java.util.List toList()>
<soot.toolkits.scalar.ArrayPackedSet: java.util.List toList(int,int)>
<soot.toolkits.scalar.ArrayPackedSet: soot.toolkits.scalar.ArrayPackedSet clone()>
<soot.toolkits.scalar.ArrayPackedSet: soot.toolkits.scalar.FlowSet clone()>
<soot.toolkits.scalar.ArrayPackedSet: void <init>(soot.toolkits.scalar.FlowUniverse)>
<soot.toolkits.scalar.ArrayPackedSet: void <init>(soot.toolkits.scalar.ObjectIntMapper)>
<soot.toolkits.scalar.ArrayPackedSet: void <init>(soot.toolkits.scalar.ObjectIntMapper,int[])>
<soot.toolkits.scalar.ArrayPackedSet: void add(java.lang.Object)>
<soot.toolkits.scalar.ArrayPackedSet: void complement(soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArrayPackedSet: void difference(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArrayPackedSet: void remove(java.lang.Object)>
<soot.toolkits.scalar.ArraySparseSet: boolean contains(java.lang.Object)>
<soot.toolkits.scalar.ArraySparseSet: boolean equals(java.lang.Object)>
<soot.toolkits.scalar.ArraySparseSet: java.lang.Object emptySet()>
<soot.toolkits.scalar.ArraySparseSet: java.util.List toList()>
<soot.toolkits.scalar.ArraySparseSet: soot.toolkits.scalar.ArraySparseSet clone()>
<soot.toolkits.scalar.ArraySparseSet: soot.toolkits.scalar.FlowSet clone()>
<soot.toolkits.scalar.ArraySparseSet: void <init>()>
<soot.toolkits.scalar.ArraySparseSet: void <init>(soot.toolkits.scalar.ArraySparseSet)>
<soot.toolkits.scalar.ArraySparseSet: void add(java.lang.Object)>
<soot.toolkits.scalar.ArraySparseSet: void copy(soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArraySparseSet: void difference(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArraySparseSet: void doubleCapacity()>
<soot.toolkits.scalar.ArraySparseSet: void intersection(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.ArraySparseSet: void remove(java.lang.Object)>
<soot.toolkits.scalar.ArraySparseSet: void union(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>
<soot.toolkits.scalar.BackwardFlowAnalysis$1: int compare(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.BackwardFlowAnalysis$1: void <init>(soot.toolkits.scalar.BackwardFlowAnalysis,java.util.Map)>
<soot.toolkits.scalar.BackwardFlowAnalysis: java.util.Collection constructWorklist(java.util.Map)>
<soot.toolkits.scalar.BackwardFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.BackwardFlowAnalysis: void doAnalysis()>
<soot.toolkits.scalar.BranchedFlowAnalysis: java.lang.Object getFallFlowAfter(soot.Unit)>
<soot.toolkits.scalar.BranchedFlowAnalysis: java.lang.Object getFlowBefore(soot.Unit)>
<soot.toolkits.scalar.BranchedFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.CollectionFlowUniverse: void <init>(java.util.Collection)>
<soot.toolkits.scalar.FastColorer$UnitInterferenceGraph: java.util.List getLocals()>
<soot.toolkits.scalar.FastColorer$UnitInterferenceGraph: soot.Local[] getInterferencesOf(soot.Local)>
<soot.toolkits.scalar.FastColorer$UnitInterferenceGraph: void <init>(soot.Body,java.util.Map,soot.toolkits.scalar.LiveLocals)>
<soot.toolkits.scalar.FastColorer$UnitInterferenceGraph: void setInterference(soot.Local,soot.Local)>
<soot.toolkits.scalar.FlowAnalysis: java.lang.Object getFlowAfter(java.lang.Object)>
<soot.toolkits.scalar.FlowAnalysis: soot.toolkits.graph.Orderer constructOrderer()>
<soot.toolkits.scalar.FlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis$1: int compare(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis: void accumulateAfterFlowSets(soot.Unit,java.lang.Object[],java.util.List)>
<soot.toolkits.scalar.ForwardBranchedFlowAnalysis: void doAnalysis()>
<soot.toolkits.scalar.ForwardFlowAnalysis$1: int compare(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.ForwardFlowAnalysis$1: void <init>(soot.toolkits.scalar.ForwardFlowAnalysis,java.util.Map)>
<soot.toolkits.scalar.ForwardFlowAnalysis: java.util.Collection constructWorklist(java.util.Map)>
<soot.toolkits.scalar.ForwardFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>
<soot.toolkits.scalar.ForwardFlowAnalysis: void doAnalysis()>
<soot.toolkits.scalar.GuaranteedDefs: java.util.List getGuaranteedDefs(soot.Unit)>
<soot.toolkits.scalar.GuaranteedDefs: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.GuaranteedDefsAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.scalar.GuaranteedDefsAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.scalar.GuaranteedDefsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.GuaranteedDefsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.InitAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.scalar.InitAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.scalar.InitAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.LocalDefsFlowAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.scalar.LocalDefsFlowAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.scalar.LocalDefsFlowAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.LocalDefsFlowAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.LocalUnitPair: void <init>(soot.Local,soot.Unit)>
<soot.toolkits.scalar.ObjectIntMapper: boolean contains(java.lang.Object)>
<soot.toolkits.scalar.ObjectIntMapper: int add(java.lang.Object)>
<soot.toolkits.scalar.ObjectIntMapper: int getInt(java.lang.Object)>
<soot.toolkits.scalar.ObjectIntMapper: java.lang.Object getObject(int)>
<soot.toolkits.scalar.ObjectIntMapper: void <init>(java.util.Iterator,int)>
<soot.toolkits.scalar.Pair: boolean equals(java.lang.Object)>
<soot.toolkits.scalar.Pair: int hashCode()>
<soot.toolkits.scalar.Pair: java.lang.Object getO1()>
<soot.toolkits.scalar.Pair: java.lang.Object getO2()>
<soot.toolkits.scalar.Pair: void <init>(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.SimpleLiveLocals: java.util.List getLiveLocalsAfter(soot.Unit)>
<soot.toolkits.scalar.SimpleLiveLocals: java.util.List getLiveLocalsBefore(soot.Unit)>
<soot.toolkits.scalar.SimpleLiveLocals: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SimpleLiveLocalsAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.scalar.SimpleLiveLocalsAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.scalar.SimpleLiveLocalsAnalysis: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SimpleLiveLocalsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.SimpleLocalDefs: java.util.List getDefsOfAt(soot.Local,soot.Unit)>
<soot.toolkits.scalar.SimpleLocalDefs: void <init>(soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SimpleLocalUses: java.util.List getUsesOf(soot.Unit)>
<soot.toolkits.scalar.SimpleLocalUses: void <init>(soot.Body,soot.toolkits.scalar.LocalDefs)>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: java.lang.Object entryInitialFlow()>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: java.lang.Object newInitialFlow()>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: void <init>(soot.toolkits.scalar.SmartLocalDefs,soot.toolkits.graph.UnitGraph)>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: void copy(java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.SmartLocalDefs$LocalDefsAnalysis: void flowThrough(java.lang.Object,java.lang.Object,java.lang.Object)>
<soot.toolkits.scalar.SmartLocalDefs: java.util.HashSet access$200(soot.toolkits.scalar.SmartLocalDefs,soot.Local)>
<soot.toolkits.scalar.SmartLocalDefs: java.util.HashSet defsOf(soot.Local)>
<soot.toolkits.scalar.SmartLocalDefs: java.util.List getDefsOfAt(soot.Local,soot.Unit)>
<soot.toolkits.scalar.SmartLocalDefs: java.util.Map access$000(soot.toolkits.scalar.SmartLocalDefs)>
<soot.toolkits.scalar.SmartLocalDefs: void <init>(soot.toolkits.graph.UnitGraph,soot.toolkits.scalar.LiveLocals)>
<soot.toolkits.scalar.UnitValueBoxPair: soot.Unit getUnit()>
<soot.toolkits.scalar.UnitValueBoxPair: soot.ValueBox getValueBox()>
<soot.toolkits.scalar.UnitValueBoxPair: void <init>(soot.Unit,soot.ValueBox)>
<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>
<soot.toolkits.scalar.ValueUnitPair: void <init>(soot.Value,soot.Unit)>
<soot.toolkits.scalar.ValueUnitPair: void setUnit(soot.Unit)>
<soot.util.ArrayNumberer$NumbererIterator: java.lang.Object next()>
<soot.util.ArrayNumberer$NumbererIterator: void <init>(soot.util.ArrayNumberer)>
<soot.util.ArrayNumberer: java.lang.Object get(long)>
<soot.util.ArrayNumberer: java.util.Iterator iterator()>
<soot.util.ArrayNumberer: void <init>()>
<soot.util.ArrayNumberer: void add(java.lang.Object)>
<soot.util.ArraySet$ArrayIterator: java.lang.Object next()>
<soot.util.ArraySet$ArrayIterator: void <init>(soot.util.ArraySet)>
<soot.util.ArraySet: boolean add(java.lang.Object)>
<soot.util.ArraySet: boolean addAll(java.util.Collection)>
<soot.util.ArraySet: boolean contains(java.lang.Object)>
<soot.util.ArraySet: java.lang.Object[] access$100(soot.util.ArraySet)>
<soot.util.ArraySet: java.lang.Object[] toArray()>
<soot.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>
<soot.util.ArraySet: java.util.Iterator iterator()>
<soot.util.ArraySet: void <init>(int)>
<soot.util.ArraySet: void doubleCapacity()>
<soot.util.ArraySet: void removeElementAt(int)>
<soot.util.Cons: void <init>(java.lang.Object,java.lang.Object)>
<soot.util.DeterministicHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<soot.util.DeterministicHashMap: java.util.Set keySet()>
<soot.util.DeterministicHashMap: void <init>(int,float)>
<soot.util.HashChain$Link: java.lang.Object getItem()>
<soot.util.HashChain$Link: java.lang.String toString()>
<soot.util.HashChain$Link: soot.util.HashChain$Link getNext()>
<soot.util.HashChain$Link: soot.util.HashChain$Link getPrevious()>
<soot.util.HashChain$Link: soot.util.HashChain$Link insertAfter(java.lang.Object)>
<soot.util.HashChain$Link: soot.util.HashChain$Link insertBefore(java.lang.Object)>
<soot.util.HashChain$Link: void <init>(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain$Link: void bind(soot.util.HashChain$Link,soot.util.HashChain$Link)>
<soot.util.HashChain$Link: void setNext(soot.util.HashChain$Link)>
<soot.util.HashChain$Link: void setPrevious(soot.util.HashChain$Link)>
<soot.util.HashChain$Link: void unlinkSelf()>
<soot.util.HashChain$LinkIterator: java.lang.Object next()>
<soot.util.HashChain$LinkIterator: void <init>(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain$LinkIterator: void <init>(soot.util.HashChain,java.lang.Object,java.lang.Object)>
<soot.util.HashChain$LinkIterator: void remove()>
<soot.util.HashChain: boolean add(java.lang.Object)>
<soot.util.HashChain: boolean contains(java.lang.Object)>
<soot.util.HashChain: boolean containsAll(java.util.Collection)>
<soot.util.HashChain: boolean follows(java.lang.Object,java.lang.Object)>
<soot.util.HashChain: boolean remove(java.lang.Object)>
<soot.util.HashChain: java.lang.Object access$002(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain: java.lang.Object access$102(soot.util.HashChain,java.lang.Object)>
<soot.util.HashChain: java.lang.Object getFirst()>
<soot.util.HashChain: java.lang.Object getLast()>
<soot.util.HashChain: java.lang.Object getPredOf(java.lang.Object)>
<soot.util.HashChain: java.lang.Object getSuccOf(java.lang.Object)>
<soot.util.HashChain: java.lang.String toString()>
<soot.util.HashChain: java.util.HashMap access$200(soot.util.HashChain)>
<soot.util.HashChain: java.util.Iterator iterator()>
<soot.util.HashChain: java.util.Iterator iterator(java.lang.Object)>
<soot.util.HashChain: java.util.Iterator iterator(java.lang.Object,java.lang.Object)>
<soot.util.HashChain: java.util.Iterator snapshotIterator()>
<soot.util.HashChain: java.util.Iterator snapshotIterator(java.lang.Object)>
<soot.util.HashChain: java.util.List toList(soot.util.Chain)>
<soot.util.HashChain: soot.util.HashChain listToHashChain(java.util.List)>
<soot.util.HashChain: void <init>()>
<soot.util.HashChain: void addFirst(java.lang.Object)>
<soot.util.HashChain: void addLast(java.lang.Object)>
<soot.util.HashChain: void insertAfter(java.lang.Object,java.lang.Object)>
<soot.util.HashChain: void insertAfter(java.util.List,java.lang.Object)>
<soot.util.HashChain: void insertBefore(java.lang.Object,java.lang.Object)>
<soot.util.HashChain: void removeFirst()>
<soot.util.HashMultiMap: boolean containsKey(java.lang.Object)>
<soot.util.HashMultiMap: boolean equals(java.lang.Object)>
<soot.util.HashMultiMap: boolean put(java.lang.Object,java.lang.Object)>
<soot.util.HashMultiMap: boolean putAll(java.lang.Object,java.util.Set)>
<soot.util.HashMultiMap: boolean remove(java.lang.Object)>
<soot.util.HashMultiMap: boolean remove(java.lang.Object,java.lang.Object)>
<soot.util.HashMultiMap: int hashCode()>
<soot.util.HashMultiMap: java.util.Set findSet(java.lang.Object)>
<soot.util.HashMultiMap: java.util.Set get(java.lang.Object)>
<soot.util.HashMultiMap: java.util.Set keySet()>
<soot.util.HashMultiMap: java.util.Set newSet()>
<soot.util.HashMultiMap: java.util.Set values()>
<soot.util.HashMultiMap: void <init>()>
<soot.util.HashMultiMap: void <init>(soot.util.MultiMap)>
<soot.util.HashMultiMap: void putAll(soot.util.MultiMap)>
<soot.util.IdentityHashSet: boolean add(java.lang.Object)>
<soot.util.IdentityHashSet: java.util.Iterator iterator()>
<soot.util.IdentityHashSet: void <init>()>
<soot.util.IterableSet: boolean add(java.lang.Object)>
<soot.util.IterableSet: boolean equals(java.lang.Object)>
<soot.util.IterableSet: boolean intersects(soot.util.IterableSet)>
<soot.util.IterableSet: boolean isStrictSubsetOf(soot.util.IterableSet)>
<soot.util.IterableSet: boolean isSubsetOf(soot.util.IterableSet)>
<soot.util.IterableSet: boolean isSupersetOf(soot.util.IterableSet)>
<soot.util.IterableSet: boolean remove(java.lang.Object)>
<soot.util.IterableSet: java.lang.Object clone()>
<soot.util.IterableSet: java.lang.String toString()>
<soot.util.IterableSet: soot.util.IterableSet intersection(soot.util.IterableSet)>
<soot.util.IterableSet: soot.util.IterableSet union(soot.util.IterableSet)>
<soot.util.IterableSet: void <init>(java.util.Collection)>
<soot.util.LargeNumberedMap: boolean put(soot.util.Numberable,java.lang.Object)>
<soot.util.LargeNumberedMap: java.lang.Object get(soot.util.Numberable)>
<soot.util.LargeNumberedMap: void <init>(soot.util.ArrayNumberer)>
<soot.util.MapNumberer: void <init>()>
<soot.util.NumberedString: java.lang.String getString()>
<soot.util.NumberedString: java.lang.String toString()>
<soot.util.NumberedString: void <init>(java.lang.String)>
<soot.util.PhaseDumper$PhaseStack: java.lang.String currentPhase()>
<soot.util.PhaseDumper$PhaseStack: java.lang.String pop()>
<soot.util.PhaseDumper$PhaseStack: java.lang.String push(java.lang.String)>
<soot.util.PhaseDumper: boolean isBodyDumpingPhase(java.lang.String)>
<soot.util.PhaseDumper: boolean isCFGDumpingPhase(java.lang.String)>
<soot.util.PhaseDumper: void <init>(soot.Singletons$Global)>
<soot.util.PhaseDumper: void dumpAfter(java.lang.String)>
<soot.util.PhaseDumper: void dumpAfter(soot.Body,java.lang.String)>
<soot.util.PhaseDumper: void dumpBefore(java.lang.String)>
<soot.util.PhaseDumper: void dumpBefore(soot.Body,java.lang.String)>
<soot.util.PhaseDumper: void dumpGraph(soot.toolkits.graph.DirectedGraph,soot.Body)>
<soot.util.PhaseDumper: void dumpGraph(soot.toolkits.graph.ExceptionalGraph)>
<soot.util.SingletonList: boolean contains(java.lang.Object)>
<soot.util.SingletonList: java.lang.Object get(int)>
<soot.util.SingletonList: void <init>(java.lang.Object)>
<soot.util.SmallNumberedMap: boolean put(soot.util.Numberable,java.lang.Object)>
<soot.util.SmallNumberedMap: java.lang.Object get(soot.util.Numberable)>
<soot.util.SmallNumberedMap: void <init>(soot.util.ArrayNumberer)>
<soot.util.SmallNumberedMap: void doubleSize()>
<soot.util.StringNumberer: soot.util.NumberedString findOrAdd(java.lang.String)>
<soot.util.StringNumberer: void <init>()>
<soot.util.StringTools: java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String)>
<soot.util.TrustingMonotonicArraySet$ArrayIterator: java.lang.Object next()>
<soot.util.TrustingMonotonicArraySet$ArrayIterator: void <init>(soot.util.TrustingMonotonicArraySet)>
<soot.util.TrustingMonotonicArraySet: boolean add(java.lang.Object)>
<soot.util.TrustingMonotonicArraySet: java.lang.Object[] access$100(soot.util.TrustingMonotonicArraySet)>
<soot.util.TrustingMonotonicArraySet: java.util.Iterator iterator()>
<soot.util.TrustingMonotonicArraySet: void <init>()>
<soot.util.TrustingMonotonicArraySet: void doubleCapacity()>
<soot.util.cfgcmd.CFGToDotGraph$1: void <init>(soot.util.cfgcmd.CFGToDotGraph)>
<soot.util.cfgcmd.CFGToDotGraph$DotNamer: int getNumber(java.lang.Object)>
<soot.util.cfgcmd.CFGToDotGraph$DotNamer: java.lang.String getName(java.lang.Object)>
<soot.util.cfgcmd.CFGToDotGraph$NodeComparator: int compare(java.lang.Object,java.lang.Object)>
<soot.util.cfgcmd.CFGToDotGraph: java.util.Iterator sortedIterator(java.util.Collection,java.util.Comparator)>
<soot.util.cfgcmd.CFGToDotGraph: soot.util.dot.DotGraph drawCFG(soot.toolkits.graph.DirectedGraph,soot.Body)>
<soot.util.cfgcmd.CFGToDotGraph: soot.util.dot.DotGraph drawCFG(soot.toolkits.graph.ExceptionalGraph)>
<soot.util.cfgcmd.CFGToDotGraph: soot.util.dot.DotGraph initDotGraph(soot.Body)>
<soot.util.cfgcmd.CFGToDotGraph: void formatNodeText(soot.Body,soot.util.dot.DotGraph,soot.util.cfgcmd.CFGToDotGraph$DotNamer)>
<soot.util.cfgcmd.CFGToDotGraph: void setExceptionEdgeAttr(java.lang.String,java.lang.String)>
<soot.util.cfgcmd.CFGToDotGraph: void setExceptionalControlFlowAttr(java.lang.String,java.lang.String)>
<soot.util.cfgcmd.CFGToDotGraph: void setHeadAttr(java.lang.String,java.lang.String)>
<soot.util.cfgcmd.CFGToDotGraph: void setStyle(java.util.Collection,soot.util.dot.DotGraph,soot.util.cfgcmd.CFGToDotGraph$DotNamer,java.lang.String,soot.util.dot.DotGraphAttribute)>
<soot.util.cfgcmd.CFGToDotGraph: void setTailAttr(java.lang.String,java.lang.String)>
<soot.util.cfgcmd.CFGToDotGraph: void setUnexceptionalControlFlowAttr(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraph: soot.util.dot.DotGraph createSubGraph(java.lang.String)>
<soot.util.dot.DotGraph: soot.util.dot.DotGraphEdge drawEdge(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraph: soot.util.dot.DotGraphNode drawNode(java.lang.String)>
<soot.util.dot.DotGraph: soot.util.dot.DotGraphNode getNode(java.lang.String)>
<soot.util.dot.DotGraph: void <init>(java.lang.String)>
<soot.util.dot.DotGraph: void setGraphAttribute(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraph: void setGraphAttribute(soot.util.dot.DotGraphAttribute)>
<soot.util.dot.DotGraphAttribute: void <init>(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraphEdge: void <init>(soot.util.dot.DotGraphNode,soot.util.dot.DotGraphNode)>
<soot.util.dot.DotGraphEdge: void setAttribute(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraphEdge: void setAttribute(soot.util.dot.DotGraphAttribute)>
<soot.util.dot.DotGraphNode: void setAttribute(java.lang.String,java.lang.String)>
<soot.util.dot.DotGraphNode: void setAttribute(soot.util.dot.DotGraphAttribute)>
<soot.util.queue.ChunkedQueue: soot.util.queue.QueueReader reader()>
<soot.util.queue.ChunkedQueue: void <init>()>
<soot.util.queue.ChunkedQueue: void add(java.lang.Object)>
<soot.util.queue.QueueReader: boolean hasNext()>
<soot.util.queue.QueueReader: java.lang.Object next()>
<soot.util.queue.QueueReader: soot.util.queue.QueueReader clone()>
<soot.util.queue.QueueReader: void <init>(java.lang.Object[],int)>
<soot.xml.ColorAttribute: java.lang.String analysisType()>
<soot.xml.ColorAttribute: void <init>(int,int,int,boolean,java.lang.String)>
<soot.xml.Key: java.lang.String aType()>
<soot.xml.Key: java.lang.String key()>
<soot.xml.Key: void <init>(int,int,int,java.lang.String)>
<soot.xml.Key: void aType(java.lang.String)>
<soot.xml.LinkAttribute: java.lang.String analysisType()>
<soot.xml.LinkAttribute: java.lang.String className()>
<soot.xml.LinkAttribute: java.lang.String info()>
<soot.xml.LinkAttribute: void <init>(java.lang.String,int,int,java.lang.String,java.lang.String)>
<soot.xml.StringAttribute: java.lang.String analysisType()>
<soot.xml.StringAttribute: java.lang.String info()>
<soot.xml.StringAttribute: void <init>(java.lang.String,java.lang.String)>
<soot.xml.XMLNode: java.lang.Object clone()>
<soot.xml.XMLNode: java.lang.String eliminateSpaces(java.lang.String)>
<soot.xml.XMLNode: java.lang.String toPostString()>
<soot.xml.XMLNode: java.lang.String toPostString(java.lang.String)>
<soot.xml.XMLNode: java.lang.String toString()>
<soot.xml.XMLNode: java.lang.String toString(java.lang.String)>
<soot.xml.XMLNode: soot.xml.XMLNode addAttribute(java.lang.String,java.lang.String)>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(java.lang.String)>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(java.lang.String,java.lang.String[],java.lang.String[])>
<soot.xml.XMLNode: soot.xml.XMLNode addChild(soot.xml.XMLNode)>
<soot.xml.XMLNode: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])>
<soot.xml.XMLNode: void <init>(soot.xml.XMLNode)>
<soot.xml.XMLPrinter$XMLLabel: void <init>(soot.xml.XMLPrinter,long,java.lang.String,java.lang.String)>
<soot.xml.XMLPrinter: java.lang.String cleanLocal(java.lang.String)>
<soot.xml.XMLPrinter: java.lang.String cleanMethod(java.lang.String)>
<soot.xml.XMLPrinter: java.lang.String toCDATA(java.lang.String)>
<soot.xml.XMLPrinter: soot.xml.XMLNode setXMLNode(soot.xml.XMLNode)>
<soot.xml.XMLPrinter: void printJimpleStyleTo(soot.SootClass,java.io.PrintWriter)>
<soot.xml.XMLPrinter: void printStatementsInBody(soot.Body,java.io.PrintWriter)>
<soot.xml.XMLPrinter: void printTo(soot.Body,java.io.PrintWriter)>
<soot.xml.XMLPrinter: void printXMLTo(soot.SootClass,java.io.PrintWriter)>
<soot.xml.XMLRoot: soot.xml.XMLNode addElement(java.lang.String)>
<soot.xml.XMLRoot: soot.xml.XMLNode addElement(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<soot.xml.XMLRoot: soot.xml.XMLNode addElement(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])>
<soot.xml.XMLRoot: void <init>()>
<sun.jkernel.BackgroundDownloader: void startBackgroundDownloads()>
<sun.jkernel.Bundle$1: java.lang.Thread newThread(java.lang.Runnable)>
<sun.jkernel.Bundle$2: void <init>(sun.jkernel.Bundle,java.io.InputStream)>
<sun.jkernel.Bundle$3: void <init>(sun.jkernel.Bundle,boolean,boolean)>
<sun.jkernel.Bundle$3: void run()>
<sun.jkernel.Bundle: int getSize()>
<sun.jkernel.Bundle: java.lang.String getName()>
<sun.jkernel.Bundle: java.lang.String getURL(boolean)>
<sun.jkernel.Bundle: sun.jkernel.Bundle getBundle(java.lang.String)>
<sun.jkernel.Bundle: void access$000(sun.jkernel.Bundle,boolean,boolean)>
<sun.jkernel.Bundle: void doInstall(boolean,boolean)>
<sun.jkernel.Bundle: void download(boolean)>
<sun.jkernel.Bundle: void install()>
<sun.jkernel.Bundle: void install(boolean,boolean,boolean)>
<sun.jkernel.Bundle: void loadReceipts()>
<sun.jkernel.Bundle: void queueDependencies(boolean)>
<sun.jkernel.Bundle: void unpackBundle()>
<sun.jkernel.Bundle: void updateState()>
<sun.jkernel.Bundle: void writeReceipt()>
<sun.jkernel.BundleCheck: sun.jkernel.BundleCheck getInstance(java.lang.String)>
<sun.jkernel.BundleCheck: sun.jkernel.BundleCheck getInstance(java.lang.String,java.io.File,boolean)>
<sun.jkernel.BundleCheck: void <init>(java.lang.String)>
<sun.jkernel.BundleCheck: void addProperty(java.lang.String)>
<sun.jkernel.DownloadManager$4: java.lang.Object run()>
<sun.jkernel.DownloadManager$4: void <init>(java.lang.String)>
<sun.jkernel.DownloadManager: boolean doDownloadFile(java.lang.String)>
<sun.jkernel.DownloadManager: boolean extDirIsIncluded()>
<sun.jkernel.DownloadManager: java.lang.String access$300(java.lang.String)>
<sun.jkernel.DownloadManager: java.lang.String doGetBootClassPathEntryForResource(java.lang.String)>
<sun.jkernel.DownloadManager: java.lang.String getBootClassPathEntryForClass(java.lang.String)>
<sun.jkernel.DownloadManager: java.lang.String getBootClassPathEntryForResource(java.lang.String)>
<sun.jkernel.DownloadManager: java.lang.String getBundleProperty(java.lang.String,java.lang.String)>
<sun.jkernel.DownloadManager: java.lang.String[] getBundleNames()>
<sun.jkernel.DownloadManager: java.util.Map getBundleProperties()>
<sun.jkernel.DownloadManager: java.util.Map getFileMap()>
<sun.jkernel.DownloadManager: java.util.Map getResourceMap()>
<sun.jkernel.DownloadManager: java.util.Map readTreeMap(java.io.InputStream)>
<sun.jkernel.DownloadManager: sun.jkernel.Bundle getBundleForFile(java.lang.String)>
<sun.jkernel.DownloadManager: sun.jkernel.Bundle getBundleForResource(java.lang.String)>
<sun.jkernel.DownloadManager: void copyReceiptFile(java.io.File,java.io.File)>
<sun.jkernel.DownloadManager: void println(java.lang.String)>
<sun.jkernel.KernelError: void <init>(java.lang.String)>
<sun.misc.CEFormatException: void <init>(java.lang.String)>
<sun.misc.CharacterDecoder: byte[] decodeBuffer(java.lang.String)>
<sun.misc.CharacterDecoder: void decodeBuffer(java.io.InputStream,java.io.OutputStream)>
<sun.misc.CharacterEncoder: java.lang.String encodeBuffer(byte[])>
<sun.misc.CharacterEncoder: void encodeBufferPrefix(java.io.OutputStream)>
<sun.misc.CompoundEnumeration: void <init>(java.util.Enumeration[])>
<sun.misc.ExtensionDependency$1: java.lang.Object run()>
<sun.misc.ExtensionDependency$2: java.lang.Object run()>
<sun.misc.ExtensionDependency$2: void <init>(sun.misc.ExtensionDependency,java.lang.String[],java.lang.String)>
<sun.misc.ExtensionDependency$3: java.lang.Object run()>
<sun.misc.ExtensionDependency$4: java.lang.Object run()>
<sun.misc.ExtensionDependency$4: void <init>(sun.misc.ExtensionDependency,java.io.File)>
<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>
<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>
<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>
<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>
<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>
<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>
<sun.misc.ExtensionDependency: java.io.File[] access$300(java.io.File[])>
<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>
<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>
<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>
<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>
<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>
<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>
<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>
<sun.misc.FileURLMapper: boolean exists()>
<sun.misc.FileURLMapper: java.lang.String getPath()>
<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>
<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString()>
<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal parseHexString(java.lang.String)>
<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>
<sun.misc.InvalidJarIndexException: void <init>(java.lang.String)>
<sun.misc.JarIndex: java.lang.String[] getJarFiles()>
<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>
<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>
<sun.misc.JarIndex: void <init>()>
<sun.misc.JarIndex: void <init>(java.io.InputStream)>
<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>
<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>
<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>
<sun.misc.JarIndex: void read(java.io.InputStream)>
<sun.misc.Launcher$1: java.lang.Object run()>
<sun.misc.Launcher$1: void <init>(java.lang.String)>
<sun.misc.Launcher$2: java.lang.Object run()>
<sun.misc.Launcher$AppClassLoader$1: java.lang.Object run()>
<sun.misc.Launcher$AppClassLoader$1: void <init>(java.lang.String,java.io.File[],java.lang.ClassLoader)>
<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<sun.misc.Launcher$AppClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<sun.misc.Launcher$AppClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
<sun.misc.Launcher$AppClassLoader: void addAppURL(java.net.URL)>
<sun.misc.Launcher$ExtClassLoader$1: java.lang.Object run()>
<sun.misc.Launcher$ExtClassLoader$1: void <init>(java.io.File[])>
<sun.misc.Launcher$ExtClassLoader: java.lang.Class findClass(java.lang.String)>
<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>
<sun.misc.Launcher$ExtClassLoader: void <init>(java.io.File[])>
<sun.misc.Launcher$ExtClassLoader: void addExtURL(java.net.URL)>
<sun.misc.Launcher: java.io.File[] access$200(java.lang.String)>
<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>
<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>
<sun.misc.Launcher: java.net.URL[] access$300(java.io.File[])>
<sun.misc.Launcher: java.net.URL[] pathToURLs(java.io.File[])>
<sun.misc.Launcher: sun.misc.URLClassPath getBootstrapClassPath()>
<sun.misc.Launcher: void addURLToAppClassLoader(java.net.URL)>
<sun.misc.Launcher: void addURLToExtClassLoader(java.net.URL)>
<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>
<sun.misc.MetaIndex: void <init>(java.util.List,boolean)>
<sun.misc.MetaIndex: void registerDirectory(java.io.File)>
<sun.misc.ProxyGenerator$ConstantPool$ValueEntry: void <init>(java.lang.Object)>
<sun.misc.ProxyGenerator$ConstantPool: short addEntry(sun.misc.ProxyGenerator$ConstantPool$Entry)>
<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>
<sun.misc.ProxyGenerator$ConstantPool: short getFieldRef(java.lang.String,java.lang.String,java.lang.String)>
<sun.misc.ProxyGenerator$ConstantPool: short getUtf8(java.lang.String)>
<sun.misc.ProxyGenerator$ConstantPool: short getValue(java.lang.Object)>
<sun.misc.ProxyGenerator$ConstantPool: void <init>()>
<sun.misc.ProxyGenerator$FieldInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>
<sun.misc.ProxyGenerator$MethodInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>
<sun.misc.ProxyGenerator$ProxyMethod: sun.misc.ProxyGenerator$MethodInfo access$200(sun.misc.ProxyGenerator$ProxyMethod)>
<sun.misc.ProxyGenerator$ProxyMethod: sun.misc.ProxyGenerator$MethodInfo generateMethod()>
<sun.misc.ProxyGenerator$ProxyMethod: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],java.lang.Class)>
<sun.misc.ProxyGenerator$ProxyMethod: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],java.lang.Class,sun.misc.ProxyGenerator$1)>
<sun.misc.ProxyGenerator$ProxyMethod: void codeFieldInitialization(java.io.DataOutputStream)>
<sun.misc.ProxyGenerator$ProxyMethod: void codeUnwrapReturnValue(java.lang.Class,java.io.DataOutputStream)>
<sun.misc.ProxyGenerator: byte[] generateClassFile()>
<sun.misc.ProxyGenerator: byte[] generateProxyClass(java.lang.String,java.lang.Class[])>
<sun.misc.ProxyGenerator: java.lang.String access$000(java.lang.String)>
<sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>
<sun.misc.ProxyGenerator: java.util.List computeUniqueCatchList(java.lang.Class[])>
<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$MethodInfo generateConstructor()>
<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$MethodInfo generateStaticInitializer()>
<sun.misc.ProxyGenerator: void <init>(java.lang.String,java.lang.Class[])>
<sun.misc.ProxyGenerator: void addProxyMethod(java.lang.reflect.Method,java.lang.Class)>
<sun.misc.ProxyGenerator: void checkReturnTypes(java.util.List)>
<sun.misc.ProxyGenerator: void collectCompatibleTypes(java.lang.Class[],java.lang.Class[],java.util.List)>
<sun.misc.Resource: java.io.InputStream cachedInputStream()>
<sun.misc.Service: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List,java.util.Set)>
<sun.misc.Service: java.util.Iterator parse(java.lang.Class,java.net.URL,java.util.Set)>
<sun.misc.ServiceConfigurationError: void <init>(java.lang.String)>
<sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>
<sun.misc.SoftCache$ValueCell: java.lang.Object strip(java.lang.Object,boolean)>
<sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.misc.SoftCache$ValueCell: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>
<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.misc.URLClassPath$1: boolean next()>
<sun.misc.URLClassPath$1: java.lang.Object nextElement()>
<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>
<sun.misc.URLClassPath$2: boolean next()>
<sun.misc.URLClassPath$2: java.lang.Object nextElement()>
<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>
<sun.misc.URLClassPath$3: java.lang.Object run()>
<sun.misc.URLClassPath$3: void <init>(sun.misc.URLClassPath,java.net.URL)>
<sun.misc.URLClassPath$FileLoader$1: java.net.URL getCodeSourceURL()>
<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$FileLoader$1: void <init>(sun.misc.URLClassPath$FileLoader,java.lang.String,java.net.URL,java.io.File)>
<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>
<sun.misc.URLClassPath$JarLoader$1: java.lang.Object run()>
<sun.misc.URLClassPath$JarLoader$1: void <init>(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader$2: java.io.InputStream getInputStream()>
<sun.misc.URLClassPath$JarLoader$2: java.net.URL getCodeSourceURL()>
<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>
<sun.misc.URLClassPath$JarLoader$2: java.security.CodeSigner[] getCodeSigners()>
<sun.misc.URLClassPath$JarLoader$2: java.util.jar.Manifest getManifest()>
<sun.misc.URLClassPath$JarLoader$2: void <init>(sun.misc.URLClassPath$JarLoader,java.lang.String,java.net.URL,java.util.jar.JarEntry)>
<sun.misc.URLClassPath$JarLoader$3: java.lang.Object run()>
<sun.misc.URLClassPath$JarLoader$3: void <init>(sun.misc.URLClassPath$JarLoader,java.net.URL)>
<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>
<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>
<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>
<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader,java.net.URL)>
<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex)>
<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>
<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader)>
<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>
<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>
<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap)>
<sun.misc.URLClassPath$JarLoader: void ensureOpen()>
<sun.misc.URLClassPath$JarLoader: void parseExtensionsDependencies()>
<sun.misc.URLClassPath$Loader$1: java.net.URL getCodeSourceURL()>
<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>
<sun.misc.URLClassPath$Loader$1: void <init>(sun.misc.URLClassPath$Loader,java.lang.String,java.net.URL,java.net.URLConnection)>
<sun.misc.URLClassPath$Loader: java.net.URL access$200(sun.misc.URLClassPath$Loader)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>
<sun.misc.URLClassPath$Loader: void <init>(java.net.URL)>
<sun.misc.URLClassPath: java.net.URL checkURL(java.net.URL)>
<sun.misc.URLClassPath: java.net.URL findResource(java.lang.String,boolean)>
<sun.misc.URLClassPath: java.net.URL[] getURLs()>
<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>
<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String)>
<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>
<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>
<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>
<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int)>
<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>
<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>
<sun.misc.URLClassPath: void <init>(java.net.URL[],java.net.URLStreamHandlerFactory)>
<sun.misc.URLClassPath: void addURL(java.net.URL)>
<sun.misc.URLClassPath: void push(java.net.URL[])>
<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>
<sun.net.www.ParseUtil: char unescape(java.lang.String,int)>
<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>
<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>
<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>
<sun.net.www.URLConnection: boolean isProxiedHost(java.lang.String)>
<sun.nio.cs.StandardCharsets$Cache: void init(java.lang.Object[])>
<sun.nio.cs.StreamDecoder: int implRead(char[],int,int)>
<sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>
<sun.nio.cs.StreamEncoder: sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.lang.String)>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)>
<sun.nio.cs.US_ASCII$Decoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Decoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset)>
<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset,sun.nio.cs.US_ASCII$1)>
<sun.nio.cs.US_ASCII: java.nio.charset.CharsetDecoder newDecoder()>
<sun.nio.cs.US_ASCII: java.nio.charset.CharsetEncoder newEncoder()>
<sun.reflect.BootstrapConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.DelegatingConstructorAccessorImpl: void <init>(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.DelegatingConstructorAccessorImpl: void setDelegate(sun.reflect.ConstructorAccessorImpl)>
<sun.reflect.NativeConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<sun.reflect.NativeConstructorAccessorImpl: void setParent(sun.reflect.DelegatingConstructorAccessorImpl)>
<sun.reflect.Reflection: java.lang.reflect.Field[] filterFields(java.lang.Class,java.lang.reflect.Field[])>
<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor newConstructorForSerialization(java.lang.Class,java.lang.reflect.Constructor)>
<sun.reflect.ReflectionFactory: sun.reflect.ConstructorAccessor newConstructorAccessor(java.lang.reflect.Constructor)>
<sun.security.action.GetPropertyAction: java.lang.Object run()>
<sun.security.action.GetPropertyAction: java.lang.String run()>
<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>
<sun.security.action.PutAllAction: java.lang.Object run()>
<sun.security.action.PutAllAction: void <init>(java.security.Provider,java.util.Map)>
<sun.security.ec.ECKeyFactory$1: void <init>(java.lang.String,double,java.lang.String)>
<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object)>
<sun.security.jca.GetInstance$Instance: void <init>(java.security.Provider,java.lang.Object,sun.security.jca.GetInstance$1)>
<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>
<sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>
<sun.security.jca.GetInstance: java.util.List getServices(java.util.List)>
<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>
<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>
<sun.security.jca.ProviderConfig$4: java.lang.Object run()>
<sun.security.jca.ProviderConfig$4: void <init>(java.lang.String)>
<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>
<sun.security.jca.ProviderConfig: java.lang.String access$400(sun.security.jca.ProviderConfig)>
<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>
<sun.security.jca.ProviderConfig: java.lang.String toString()>
<sun.security.jca.ProviderConfig: void <init>(java.lang.String)>
<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList$1: void <init>(java.lang.String,double,java.lang.String)>
<sun.security.jca.ProviderList$3: java.lang.Object get(int)>
<sun.security.jca.ProviderList$3: java.security.Provider get(int)>
<sun.security.jca.ProviderList$3: void <init>(sun.security.jca.ProviderList)>
<sun.security.jca.ProviderList$ServiceList$1: void <init>(sun.security.jca.ProviderList$ServiceList)>
<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList$ServiceList: void <init>(sun.security.jca.ProviderList,java.util.List)>
<sun.security.jca.ProviderList: java.util.List getServices(java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList: java.util.List getServices(java.util.List)>
<sun.security.jca.Providers: java.lang.Object startJarVerification()>
<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>
<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>
<sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>
<sun.security.pkcs.ContentInfo: byte[] getData()>
<sun.security.pkcs.ContentInfo: void <init>(sun.security.util.DerInputStream,boolean)>
<sun.security.pkcs.ESSCertId: void <init>(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate getCertificate(java.math.BigInteger,sun.security.x509.X500Name)>
<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate[] getCertificates()>
<sun.security.pkcs.PKCS7: sun.security.pkcs.ContentInfo getContentInfo()>
<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.SignerInfo,byte[])>
<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo[] verify(byte[])>
<sun.security.pkcs.PKCS7: void <init>(byte[])>
<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>
<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>
<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS7: void populateCertIssuerNames()>
<sun.security.pkcs.PKCS9Attribute: java.lang.Object getValue()>
<sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<sun.security.pkcs.PKCS9Attribute: sun.security.util.ObjectIdentifier getOID(java.lang.String)>
<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>
<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>
<sun.security.pkcs.PKCS9Attributes: byte[] generateDerEncoding()>
<sun.security.pkcs.PKCS9Attributes: byte[] getDerEncoding()>
<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>
<sun.security.pkcs.PKCS9Attributes: sun.security.pkcs.PKCS9Attribute getAttribute(java.lang.String)>
<sun.security.pkcs.PKCS9Attributes: sun.security.pkcs.PKCS9Attribute getAttribute(sun.security.util.ObjectIdentifier)>
<sun.security.pkcs.PKCS9Attributes: void <init>(sun.security.util.DerInputStream,boolean)>
<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>
<sun.security.pkcs.SignerInfo: java.lang.String convertToStandardName(java.lang.String)>
<sun.security.pkcs.SignerInfo: java.security.cert.X509Certificate getCertificate(sun.security.pkcs.PKCS7)>
<sun.security.pkcs.SignerInfo: java.util.ArrayList getCertificateChain(sun.security.pkcs.PKCS7)>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>
<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>
<sun.security.pkcs.SigningCertificateInfo: void parse(byte[])>
<sun.security.provider.PolicyFile$1: java.lang.Object run()>
<sun.security.provider.PolicyFile$3: java.lang.Object run()>
<sun.security.provider.PolicyFile$4: java.lang.Object run()>
<sun.security.provider.PolicyFile$6: java.lang.Object run()>
<sun.security.provider.PolicyFile$6: void <init>(sun.security.provider.PolicyFile,java.security.CodeSource)>
<sun.security.provider.PolicyFile$PolicyEntry: java.security.CodeSource getCodeSource()>
<sun.security.provider.PolicyFile$PolicyEntry: java.util.List getPrincipals()>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource)>
<sun.security.provider.PolicyFile$PolicyEntry: void <init>(java.security.CodeSource,java.util.List)>
<sun.security.provider.PolicyFile$PolicyEntry: void add(java.security.Permission)>
<sun.security.provider.PolicyFile$PolicyInfo: void <init>(int)>
<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfActions()>
<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>
<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfType()>
<sun.security.provider.PolicyFile$SelfPermission: java.security.cert.Certificate[] getCerts()>
<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>
<sun.security.provider.PolicyFile: boolean access$400(sun.security.provider.PolicyFile,java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: boolean checkForTrustedIdentity(java.security.cert.Certificate,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>
<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>
<sun.security.provider.PolicyFile: java.security.CodeSource access$700(sun.security.provider.PolicyFile,java.security.CodeSource,boolean)>
<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>
<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>
<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>
<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>
<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getSignerCertificates(java.security.CodeSource)>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>
<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>
<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>
<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>
<sun.security.provider.PolicyParser$GrantEntry: java.util.Enumeration permissionElements()>
<sun.security.provider.PolicyParser$GrantEntry: void <init>()>
<sun.security.provider.PolicyParser$GrantEntry: void add(sun.security.provider.PolicyParser$PermissionEntry)>
<sun.security.provider.PolicyParser$ParsingException: java.lang.String getLocalizedMessage()>
<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>
<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>
<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>
<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayClass()>
<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>
<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>
<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<sun.security.provider.PolicyParser$PrincipalEntry: void <init>(java.lang.String,java.lang.String)>
<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>
<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>
<sun.security.provider.PolicyParser: java.lang.String getKeyStoreProvider()>
<sun.security.provider.PolicyParser: java.lang.String getKeyStoreType()>
<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>
<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>
<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>
<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>
<sun.security.provider.PolicyParser: java.util.Enumeration grantElements()>
<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>
<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>
<sun.security.provider.PolicyParser: void <init>()>
<sun.security.provider.PolicyParser: void add(sun.security.provider.PolicyParser$GrantEntry)>
<sun.security.provider.PolicyParser: void parseKeyStoreEntry()>
<sun.security.provider.PolicyParser: void parseStorePassURL()>
<sun.security.provider.PolicyParser: void read(java.io.Reader)>
<sun.security.provider.Sun: void <init>()>
<sun.security.timestamp.TimestampToken: java.util.Date getDate()>
<sun.security.timestamp.TimestampToken: void <init>(byte[])>
<sun.security.timestamp.TimestampToken: void parse(byte[])>
<sun.security.util.BitArray: byte[] toByteArray()>
<sun.security.util.BitArray: java.lang.Object clone()>
<sun.security.util.BitArray: void <init>(sun.security.util.BitArray)>
<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>
<sun.security.util.DerIndefLenConverter: void <init>()>
<sun.security.util.DerInputBuffer: byte[] getBitString()>
<sun.security.util.DerInputBuffer: java.util.Date getGeneralizedTime(int)>
<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>
<sun.security.util.DerInputBuffer: java.util.Date getUTCTime(int)>
<sun.security.util.DerInputBuffer: sun.security.util.DerInputBuffer dup()>
<sun.security.util.DerInputBuffer: void <init>(byte[])>
<sun.security.util.DerInputBuffer: void <init>(byte[],int,int)>
<sun.security.util.DerInputStream: byte[] toByteArray()>
<sun.security.util.DerInputStream: java.math.BigInteger getBigInteger()>
<sun.security.util.DerInputStream: java.util.Date getGeneralizedTime()>
<sun.security.util.DerInputStream: java.util.Date getUTCTime()>
<sun.security.util.DerInputStream: sun.security.util.DerInputStream subStream(int,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int)>
<sun.security.util.DerInputStream: void <init>(byte[])>
<sun.security.util.DerInputStream: void <init>(sun.security.util.DerInputBuffer)>
<sun.security.util.DerInputStream: void init(byte[],int,int)>
<sun.security.util.DerOutputStream: void putOrderedSet(byte,sun.security.util.DerEncoder[],java.util.Comparator)>
<sun.security.util.DerOutputStream: void putTime(java.util.Date,byte)>
<sun.security.util.DerValue: byte[] getBitString()>
<sun.security.util.DerValue: byte[] getOctetString()>
<sun.security.util.DerValue: int hashCode()>
<sun.security.util.DerValue: java.lang.String getAsString()>
<sun.security.util.DerValue: java.lang.String getBMPString()>
<sun.security.util.DerValue: java.lang.String getGeneralString()>
<sun.security.util.DerValue: java.lang.String getIA5String()>
<sun.security.util.DerValue: java.lang.String getPrintableString()>
<sun.security.util.DerValue: java.lang.String getT61String()>
<sun.security.util.DerValue: java.lang.String getUTF8String()>
<sun.security.util.DerValue: java.lang.String toString()>
<sun.security.util.DerValue: java.math.BigInteger getBigInteger()>
<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString()>
<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString(boolean)>
<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>
<sun.security.util.DerValue: sun.security.util.DerInputStream toDerInputStream()>
<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>
<sun.security.util.DerValue: void <init>(byte,byte[])>
<sun.security.util.DerValue: void <init>(byte[])>
<sun.security.util.DerValue: void <init>(sun.security.util.DerInputBuffer)>
<sun.security.util.DerValue: void init(boolean,java.io.InputStream)>
<sun.security.util.DerValue: void init(byte,java.lang.String)>
<sun.security.util.ManifestDigester$Entry: void <init>(int,int,int,byte[])>
<sun.security.util.ManifestDigester: sun.security.util.ManifestDigester$Entry get(java.lang.String,boolean)>
<sun.security.util.ManifestDigester: void <init>(byte[])>
<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>
<sun.security.util.ManifestEntryVerifier: java.util.jar.JarEntry getEntry()>
<sun.security.util.ManifestEntryVerifier: void <init>(java.util.jar.Manifest)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>
<sun.security.util.ObjectIdentifier: java.lang.String toString()>
<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>
<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputBuffer)>
<sun.security.util.Password: char[] readPassword(java.io.InputStream)>
<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>
<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>
<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>
<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>
<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder,java.util.List)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder)>
<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>
<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>
<sun.security.util.SignatureFileVerifier: java.security.Timestamp getTimestamp(sun.security.pkcs.SignerInfo)>
<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>
<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List)>
<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List)>
<sun.security.util.SignatureFileVerifier: void setSignatureFile(byte[])>
<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>
<sun.security.validator.PKIXValidator: boolean isSignatureValid(java.util.List,java.security.cert.X509Certificate)>
<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doBuild(java.security.cert.X509Certificate[],java.util.Collection)>
<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[])>
<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[],java.security.cert.PKIXBuilderParameters)>
<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] engineValidate(java.security.cert.X509Certificate[],java.util.Collection,java.lang.Object)>
<sun.security.validator.PKIXValidator: void <init>(java.lang.String,java.util.Collection)>
<sun.security.validator.PKIXValidator: void initCommon()>
<sun.security.validator.SimpleValidator: boolean getNetscapeCertTypeBit(java.security.cert.X509Certificate,java.lang.String)>
<sun.security.validator.Validator: java.security.cert.X509Certificate[] validate(java.security.cert.X509Certificate[])>
<sun.security.validator.Validator: java.security.cert.X509Certificate[] validate(java.security.cert.X509Certificate[],java.util.Collection,java.lang.Object)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Object,java.security.cert.X509Certificate,java.lang.Throwable)>
<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.x509.AVA: boolean hasRFC2253Keyword()>
<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>
<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>
<sun.security.x509.AVA: sun.security.util.DerValue parseHexString(java.io.Reader,int)>
<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>
<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>
<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>
<sun.security.x509.AVA: void <init>(sun.security.util.DerValue)>
<sun.security.x509.AVAKeyword: boolean hasKeyword(sun.security.util.ObjectIdentifier,int)>
<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>
<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>
<sun.security.x509.AlgorithmId: java.lang.String getName()>
<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId parse(sun.security.util.DerValue)>
<sun.security.x509.AlgorithmId: void <init>(sun.security.util.ObjectIdentifier,sun.security.util.DerValue)>
<sun.security.x509.AlgorithmId: void decodeParams()>
<sun.security.x509.AlgorithmId: void derEncode(java.io.OutputStream)>
<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>
<sun.security.x509.CRLExtensions: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>
<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>
<sun.security.x509.CertificateAlgorithmId: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateAlgorithmId: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.CertificateExtensions: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>
<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>
<sun.security.x509.CertificateExtensions: sun.security.x509.Extension getExtension(java.lang.String)>
<sun.security.x509.CertificateExtensions: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.CertificateExtensions: void init(sun.security.util.DerInputStream)>
<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>
<sun.security.x509.CertificateIssuerName: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateIssuerName: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.CertificateIssuerUniqueIdentity: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateIssuerUniqueIdentity: void <init>(sun.security.util.DerValue)>
<sun.security.x509.CertificateSerialNumber: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSerialNumber: void <init>(sun.security.util.DerValue)>
<sun.security.x509.CertificateSubjectName: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSubjectName: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.CertificateSubjectUniqueIdentity: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateSubjectUniqueIdentity: void <init>(sun.security.util.DerValue)>
<sun.security.x509.CertificateValidity: void construct(sun.security.util.DerValue)>
<sun.security.x509.CertificateX509Key: java.lang.Object get(java.lang.String)>
<sun.security.x509.CertificateX509Key: void <init>(sun.security.util.DerInputStream)>
<sun.security.x509.DNSName: int constrains(sun.security.x509.GeneralNameInterface)>
<sun.security.x509.DNSName: java.lang.String getName()>
<sun.security.x509.DNSName: void <init>(java.lang.String)>
<sun.security.x509.EDIPartyName: void <init>(sun.security.util.DerValue)>
<sun.security.x509.Extension: byte[] getExtensionValue()>
<sun.security.x509.Extension: void <init>(sun.security.util.DerValue)>
<sun.security.x509.Extension: void <init>(sun.security.x509.Extension)>
<sun.security.x509.GeneralName: java.lang.String toString()>
<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>
<sun.security.x509.GeneralNames: java.lang.String toString()>
<sun.security.x509.GeneralNames: sun.security.x509.GeneralNames add(sun.security.x509.GeneralName)>
<sun.security.x509.GeneralNames: void <init>()>
<sun.security.x509.GeneralNames: void <init>(sun.security.util.DerValue)>
<sun.security.x509.GeneralSubtree: void <init>(sun.security.util.DerValue)>
<sun.security.x509.GeneralSubtrees: void <init>()>
<sun.security.x509.GeneralSubtrees: void <init>(sun.security.util.DerValue)>
<sun.security.x509.GeneralSubtrees: void add(sun.security.x509.GeneralSubtree)>
<sun.security.x509.IPAddressName: byte[] getBytes()>
<sun.security.x509.IPAddressName: java.lang.String toString()>
<sun.security.x509.IPAddressName: void <init>(byte[])>
<sun.security.x509.IPAddressName: void <init>(java.lang.String)>
<sun.security.x509.IPAddressName: void <init>(sun.security.util.DerValue)>
<sun.security.x509.IPAddressName: void parseIPv4(java.lang.String)>
<sun.security.x509.IPAddressName: void parseIPv6(java.lang.String)>
<sun.security.x509.NameConstraintsExtension: void <init>(java.lang.Boolean,java.lang.Object)>
<sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>
<sun.security.x509.RDN: boolean equals(java.lang.Object)>
<sun.security.x509.RDN: int hashCode()>
<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>
<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>
<sun.security.x509.RDN: java.lang.String toRFC2253String(java.util.Map)>
<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>
<sun.security.x509.RDN: java.lang.String toString()>
<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>
<sun.security.x509.RDN: void <init>(sun.security.util.DerValue)>
<sun.security.x509.SerialNumber: java.math.BigInteger getNumber()>
<sun.security.x509.SerialNumber: void construct(sun.security.util.DerValue)>
<sun.security.x509.URIName: java.lang.Object getHostObject()>
<sun.security.x509.URIName: java.lang.String getHost()>
<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>
<sun.security.x509.URIName: void <init>(java.lang.String)>
<sun.security.x509.URIName: void <init>(java.net.URI,java.lang.String,sun.security.x509.DNSName)>
<sun.security.x509.UniqueIdentity: void <init>(sun.security.util.DerValue)>
<sun.security.x509.UnparseableExtension: java.lang.String toString()>
<sun.security.x509.X500Name: java.lang.String toString()>
<sun.security.x509.X500Name: sun.security.util.ObjectIdentifier intern(sun.security.util.ObjectIdentifier)>
<sun.security.x509.X500Name: void <init>(java.lang.String,java.util.Map)>
<sun.security.x509.X500Name: void generateDN()>
<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>
<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>
<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>
<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>
<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>
<sun.security.x509.X509CRLEntryImpl: byte[] getEncoded()>
<sun.security.x509.X509CRLEntryImpl: java.math.BigInteger getSerialNumber()>
<sun.security.x509.X509CRLEntryImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>
<sun.security.x509.X509CRLEntryImpl: void parse(sun.security.util.DerValue)>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: java.math.BigInteger getSerial()>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>
<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>
<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>
<sun.security.x509.X509CertImpl: byte[] getEncoded()>
<sun.security.x509.X509CertImpl: byte[] getExtensionValue(java.lang.String)>
<sun.security.x509.X509CertImpl: byte[] getTBSCertificate()>
<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>
<sun.security.x509.X509CertImpl: java.lang.String getSigAlgName()>
<sun.security.x509.X509CertImpl: java.lang.String toString()>
<sun.security.x509.X509CertImpl: java.security.Principal getIssuerDN()>
<sun.security.x509.X509CertImpl: java.security.Principal getSubjectDN()>
<sun.security.x509.X509CertImpl: java.security.PublicKey getPublicKey()>
<sun.security.x509.X509CertImpl: java.util.List getExtendedKeyUsage()>
<sun.security.x509.X509CertImpl: java.util.Set getCriticalExtensionOIDs()>
<sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getSubjectX500Principal()>
<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>
<sun.security.x509.X509CertImpl: sun.security.x509.SerialNumber getSerialNumberObject()>
<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>
<sun.security.x509.X509CertImpl: void verify(java.security.PublicKey)>
<sun.security.x509.X509CertImpl: void verify(java.security.PublicKey,java.lang.String)>
<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>
<sun.security.x509.X509CertInfo: int attributeMap(java.lang.String)>
<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>
<sun.security.x509.X509CertInfo: java.lang.String toString()>
<sun.security.x509.X509CertInfo: void <init>(byte[])>
<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>
<sun.security.x509.X509Key: java.lang.String toString()>
<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>
<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>
<sun.security.x509.X509Key: void <init>(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>
<sun.security.x509.X509Key: void setKey(sun.security.util.BitArray)>
<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>
<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>
<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>
<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>
<sun.text.normalizer.RuleCharacterIterator: void <init>(java.lang.String,sun.text.normalizer.SymbolTable,java.text.ParsePosition)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UnicodeSet getInclusions()>
<sun.text.normalizer.UnicodeSet: java.lang.StringBuffer _generatePattern(java.lang.StringBuffer,boolean)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int[],int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(java.lang.String)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyFilter(sun.text.normalizer.UnicodeSet$Filter)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet clear()>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement()>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retain(int[],int,int)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet)>
<sun.text.normalizer.UnicodeSet: void <init>()>
<sun.text.normalizer.UnicodeSet: void <init>(int,int)>
<sun.text.normalizer.UnicodeSet: void <init>(java.lang.String)>
<sun.text.normalizer.UnicodeSet: void applyPattern(sun.text.normalizer.RuleCharacterIterator,sun.text.normalizer.SymbolTable,java.lang.StringBuffer,int)>
<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>
<sun.util.BuddhistCalendar: int get(int)>
<sun.util.BuddhistCalendar: int getActualMaximum(int)>
<sun.util.BuddhistCalendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<sun.util.BuddhistCalendar: void add(int,int)>
<sun.util.LocaleDataMetaInfo: java.lang.String getSupportedLocaleString(java.lang.String)>
<sun.util.LocaleServiceProviderPool$1: java.lang.Object run()>
<sun.util.LocaleServiceProviderPool: boolean isJRESupported(java.util.Locale)>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>
<sun.util.LocaleServiceProviderPool: java.util.List getJRELocales()>
<sun.util.LocaleServiceProviderPool: java.util.Locale findProviderLocale(java.util.Locale,java.util.Locale)>
<sun.util.LocaleServiceProviderPool: java.util.Set access$000(sun.util.LocaleServiceProviderPool)>
<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>
<sun.util.LocaleServiceProviderPool: java.util.spi.LocaleServiceProvider findProvider(java.util.Locale)>
<sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>
<sun.util.LocaleServiceProviderPool: void <init>(java.lang.Class)>
<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<sun.util.PreHashedMap: java.lang.Object toV(java.lang.Object)>
<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>
<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>
<sun.util.ResourceBundleEnumeration: java.lang.String nextElement()>
<sun.util.ResourceBundleEnumeration: void <init>(java.util.Set,java.util.Enumeration)>
<sun.util.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.Object getObject(java.lang.Object,java.util.Locale,java.lang.String,java.lang.Object[])>
<sun.util.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String[] buildZoneStrings(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String)>
<sun.util.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String[] examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.util.Map,java.util.Set)>
<sun.util.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String[] getObject(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>
<sun.util.TimeZoneNameUtility: java.lang.String[] retrieveDisplayNames(java.lang.String,java.util.Locale)>
<sun.util.TimeZoneNameUtility: java.lang.String[] retrieveDisplayNames(sun.util.resources.OpenListResourceBundle,java.lang.String,java.util.Locale)>
<sun.util.TimeZoneNameUtility: java.lang.String[][] getZoneStrings(java.util.Locale)>
<sun.util.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>
<sun.util.TimeZoneNameUtility: sun.util.resources.OpenListResourceBundle getBundle(java.util.Locale)>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate,int)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] getEras()>
<sun.util.calendar.AbstractCalendar: void setEras(sun.util.calendar.Era[])>
<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>
<sun.util.calendar.BaseCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.BaseCalendar: boolean normalize(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: void normalizeMonth(sun.util.calendar.CalendarDate)>
<sun.util.calendar.CalendarDate: java.lang.Object clone()>
<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>
<sun.util.calendar.CalendarDate: void <init>()>
<sun.util.calendar.CalendarDate: void <init>(java.util.TimeZone)>
<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>
<sun.util.calendar.Era: java.lang.String getAbbreviation()>
<sun.util.calendar.Era: java.lang.String getName()>
<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>
<sun.util.calendar.Gregorian$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.Gregorian$Date: void setNormalizedYear(int)>
<sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate getCalendarDate(long,java.util.TimeZone)>
<sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate(long,java.util.TimeZone)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>
<sun.util.calendar.ImmutableGregorianDate: java.lang.String toString()>
<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.ImmutableGregorianDate: void <init>(sun.util.calendar.BaseCalendar$Date)>
<sun.util.calendar.LocalGregorianCalendar$1: java.lang.Object run()>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date addYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setYear(int)>
<sun.util.calendar.LocalGregorianCalendar$Date: void <init>(java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>
<sun.util.calendar.LocalGregorianCalendar: boolean normalize(sun.util.calendar.CalendarDate)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date adjustYear(sun.util.calendar.LocalGregorianCalendar$Date,long,int)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate(java.util.TimeZone)>
<sun.util.calendar.LocalGregorianCalendar: void <init>(java.lang.String,sun.util.calendar.Era[])>
<sun.util.calendar.LocalGregorianCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>
<sun.util.calendar.LocalGregorianCalendar: void normalizeMonth(sun.util.calendar.CalendarDate)>
<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>
<sun.util.calendar.ZoneInfo: java.lang.Object clone()>
<sun.util.calendar.ZoneInfo: java.util.Map getAliasTable()>
<sun.util.calendar.ZoneInfo: java.util.Map getCachedAliasTable()>
<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRule()>
<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRuleInstance()>
<sun.util.calendar.ZoneInfo: java.util.TimeZone getTimeZone(java.lang.String)>
<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int)>
<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int,int,int,long[],int[],int[],boolean)>
<sun.util.calendar.ZoneInfoFile$2: byte[] run()>
<sun.util.calendar.ZoneInfoFile$2: void <init>(java.lang.String)>
<sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>
<sun.util.calendar.ZoneInfoFile: byte[] readZoneInfoFile(java.lang.String)>
<sun.util.calendar.ZoneInfoFile: java.lang.String getFileName(java.lang.String)>
<sun.util.calendar.ZoneInfoFile: java.lang.String toCustomID(int)>
<sun.util.calendar.ZoneInfoFile: java.util.Map getZoneAliases()>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo createZoneInfo(java.lang.String)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getCustomTimeZone(java.lang.String,int)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getFromCache(java.lang.String)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo(java.lang.String)>
<sun.util.resources.LocaleData$1: java.lang.Object run()>
<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>
<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>
<sun.util.resources.LocaleData: java.util.Locale[] getAvailableLocales()>
<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getCurrencyNames(java.util.Locale)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>
<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getTimeZoneNames(java.util.Locale)>
<sun.util.resources.OpenListResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<sun.util.resources.OpenListResourceBundle: java.util.Enumeration getKeys()>
<sun.util.resources.OpenListResourceBundle: java.util.Set handleGetKeys()>
<sun.util.resources.OpenListResourceBundle: sun.util.resources.OpenListResourceBundle getParent()>
<sun.util.resources.OpenListResourceBundle: void loadLookup()>
<sun.util.resources.TimeZoneNames: java.lang.Object[][] getContents()>
<sun.util.resources.TimeZoneNamesBundle: java.lang.Object handleGetObject(java.lang.String)>
<sun.util.resources.TimeZoneNamesBundle: java.util.Map createMap(int)>
