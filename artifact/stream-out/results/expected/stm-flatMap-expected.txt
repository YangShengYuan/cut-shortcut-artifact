<StreamFlatMap: void flatMapExpanding()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapExpanding()>[10@L29] $r5 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: java.util.stream.Stream lambda$flatMapExpanding$1(W)>,MethodType: java.util.stream.Stream (W)]()} -> (2)objs: NewObj{<StreamFlatMap: W lambda$flatMapExpanding$0(W)>[0@L28] new W} |,| NewObj{<StreamFlatMap: void flatMapExpanding()>[3@L28] new W}
<StreamFlatMap: void flatMapExpanding()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapExpanding()>[26@L36] $r15 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: java.util.stream.Stream lambda$flatMapExpanding$5(W)>,MethodType: java.util.stream.Stream (W)]()} -> (2)objs: NewObj{<StreamFlatMap: W lambda$flatMapExpanding$4(W)>[0@L35] new W} |,| NewObj{<StreamFlatMap: void flatMapExpanding()>[19@L35] new W}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[11@L47] $r7 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeInterface]: <java.util.Collection: java.util.stream.Stream stream()>,MethodType: java.util.stream.Stream (java.util.List)]()} -> (1)objs: NewObj{<java.util.Arrays: java.util.List asList(java.lang.Object[])>[0@L3800] new java.util.Arrays$ArrayList}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[28@L59] $r19 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeInterface]: <java.util.Collection: java.util.stream.Stream stream()>,MethodType: java.util.stream.Stream (java.util.List)]()} -> (1)objs: NewObj{<java.util.Arrays: java.util.List asList(java.lang.Object[])>[0@L3800] new java.util.Arrays$ArrayList}
<StreamFlatMap: void flatMapExpanding()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapExpanding()>[14@L31] $r9 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: void lambda$flatMapExpanding$3(W)>,MethodType: void (W)]()} -> (3)objs: NewObj{<StreamFlatMap: W lambda$flatMapExpanding$0(W)>[0@L28] new W} |,| NewObj{<StreamFlatMap: java.util.stream.Stream lambda$flatMapExpanding$1(W)>[4@L30] new W} |,| NewObj{<StreamFlatMap: void flatMapExpanding()>[3@L28] new W}
<StreamFlatMap: void flatMapExpanding()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapExpanding()>[29@L38] $r18 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: void lambda$flatMapExpanding$6(W)>,MethodType: void (W)]()} -> (2)objs: NewObj{<StreamFlatMap: java.util.stream.Stream lambda$flatMapExpanding$5(W)>[2@L37] new W} |,| NewObj{<StreamFlatMap: java.util.stream.Stream lambda$flatMapExpanding$5(W)>[9@L37] new W}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[15@L48] $r11 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: void lambda$flatMapFlattening$10(W)>,MethodType: void (W)]()} -> (3)objs: NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$8(java.lang.Integer)>[14@L46] new W} |,| NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$8(java.lang.Integer)>[2@L46] new W} |,| NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$8(java.lang.Integer)>[7@L46] new W}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[31@L60] $r22 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: void lambda$flatMapFlattening$13(W)>,MethodType: void (W)]()} -> (4)objs: NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$12(java.lang.Integer)>[13@L56] new W} |,| NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$12(java.lang.Integer)>[19@L57] new W} |,| NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$12(java.lang.Integer)>[2@L54] new W} |,| NewObj{<StreamFlatMap: java.util.List lambda$flatMapFlattening$12(java.lang.Integer)>[9@L55] new W}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[9@L45] $r5 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: java.util.List lambda$flatMapFlattening$8(java.lang.Integer)>,MethodType: java.util.List (java.lang.Integer)]()} -> (1)objs: NewObj{<java.lang.Integer$IntegerCache: void <clinit>()>[35@L805] new java.lang.Integer}
<StreamFlatMap: void flatMapFlattening()>/[Lambda-Mock-Arg-0]-{<StreamFlatMap: void flatMapFlattening()>[26@L53] $r17 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamFlatMap: java.util.List lambda$flatMapFlattening$12(java.lang.Integer)>,MethodType: java.util.List (java.lang.Integer)]()} -> (1)objs: NewObj{<java.lang.Integer$IntegerCache: void <clinit>()>[35@L805] new java.lang.Integer}
