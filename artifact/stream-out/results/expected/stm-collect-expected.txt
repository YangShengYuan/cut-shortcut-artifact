<StreamCollect: void collectToHashSet()>/[Lambda-Mock-Arg-1]-{<StreamCollect: void collectToHashSet()>[40@L47] $r15 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeVirtual]: <java.util.HashSet: boolean add(java.lang.Object)>,MethodType: void (java.util.HashSet,Person)]()} -> (3)objs: NewObj{<StreamCollect: void collectToHashSet()>[0@L39] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[5@L40] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[10@L41] new Person}
<StreamCollect: void collectToHashSet()>/[Lambda-Mock-Arg-1]-{<StreamCollect: void collectToHashSet()>[58@L53] $r23 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamCollect: void lambda$collectToHashSet$1(java.util.HashSet,Person)>,MethodType: void (java.util.HashSet,Person)]()} -> (3)objs: NewObj{<StreamCollect: void collectToHashSet()>[15@L42] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[20@L43] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[25@L44] new Person}
<StreamCollect: void collectToHashSet()>/r18 -> (1)objs: LambdaConstructedObj{alloc=<StreamCollect: void collectToHashSet()>[39@L47] $r14 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "get" <MethodType: java.util.function.Supplier ()>[MethodType: java.lang.Object (),MethodHandle[REF_newInvokeSpecial]: <java.util.HashSet: void <init>()>,MethodType: java.util.HashSet ()](),type=java.util.HashSet in <StreamCollect: void collectToHashSet()>}
<StreamCollect: void collectToHashSet()>/r28 -> (3)objs: NewObj{<StreamCollect: void collectToHashSet()>[15@L42] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[20@L43] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[25@L44] new Person}
<StreamCollect: void collectToHashSet()>/r32 -> (3)objs: NewObj{<StreamCollect: void collectToHashSet()>[0@L39] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[5@L40] new Person} |,| NewObj{<StreamCollect: void collectToHashSet()>[10@L41] new Person}
<StreamCollect: void collectToHashSet()>/r33 -> (1)objs: NewObj{<StreamCollect: java.util.HashSet lambda$collectToHashSet$0()>[0@L54] new java.util.HashSet}
<StreamCollect: void collectToMap()>/[Lambda-Mock-Arg-1]-{<StreamCollect: void collectToMap()>[40@L70] $r15 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamCollect: void lambda$collectToMap$3(java.util.HashMap,Person)>,MethodType: void (java.util.HashMap,Person)]()} -> (3)objs: NewObj{<StreamCollect: void collectToMap()>[0@L63] new Person} |,| NewObj{<StreamCollect: void collectToMap()>[5@L64] new Person} |,| NewObj{<StreamCollect: void collectToMap()>[10@L65] new Person}
<StreamCollect: void collectToMap()>/[Lambda-Mock-Arg-1]-{<StreamCollect: void collectToMap()>[50@L76] $r22 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamCollect: void lambda$collectToMap$5(java.util.HashMap,Person)>,MethodType: void (java.util.HashMap,Person)]()} -> (3)objs: NewObj{<StreamCollect: void collectToMap()>[15@L66] new Person} |,| NewObj{<StreamCollect: void collectToMap()>[20@L67] new Person} |,| NewObj{<StreamCollect: void collectToMap()>[25@L68] new Person}
<StreamCollect: void collectToMap()>/r18 -> (1)objs: LambdaConstructedObj{alloc=<StreamCollect: void collectToMap()>[39@L70] $r14 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "get" <MethodType: java.util.function.Supplier ()>[MethodType: java.lang.Object (),MethodHandle[REF_newInvokeSpecial]: <java.util.HashMap: void <init>()>,MethodType: java.util.HashMap ()](),type=java.util.HashMap in <StreamCollect: void collectToMap()>}
<StreamCollect: void collectToMap()>/r25 -> (1)objs: NewObj{<StreamCollect: java.util.HashMap lambda$collectToMap$4()>[0@L78] new java.util.HashMap}
<StreamCollect: void collectToMap()>/r34 -> (3)objs: NewObj{<StreamCollect: void collectToMap()>[1@L63] new N} |,| NewObj{<StreamCollect: void collectToMap()>[6@L64] new N} |,| NewObj{<StreamCollect: void collectToMap()>[11@L65] new N}
<StreamCollect: void collectToMap()>/r35 -> (3)objs: NewObj{<StreamCollect: void collectToMap()>[16@L66] new N} |,| NewObj{<StreamCollect: void collectToMap()>[21@L67] new N} |,| NewObj{<StreamCollect: void collectToMap()>[26@L68] new N}
<StreamCollect: void lambda$collectToMap$3(java.util.HashMap,Person)>/$r5 -> (1)objs: NewObj{<java.lang.Integer$IntegerCache: void <clinit>()>[35@L805] new java.lang.Integer}
<StreamCollect: void lambda$collectToMap$5(java.util.HashMap,Person)>/$r5 -> (1)objs: NewObj{<java.lang.Integer$IntegerCache: void <clinit>()>[35@L805] new java.lang.Integer}