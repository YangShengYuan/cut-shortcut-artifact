<StreamReduce: void reduceComparison()>/[Lambda-Mock-Arg-0]-{<StreamReduce: void reduceComparison()>[38@L64] $r10 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: Employee lambda$reduceComparison$0(Employee,Employee)>,MethodType: Employee (Employee,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceComparison()>[0@L55] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[4@L56] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[8@L57] new Employee}
<StreamReduce: void reduceComparison()>/[Lambda-Mock-Arg-0]-{<StreamReduce: void reduceComparison()>[42@L67] $r14 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: Employee lambda$reduceComparison$1(Employee,Employee)>,MethodType: Employee (Employee,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceComparison()>[12@L58] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[16@L59] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[20@L60] new Employee}
<StreamReduce: void reduceComparison()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceComparison()>[38@L64] $r10 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: Employee lambda$reduceComparison$0(Employee,Employee)>,MethodType: Employee (Employee,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceComparison()>[0@L55] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[4@L56] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[8@L57] new Employee}
<StreamReduce: void reduceComparison()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceComparison()>[42@L67] $r14 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: Employee lambda$reduceComparison$1(Employee,Employee)>,MethodType: Employee (Employee,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceComparison()>[12@L58] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[16@L59] new Employee} |,| NewObj{<StreamReduce: void reduceComparison()>[20@L60] new Employee}
<StreamReduce: void reduceComparison()>/r13 -> (1)objs: NewObj{<StreamReduce: void reduceComparison()>[8@L57] new Employee}
<StreamReduce: void reduceComparison()>/r17 -> (1)objs: NewObj{<StreamReduce: void reduceComparison()>[16@L59] new Employee}
<StreamReduce: void reduceAlloc()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceAlloc()>[19@L79] $r5 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeVirtual]: <Employee: Employee merge(Employee)>,MethodType: Employee (Employee,Employee)]()} -> (2)objs: NewObj{<StreamReduce: void reduceAlloc()>[0@L76] new Employee} |,| NewObj{<StreamReduce: void reduceAlloc()>[4@L77] new Employee}
<StreamReduce: void reduceAlloc()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceAlloc()>[39@L85] $r15 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BinaryOperator ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeVirtual]: <Employee: Employee merge(Employee)>,MethodType: Employee (Employee,Employee)]()} -> (2)objs: NewObj{<StreamReduce: void reduceAlloc()>[25@L82] new Employee} |,| NewObj{<StreamReduce: void reduceAlloc()>[29@L83] new Employee}
<StreamReduce: void reduceAlloc()>/r17 -> (1)objs: NewObj{<Employee: Employee merge(Employee)>[0@L157] new Employee}
<StreamReduce: void reduceAlloc()>/r7 -> (1)objs: NewObj{<Employee: Employee merge(Employee)>[0@L157] new Employee}
<StreamReduce: void reduceToList()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceToList()>[40@L102] $r11 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BiFunction ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: java.util.List lambda$reduceToList$2(java.util.List,Employee)>,MethodType: java.util.List (java.util.List,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceToList()>[0@L90] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[4@L91] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[8@L92] new Employee}
<StreamReduce: void reduceToList()>/[Lambda-Mock-Arg-1]-{<StreamReduce: void reduceToList()>[46@L118] $r16 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.BiFunction ()>[MethodType: java.lang.Object (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: java.util.List lambda$reduceToList$4(java.util.List,Employee)>,MethodType: java.util.List (java.util.List,Employee)]()} -> (3)objs: NewObj{<StreamReduce: void reduceToList()>[12@L93] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[16@L94] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[20@L95] new Employee}
<StreamReduce: void reduceToList()>/r14 -> (1)objs: NewObj{<StreamReduce: java.util.List lambda$reduceToList$2(java.util.List,Employee)>[0@L105] new java.util.ArrayList}
<StreamReduce: void reduceToList()>/r19 -> (1)objs: NewObj{<StreamReduce: void reduceToList()>[44@L117] new java.util.ArrayList}
<StreamReduce: Employee getFirstEmployeeByStreamMap(java.util.List)>/$r6 -> (2)objs: NewObj{<StreamReduce: void reduceToList()>[12@L93] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[0@L90] new Employee}
<StreamReduce: Employee getFirstEmployeeByStreamMap(java.util.List)>/[Lambda-Mock-Arg-0]-{<StreamReduce: Employee getFirstEmployeeByStreamMap(java.util.List)>[1@L132] $r2 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamReduce: Employee lambda$getFirstEmployeeByStreamMap$6(java.util.List)>,MethodType: Employee (java.util.List)]()} -> (2)objs: NewObj{<StreamReduce: void reduceToList()>[44@L117] new java.util.ArrayList} |,| NewObj{<StreamReduce: java.util.List lambda$reduceToList$2(java.util.List,Employee)>[0@L105] new java.util.ArrayList}
<StreamReduce: Employee lambda$getFirstEmployeeByStreamMap$6(java.util.List)>/$r2 -> (2)objs: NewObj{<StreamReduce: void reduceToList()>[12@L93] new Employee} |,| NewObj{<StreamReduce: void reduceToList()>[0@L90] new Employee}