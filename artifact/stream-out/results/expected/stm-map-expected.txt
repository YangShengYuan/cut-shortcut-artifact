<StreamMap: void mapToGetter()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapToGetter()>[13@L53] $r7 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeVirtual]: <Outer: Inner getInner()>,MethodType: Inner (Outer)]()} -> (1)objs: NewObj{<StreamMap: void mapToGetter()>[6@L49] new Outer}
<StreamMap: void mapToGetter()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapToGetter()>[19@L58] $r13 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamMap: Inner lambda$mapToGetter$0(Outer)>,MethodType: Inner (Outer)]()} -> (1)objs: NewObj{<StreamMap: void mapToGetter()>[8@L50] new Outer}
<StreamMap: void mapToGetter()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapToGetter()>[25@L63] $r19 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeVirtual]: <Outer: Inner getDummy()>,MethodType: Inner (Outer)]()} -> (1)objs: NewObj{<StreamMap: void mapToGetter()>[10@L51] new Outer}
<StreamMap: void mapToGetter()>/r11 -> (1)objs: NewObj{<StreamMap: void mapToGetter()>[0@L46] new Inner}
<StreamMap: void mapToGetter()>/r17 -> (1)objs: NewObj{<StreamMap: void mapToGetter()>[2@L47] new Inner}
<StreamMap: void mapToGetter()>/r23 -> (1)objs: NewObj{<Outer: void <init>(Inner)>[1@L112] new Inner}
<StreamMap: void mapToAlloc()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapToAlloc()>[15@L78] $r6 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_newInvokeSpecial]: <Outer: void <init>(Inner)>,MethodType: Outer (Inner)]()} -> (2)objs: NewObj{<StreamMap: void mapToAlloc()>[0@L72] new Inner} |,| NewObj{<StreamMap: void mapToAlloc()>[2@L73] new Inner}
<StreamMap: void mapToAlloc()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapToAlloc()>[24@L82] $r13 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_newInvokeSpecial]: <Outer: void <init>(Inner)>,MethodType: Outer (Inner)]()} -> (2)objs: NewObj{<StreamMap: void mapToAlloc()>[4@L74] new Inner} |,| NewObj{<StreamMap: void mapToAlloc()>[6@L75] new Inner}
<StreamMap: void mapToAlloc()>/r10 -> (1)objs: LambdaConstructedObj{alloc=<StreamMap: void mapToAlloc()>[15@L78] $r6 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_newInvokeSpecial]: <Outer: void <init>(Inner)>,MethodType: Outer (Inner)](),type=Outer in <StreamMap: void mapToAlloc()>}
<StreamMap: void mapToAlloc()>/r17 -> (1)objs: LambdaConstructedObj{alloc=<StreamMap: void mapToAlloc()>[24@L82] $r13 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function ()>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_newInvokeSpecial]: <Outer: void <init>(Inner)>,MethodType: Outer (Inner)](),type=Outer in <StreamMap: void mapToAlloc()>}
<StreamMap: void mapComplex()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapComplex()>[15@L96] $r7 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function (Flag)>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamMap: Inner lambda$mapComplex$1(Flag,Outer)>,MethodType: Inner (Outer)]($r4)} -> (1)objs: NewObj{<StreamMap: void mapComplex()>[4@L91] new Outer}
<StreamMap: void mapComplex()>/[Lambda-Mock-Arg-0]-{<StreamMap: void mapComplex()>[21@L100] $r13 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "apply" <MethodType: java.util.function.Function (Flag)>[MethodType: java.lang.Object (java.lang.Object),MethodHandle[REF_invokeStatic]: <StreamMap: Inner lambda$mapComplex$2(Flag,Outer)>,MethodType: Inner (Outer)]($r5)} -> (1)objs: NewObj{<StreamMap: void mapComplex()>[6@L92] new Outer}
<StreamMap: void mapComplex()>/r11 -> (1)objs: NewObj{<StreamMap: void mapComplex()>[0@L89] new Inner}
<StreamMap: void mapComplex()>/r17 -> (1)objs: NewObj{<Outer: void <init>(Inner)>[1@L112] new Inner}
