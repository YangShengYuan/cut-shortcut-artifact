<SimpleStreamFunc: void FuncMethodReference()>/r7 -> (1)objs: LambdaConstructedObj{alloc=<SimpleStreamFunc: void FuncMethodReference()>[0@L33] $r0 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "get" <MethodType: java.util.function.Supplier ()>[MethodType: java.lang.Object (),MethodHandle[REF_newInvokeSpecial]: <W: void <init>()>,MethodType: W ()](),type=W in <SimpleStreamFunc: void FuncMethodReference()>}
<SimpleStreamFunc: void FuncMethodReference()>/r12 -> (1)objs: NewObj{<SimpleStreamFunc: void FuncMethodReference()>[2@L34] new W}
<SimpleStreamFunc: void FuncLambda()>/[Lambda-Mock-Arg-0]-{<SimpleStreamFunc: void FuncLambda()>[8@L42] $r4 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <SimpleStreamFunc: void lambda$FuncLambda$2(W)>,MethodType: void (W)]()} -> (2)objs: NewObj{<SimpleStreamFunc: void FuncLambda()>[3@L42] new W} |,| NewObj{<SimpleStreamFunc: W lambda$FuncLambda$1(W)>[0@L42] new W}
<SimpleStreamFunc: void FuncLambda()>/[Lambda-Mock-Arg-0]-{<SimpleStreamFunc: void FuncLambda()>[37@L52] $r24 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <SimpleStreamFunc: void lambda$FuncLambda$7(W)>,MethodType: void (W)]()} -> (2)objs: NewObj{<SimpleStreamFunc: void FuncLambda()>[32@L52] new W} |,| NewObj{<SimpleStreamFunc: W lambda$FuncLambda$6(W)>[0@L52] new W}
<SimpleStreamFunc: void FuncLambda()>/r13 -> (1)objs: NewObj{<SimpleStreamFunc: W lambda$FuncLambda$1(W)>[0@L42] new W}
<SimpleStreamFunc: void FuncLambda()>/r33 -> (1)objs: NewObj{<SimpleStreamFunc: W lambda$FuncLambda$6(W)>[0@L52] new W}
<SimpleStreamFunc: void FuncForEachOut()>/[Lambda-Mock-Arg-0]-{<SimpleStreamFunc: void FuncForEachOut()>[12@L65] $r8 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <SimpleStreamFunc: void lambda$FuncForEachOut$12(W)>,MethodType: void (W)]()} -> (2)objs: NewObj{<SimpleStreamFunc: void FuncForEachOut()>[0@L62] new W} |,| NewObj{<SimpleStreamFunc: W lambda$FuncForEachOut$10(W)>[0@L62] new W}
<SimpleStreamFunc: void FuncForEachOut()>/[Lambda-Mock-Arg-0]-{<SimpleStreamFunc: void FuncForEachOut()>[24@L71] $r17 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer ()>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <SimpleStreamFunc: void lambda$FuncForEachOut$15(W)>,MethodType: void (W)]()} -> (2)objs: NewObj{<SimpleStreamFunc: void FuncForEachOut()>[14@L68] new W} |,| NewObj{<SimpleStreamFunc: W lambda$FuncForEachOut$13(W)>[0@L68] new W}
